FUNCTION ZFM_GP_SD_WMS_CKDTB_GET .
*"----------------------------------------------------------------------
*"*"本地接口：
*"  EXPORTING
*"     VALUE(RTYPE) TYPE  BAPI_MTYPE
*"     VALUE(RTMSG) TYPE  BAPI_MSG
*"  TABLES
*"      INTAB1 STRUCTURE  ZSSD219
*"      INTAB2 STRUCTURE  ZSSD220
*"----------------------------------------------------------------------

  ZFMDATASAVE1 'ZFM_GP_SD_WMS_CKDTB_GET'.
  ZFMDATASAVE2 'B'.
  COMMIT WORK.
  DATA:HEADER_DATA    TYPE BAPIOBDLVHDRCHG,
       HEADER_CONTROL TYPE BAPIOBDLVHDRCTRLCHG,
       TECHN_CONTROL  TYPE BAPIDLVCONTROL,
       ITEM_DATA      TYPE STANDARD TABLE OF BAPIOBDLVITEMCHG WITH HEADER LINE,
       ITEM_CONTROL   TYPE STANDARD TABLE OF BAPIOBDLVITEMCTRLCHG WITH HEADER LINE,
       RETURN         TYPE STANDARD TABLE OF BAPIRET2 WITH HEADER LINE,
       ITEM_DATA_SPL  TYPE STANDARD TABLE OF /SPE/BAPIOBDLVITEMCHG WITH HEADER LINE.
  DATA:POSNR_CF       TYPE POSNR.
  DATA:STR1    TYPE CHAR100,
       STR2    TYPE CHAR100,
       STR3    TYPE CHAR10,
       PLNUM   TYPE CHAR10,
       PLNUMH  TYPE CHAR6,
       PLNUMHH TYPE POSNR.
  DATA:GT_ZTSD206     TYPE TABLE OF ZTSD206 WITH HEADER LINE.
  CLEAR:GT_ZTSD206,GT_ZTSD206[].

  DATA:SALES_ORDER_ITEMS TYPE TABLE OF BAPIDLVREFTOSALESORDER WITH HEADER LINE,
*       RETURN            TYPE TABLE OF BAPIRET2 WITH HEADER LINE,
       IT_VBELN          TYPE TABLE OF BAPIVBELN WITH HEADER LINE,
       SHIP_POINT        TYPE BAPIDLVCREATEHEADER-SHIP_POINT,
       DELIVERY          TYPE BAPISHPDELIVNUMB-DELIV_NUMB,
       DUE_DATE          TYPE BAPIDLVCREATEHEADER-DUE_DATE.
  DATA: WMSNO       TYPE  BSTKD,
        ERPBILLCODE TYPE  VBELN,
        STATUS      TYPE  CHAR100,
        WAREHOUSE   TYPE  CHAR10,
        POSNR       TYPE  POSNR.
  TYPES: BEGIN OF ZSBHXX,
           POSNR  TYPE POSNR,
           ZBH    TYPE ZEG_ZBH,
           MATNR  TYPE MATNR,
           KWMENG TYPE VBAP-KWMENG,
         END OF ZSBHXX.
  DATA: GT_BHXX TYPE TABLE OF ZSBHXX WITH HEADER LINE.
  TYPES: BEGIN OF ZSBHCD,
           ZBH     TYPE ZEG_ZBH,
           PLNUM   TYPE PLNUM,
           PLNUMHH TYPE ZEPP_ZJHDHH,
         END OF ZSBHCD.
  DATA: GT_BHCD TYPE TABLE OF ZSBHCD WITH HEADER LINE.
  TYPES: BEGIN OF ZSVBAP,
           VBELN  TYPE VBELN,
           POSNR  TYPE POSNR,
           MATNR  TYPE MARA-MATNR,
           XCHPF  TYPE MARA-XCHPF,
           KWMENG TYPE VBAP-KWMENG,
           VRKME  TYPE VBAP-VRKME,
           JHSL   TYPE VBAP-KWMENG,
           ZZBH   TYPE CHAR1,
           ZBAOH  TYPE CHAR1,
         END OF ZSVBAP.
  DATA: IT_VBAP TYPE TABLE OF ZSVBAP WITH HEADER LINE.
*  DATA: IT_VBAP TYPE TABLE OF VBAP WITH HEADER LINE.
  DATA: GT_ZBH TYPE TABLE OF ZSPP_006 WITH HEADER LINE,
        OUTTAB TYPE TABLE OF ZSMM206  WITH HEADER LINE.
  TYPES: BEGIN OF ZSZBHXX,
           ZZBH   TYPE CHAR30,
           POSNR  TYPE POSNR,
           KWMENG TYPE VBAP-KWMENG,
         END OF ZSZBHXX.
  DATA: GT_ZZBH TYPE TABLE OF ZSZBHXX WITH HEADER LINE.
  DATA: BEGIN OF GT_MSPR OCCURS 0.
          INCLUDE TYPE MSPR.
  DATA:   ZZBH TYPE CHAR30,
        END OF GT_MSPR.

  DATA: MENGE TYPE MENGE_D,
        MSG   TYPE CHAR200.
*  TYPES: BEGIN OF ZSPOSNR,
*           VBELN TYPE VBELN,
*           POSNR TYPE POSNR,
*         END OF ZSPOSNR.
*  DATA: HZ_POSNR TYPE TABLE OF ZSPOSNR WITH HEADER LINE.
*  TYPES: BEGIN OF ZSBH,
*           VBELN TYPE VBELN,
*           POSNR TYPE POSNR,
*           ZBH   TYPE ZEG_ZBH,
*           KWMENG TYPE VBAP-KWMENG,
*         END OF ZSBH.
*  DATA: HZ_BH TYPE TABLE OF ZSBH WITH HEADER LINE.
  DEFINE RETURNERROR.
    RTYPE = 'E'.
    RTMSG = &1.
    WMSNO       = INTAB1-WMSNO.
    ERPBILLCODE = ''.
    STATUS      = 'FAIL'.
    WAREHOUSE   = INTAB1-WAREHOUSE.

    CALL FUNCTION 'ZFM_GP_SD_WMS_CKDTB_POST' IN BACKGROUND TASK
      EXPORTING
        WMSNO             = WMSNO
        ERPBILLCODE       = ERPBILLCODE
        STATUS            = STATUS
        WAREHOUSE         = WAREHOUSE
*     IMPORTING
*       P_INPUT           =
*       P_OUTPUT          =
*       P_STATUS          =
*       RTYPE             =
*       RTMSG             =
        EXCEPTIONS
          OTHERS          = 1 .

    COMMIT WORK.
    ZFMDATASAVE2 'R'.
    RETURN.
  END-OF-DEFINITION.

  IF LINES( INTAB1[] ) <> '1' AND INTAB2[] IS INITIAL.
    RETURNERROR '输入参数有问题!' .
  ENDIF.

*  SORT INTAB2 BY ID PKGNO OUTBOUNDDETAILID .
*  LOOP AT INTAB2.
*    HZ_POSNR-VBELN = INTAB1-CORRELATIONNO.
*    HZ_POSNR-POSNR = INTAB2-ID.
*    COLLECT HZ_POSNR.
*    HZ_BH-VBELN = INTAB1-CORRELATIONNO.
*    HZ_BH-POSNR = INTAB2-ID.
*    HZ_BH-ZBH = INTAB2-PKGNO.
*    HZ_BH-KWMENG = INTAB2-QTY.
*    COLLECT HZ_BH.
*  ENDLOOP.

  READ TABLE INTAB1 INDEX 1.
  SELECT
    VBAK~VBELN
    VBAP~POSNR
    MARA~MATNR
    MARA~XCHPF
    VBAP~KWMENG
    VBAP~VRKME
    INTO CORRESPONDING FIELDS OF TABLE IT_VBAP
    FROM VBAP
    INNER JOIN VBAK ON VBAP~VBELN = VBAK~VBELN
    INNER JOIN MARA ON MARA~MATNR = VBAP~MATNR
    FOR ALL ENTRIES IN INTAB2
    WHERE  VBAK~VBELN = INTAB1-CORRELATIONNO
     AND   VBAP~POSNR = INTAB2-ID
     AND   VBAK~VBTYP = 'C' "发货
      .
  IF SY-SUBRC <> 0.
    RETURNERROR '未查询到发货单!' .
  ENDIF.
  SORT IT_VBAP BY VBELN POSNR.

  CLEAR:DUE_DATE,SHIP_POINT,DELIVERY.
  REFRESH:RETURN,SALES_ORDER_ITEMS,GT_BHXX.

  DUE_DATE = SY-DATUM."交货创建日期
  SHIP_POINT = ''. "装运点
  POSNR = '000000'.
  LOOP AT INTAB2.
    CLEAR:GT_BHXX,GT_BHCD,GT_ZBH,GT_ZZBH.
    GT_BHXX-POSNR  = INTAB2-ID.
    GT_BHXX-ZBH    = INTAB2-PKGNO.
    GT_BHXX-MATNR  = INTAB2-PRODUCTCODE.
    GT_BHXX-KWMENG = INTAB2-QTY.
    CLEAR:STR1,STR2,STR3,PLNUM,PLNUMH,PLNUMHH.
    SPLIT INTAB2-OUTBOUNDDETAILID AT '/' INTO STR1 STR2 STR3 .
    PERFORM ADDZERO(ZPUBFORM) CHANGING STR3.
    PLNUM   = '000' && STR3(7)  .
    PLNUMH  = '00'  && STR3+7(3) && '0' .
    PLNUMHH = PLNUMH.
    GT_BHCD-ZBH     = INTAB2-PKGNO.
    GT_BHCD-PLNUM   = PLNUM.
    GT_BHCD-PLNUMHH = PLNUMHH.
    IF INTAB2-PKGNO IS NOT INITIAL.
      COLLECT GT_BHXX.
      COLLECT GT_BHCD.
    ENDIF.
    GT_ZBH-ZJH      = INTAB2-SERIALNO.
    GT_ZZBH-ZZBH    = INTAB2-SERIALNO.
    GT_ZZBH-POSNR   = INTAB2-ID.
    GT_ZZBH-KWMENG  = INTAB2-QTY.
    IF INTAB2-SERIALNO IS NOT INITIAL.
      COLLECT GT_ZBH.
      COLLECT GT_ZZBH.
    ENDIF.

    READ TABLE IT_VBAP INTO DATA(WA_VBAP) WITH KEY VBELN = INTAB1-CORRELATIONNO POSNR = INTAB2-ID BINARY SEARCH.
    IF SY-SUBRC <> 0 .
      RETURNERROR '未查询到发货单明细!' .
    ENDIF.
**   记录发货单行对应的交货单行号
*    POSNR = POSNR + 10.
*    WA_VBAP-VGPOS = POSNR.
    IF INTAB2-SERIALNO IS NOT INITIAL.
      WA_VBAP-ZZBH = 'Y'.
      MODIFY IT_VBAP FROM WA_VBAP INDEX SY-TABIX TRANSPORTING ZZBH .
    ENDIF.
    IF INTAB2-PKGNO IS NOT INITIAL.
      WA_VBAP-ZBAOH = 'Y'.
      MODIFY IT_VBAP FROM WA_VBAP INDEX SY-TABIX TRANSPORTING ZBAOH .
    ENDIF.
    WA_VBAP-JHSL = WA_VBAP-JHSL + INTAB2-QTY.
    MODIFY IT_VBAP FROM WA_VBAP INDEX SY-TABIX TRANSPORTING JHSL .
  ENDLOOP.

  LOOP AT IT_VBAP INTO DATA(WA_VBAP9).
    "发货单行是否已参考创建
    READ TABLE SALES_ORDER_ITEMS WITH KEY REF_ITEM = WA_VBAP9-POSNR .
    IF SY-SUBRC = 0.
      CONTINUE.
    ENDIF.

    CLEAR:SALES_ORDER_ITEMS.
    SALES_ORDER_ITEMS-REF_DOC    = WA_VBAP9-VBELN.
    SALES_ORDER_ITEMS-REF_ITEM   = WA_VBAP9-POSNR.
    SALES_ORDER_ITEMS-DLV_QTY    = WA_VBAP9-JHSL.
    SALES_ORDER_ITEMS-SALES_UNIT = WA_VBAP9-VRKME.

    APPEND SALES_ORDER_ITEMS.

  ENDLOOP.

  SET UPDATE TASK LOCAL.
  CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_SLS'
    EXPORTING
      SHIP_POINT        = SHIP_POINT
      DUE_DATE          = DUE_DATE
    IMPORTING
      DELIVERY          = DELIVERY
    TABLES
      SALES_ORDER_ITEMS = SALES_ORDER_ITEMS
      RETURN            = RETURN
    EXCEPTIONS
      OTHERS            = 1.
  IF SY-SUBRC NE 0.
    RETURNERROR 'E:FAIL!' .
  ENDIF.
  LOOP AT RETURN WHERE TYPE CA 'AEX'.
    CONCATENATE RETURN-MESSAGE RTMSG INTO RTMSG.
  ENDLOOP.
  IF SY-SUBRC EQ 0.
    CONCATENATE 'E:' RTMSG INTO RTMSG.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURNERROR RTMSG .
  ENDIF.
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      WAIT = 'X'.

  IF DELIVERY IS INITIAL.
    RETURNERROR 'E:FAIL!' .
  ENDIF.
*传递提单
*  MSG = 'X'.
*  SET UPDATE TASK LOCAL.
*  PERFORM VL01N(ZPUBFORM) TABLES IT_VBAP USING '' SY-DATUM CHANGING MSG.
*  IF MSG(1) <> 'S'.
*    RETURNERROR 'E:FAIL!' .
*  ENDIF.
*  RTYPE = 'S'.
*  CONCATENATE 'S:' DELIVERY INTO RTMSG.

  IF GT_BHXX[] IS NOT INITIAL.
    SELECT
      ZTPP316~*
      INTO TABLE @DATA(IT_ZTPP316)
      FROM ZTPP316
      FOR ALL ENTRIES IN @GT_BHXX
      WHERE ZTPP316~ZBH = @GT_BHXX-ZBH
        .
    SORT IT_ZTPP316 BY ZBH.
  ENDIF.
  IF GT_BHCD[] IS NOT INITIAL.
    SELECT
      ZTPP316~*
      INTO TABLE @DATA(IT_316)
      FROM ZTPP316
      FOR ALL ENTRIES IN @GT_BHCD
      WHERE ZTPP316~ZBH     = @GT_BHCD-ZBH
        AND ZTPP316~PLNUM   = @GT_BHCD-PLNUM
        AND ZTPP316~PLNUMHH = @GT_BHCD-PLNUMHH
        .
    SORT IT_316 BY ZBH PLNUM PLNUMHH.
  ENDIF.
  IF GT_ZBH[] IS NOT INITIAL.
    CLEAR:OUTTAB[].
    CALL FUNCTION 'ZFM_CHECKUSE_BYJH'
      EXPORTING
        ATNAM  = 'Z01'
      TABLES
        INTAB  = GT_ZBH
        OUTTAB = OUTTAB.
    DELETE OUTTAB WHERE CLABS EQ 0
                    OR PSPNR IS INITIAL
                    OR MATNR IS INITIAL
                    OR LGORT IS INITIAL
                    OR WERKS IS INITIAL.
    IF OUTTAB[] IS NOT INITIAL.
      SORT OUTTAB BY PSPNR MATNR LGORT WERKS.
      SELECT *
         INTO TABLE @DATA(IT_MSPR)
         FROM MSPR
         FOR ALL ENTRIES IN @OUTTAB
         WHERE PSPNR = @OUTTAB-PSPNR
         AND   MATNR = @OUTTAB-MATNR
         AND   LGORT = @OUTTAB-LGORT
         AND   WERKS = @OUTTAB-WERKS
         AND   CHARG = @OUTTAB-CHARG
         AND   PRLAB GT 0.
      SORT IT_MSPR BY PSPNR MATNR LGORT WERKS CHARG."ERSDA
    ENDIF.
*    SELECT *
*       INTO TABLE @DATA(IT_MCHB)
*       FROM MCHB
*       FOR ALL ENTRIES IN @OUTTAB
*       WHERE MATNR = @OUTTAB-MATNR
*       AND   LGORT = @OUTTAB-LGORT
*       AND   WERKS = @OUTTAB-WERKS
*       AND   CLABS GT 0.
*    SORT IT_MCHB BY MATNR LGORT WERKS ERSDA CHARG.

    CLEAR GT_MSPR[].
    LOOP AT IT_MSPR INTO DATA(WA_MSPR).
      CLEAR GT_MSPR.
      MOVE-CORRESPONDING WA_MSPR TO GT_MSPR.
      READ TABLE OUTTAB WITH KEY PSPNR = GT_MSPR-PSPNR MATNR = GT_MSPR-MATNR LGORT = GT_MSPR-LGORT
                                 WERKS = GT_MSPR-WERKS CHARG = GT_MSPR-CHARG BINARY SEARCH.
      GT_MSPR-ZZBH = OUTTAB-Z01.
      APPEND GT_MSPR.
    ENDLOOP.

*    SORT GT_MSPR BY ZZBH PSPNR MATNR LGORT ERSDA CHARG.
    SORT GT_MSPR BY ZZBH  CHARG."ERSDA
  ENDIF.

  DO 100 TIMES.
    SELECT
      VBAP~VBELN AS FHD,
      VBAP~POSNR AS FHDH,
      LIPS~VBELN AS CKD,
      LIPS~POSNR AS CKDH
      INTO TABLE @DATA(IT_FHCK)
      FROM VBAP
      INNER JOIN LIPS ON LIPS~VGBEL = VBAP~VBELN AND LIPS~VGPOS = VBAP~POSNR
      FOR ALL ENTRIES IN @IT_VBAP
      WHERE VBAP~VBELN = @IT_VBAP-VBELN
        AND VBAP~POSNR = @IT_VBAP-POSNR
       .
    IF SY-SUBRC = 0.
      EXIT.
    ELSE.
      WAIT UP TO '0.1' SECONDS.
    ENDIF.
  ENDDO.

  REFRESH:RETURN,ITEM_DATA_SPL,ITEM_CONTROL,ITEM_DATA.
  CLEAR:TECHN_CONTROL,HEADER_CONTROL,HEADER_DATA,
          RETURN,ITEM_DATA_SPL,ITEM_CONTROL,ITEM_DATA.

  TECHN_CONTROL-UPD_IND     = 'U'.
  HEADER_DATA-DELIV_NUMB    = DELIVERY.
  HEADER_CONTROL-DELIV_NUMB = DELIVERY.

  SORT GT_ZZBH BY POSNR.

  POSNR_CF = '900000'.
  LOOP AT IT_FHCK INTO DATA(WA_FHCK).
    CLEAR MENGE.
    READ TABLE IT_VBAP INTO WA_VBAP WITH KEY VBELN = WA_FHCK-FHD POSNR = WA_FHCK-FHDH BINARY SEARCH.
    IF WA_VBAP-ZZBH <> 'Y' AND WA_VBAP-ZBAOH = 'Y' .
      CLEAR:ITEM_DATA,ITEM_CONTROL.
*修改当前行项目交货数量改为0
      ITEM_DATA-DELIV_NUMB      = DELIVERY.
      ITEM_DATA-DELIV_ITEM      = WA_FHCK-CKDH.
      ITEM_DATA-FACT_UNIT_NOM   = '1'.
      ITEM_DATA-FACT_UNIT_DENOM = '1'.
*    ITEM_DATA-MATERIAL        = INTAB2-MATNR.
      ITEM_DATA-DLV_QTY         = 0.
      ITEM_CONTROL-CHG_DELQTY   = 'X'.
      ITEM_CONTROL-DELIV_NUMB   = DELIVERY.
      ITEM_CONTROL-DELIV_ITEM   = WA_FHCK-CKDH.
      APPEND:ITEM_DATA,ITEM_CONTROL.
*新增当前行项目 批次拆分
      LOOP AT GT_BHXX WHERE POSNR = WA_FHCK-FHDH.
        POSNR_CF = POSNR_CF + 1 .
        CLEAR:ITEM_DATA,ITEM_CONTROL.
        ITEM_DATA-DELIV_NUMB      = DELIVERY.
        ITEM_DATA-DELIV_ITEM      = POSNR_CF.
        ITEM_DATA-FACT_UNIT_NOM   = '1'.
        ITEM_DATA-FACT_UNIT_DENOM = '1'.
        ITEM_DATA-MATERIAL        = GT_BHXX-MATNR.
        READ TABLE IT_ZTPP316 INTO DATA(WA_ZTPP316) WITH KEY ZBH = GT_BHXX-ZBH BINARY SEARCH.
        ITEM_DATA-BATCH           = WA_ZTPP316-CHARG.
        ITEM_DATA-HIERARITEM      = GT_BHXX-POSNR.
        ITEM_DATA-USEHIERITM      = '1'.
        ITEM_DATA-DLV_QTY         = GT_BHXX-KWMENG.
        ITEM_CONTROL-CHG_DELQTY   = 'X'.
        ITEM_CONTROL-DELIV_NUMB   = DELIVERY.
        ITEM_CONTROL-DELIV_ITEM   = POSNR_CF.
        APPEND:ITEM_DATA,ITEM_CONTROL.
      ENDLOOP.

      LOOP AT INTAB2 WHERE ID = WA_FHCK-FHDH.
        CLEAR:STR1,STR2,STR3,PLNUM,PLNUMH,PLNUMHH.
        SPLIT INTAB2-OUTBOUNDDETAILID AT '/' INTO STR1 STR2 STR3 .
        PERFORM ADDZERO(ZPUBFORM) CHANGING STR3.
        PLNUM   = '000' && STR3(7)  .
        PLNUMH  = '00'  && STR3+7(3) && '0' .
        PLNUMHH = PLNUMH.
        CLEAR GT_ZTSD206.
        READ TABLE IT_316 INTO DATA(WA_316) WITH KEY ZBH = INTAB2-PKGNO PLNUM = PLNUM PLNUMHH = PLNUMHH BINARY SEARCH.
        IF SY-SUBRC = 0.
          MOVE-CORRESPONDING WA_316 TO GT_ZTSD206.
          GT_ZTSD206-VBELN = DELIVERY.
          READ TABLE ITEM_DATA WITH KEY BATCH = WA_316-CHARG.
          GT_ZTSD206-POSNR = ITEM_DATA-DELIV_ITEM.
          GT_ZTSD206-ZTYPE   = ''.
          GT_ZTSD206-ZSHUL   = INTAB2-QTY.
          GT_ZTSD206-ZZK     = INTAB2-BLOCKS.
          APPEND GT_ZTSD206.
        ELSE.
          READ TABLE IT_ZTPP316 INTO DATA(WA_ZTPP316A) WITH KEY ZBH = INTAB2-PKGNO BINARY SEARCH.
          IF SY-SUBRC = 0 AND INTAB2-PKGNO(4) = 'DHTZ'.
            MOVE-CORRESPONDING WA_316 TO GT_ZTSD206.
            GT_ZTSD206-VBELN = DELIVERY.
            READ TABLE ITEM_DATA WITH KEY BATCH = WA_316-CHARG.
            GT_ZTSD206-POSNR = ITEM_DATA-DELIV_ITEM.
            GT_ZTSD206-ZTYPE   = ''.
            GT_ZTSD206-ZSHUL   = INTAB2-QTY.
            GT_ZTSD206-ZZK     = INTAB2-BLOCKS.
            APPEND GT_ZTSD206.
          ENDIF.
        ENDIF.
      ENDLOOP.

    ELSEIF WA_VBAP-ZZBH = 'Y'.
      CLEAR:ITEM_DATA,ITEM_CONTROL.
*修改当前行项目交货数量改为0
      ITEM_DATA-DELIV_NUMB      = DELIVERY.
      ITEM_DATA-DELIV_ITEM      = WA_FHCK-CKDH.
      ITEM_DATA-FACT_UNIT_NOM   = '1'.
      ITEM_DATA-FACT_UNIT_DENOM = '1'.
*    ITEM_DATA-MATERIAL        = INTAB2-MATNR.
      ITEM_DATA-DLV_QTY         = 0.
      ITEM_CONTROL-CHG_DELQTY   = 'X'.
      ITEM_CONTROL-DELIV_NUMB   = DELIVERY.
      ITEM_CONTROL-DELIV_ITEM   = WA_FHCK-CKDH.
      APPEND:ITEM_DATA,ITEM_CONTROL.
      READ TABLE GT_ZZBH WITH KEY POSNR = WA_FHCK-FHDH BINARY SEARCH.
      IF SY-SUBRC = 0.
        LOOP AT GT_ZZBH FROM SY-TABIX.
          MENGE = GT_ZZBH-KWMENG.
          IF GT_ZZBH-POSNR NE WA_FHCK-FHDH.
            EXIT.
          ENDIF.
          READ TABLE GT_MSPR WITH KEY ZZBH = GT_ZZBH-ZZBH BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            LOOP AT GT_MSPR FROM SY-TABIX.
              IF GT_MSPR-ZZBH NE GT_ZZBH-ZZBH.
                EXIT.
              ENDIF.
              IF MENGE = 0.
                EXIT.
              ENDIF.
              POSNR_CF = POSNR_CF + 1 .
              CLEAR:ITEM_DATA,ITEM_CONTROL.
              ITEM_DATA-DELIV_NUMB      = DELIVERY.
              ITEM_DATA-DELIV_ITEM      = POSNR_CF.
              ITEM_DATA-FACT_UNIT_NOM   = '1'.
              ITEM_DATA-FACT_UNIT_DENOM = '1'.
              ITEM_DATA-MATERIAL        = GT_MSPR-MATNR.
              ITEM_DATA-BATCH           = GT_MSPR-CHARG.
              ITEM_DATA-HIERARITEM      = WA_FHCK-FHDH.
              ITEM_DATA-USEHIERITM      = '1'.
              IF MENGE >= GT_MSPR-PRLAB.
                MENGE = MENGE - GT_MSPR-PRLAB.
                ITEM_DATA-DLV_QTY         = GT_MSPR-PRLAB.
              ELSE.
                ITEM_DATA-DLV_QTY         = MENGE.
                MENGE = 0.
              ENDIF.
              ITEM_CONTROL-CHG_DELQTY   = 'X'.
              ITEM_CONTROL-DELIV_NUMB   = DELIVERY.
              ITEM_CONTROL-DELIV_ITEM   = POSNR_CF.
              APPEND:ITEM_DATA,ITEM_CONTROL.
            ENDLOOP.
          ENDIF.
        ENDLOOP.
      ENDIF.

    ELSEIF WA_VBAP-ZZBH <> 'Y' AND WA_VBAP-ZBAOH <> 'Y' .
      IF WA_VBAP-XCHPF = 'X'.
        UPDATE LIPS SET ZWMSGZCF = 'X' WHERE VBELN = WA_FHCK-CKD AND POSNR = WA_FHCK-CKDH.
        COMMIT WORK.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF ITEM_DATA[] IS NOT INITIAL AND ITEM_CONTROL[] IS NOT  INITIAL.
    SET UPDATE TASK LOCAL.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE' DESTINATION 'NONE'
      EXPORTING
        HEADER_DATA           = HEADER_DATA
        HEADER_CONTROL        = HEADER_CONTROL
        DELIVERY              = DELIVERY
        TECHN_CONTROL         = TECHN_CONTROL
      TABLES
        ITEM_DATA             = ITEM_DATA
        ITEM_CONTROL          = ITEM_CONTROL
        RETURN                = RETURN
        ITEM_DATA_SPL         = ITEM_DATA_SPL
      EXCEPTIONS
        SYSTEM_FAILURE        = 1 MESSAGE RTMSG
        COMMUNICATION_FAILURE = 2 MESSAGE RTMSG
        ERROR_MESSAGE         = 3
        OTHERS                = 4.
    IF SY-SUBRC NE 0.
      IF RTMSG IS INITIAL.
        PERFORM MSGTOTEXT(ZPUBFORM) USING '' '' '' '' '' '' CHANGING RTMSG.
      ENDIF.
      RETURNERROR 'E:FAIL!' .
    ENDIF.

    LOOP AT RETURN WHERE TYPE CA 'AEX'.
      IF RETURN-MESSAGE IS INITIAL.
        PERFORM MSGTOTEXT(ZPUBFORM) USING RETURN-ID
                                          RETURN-NUMBER
                                          RETURN-MESSAGE_V1
                                          RETURN-MESSAGE_V2
                                          RETURN-MESSAGE_V3
                                          RETURN-MESSAGE_V4
                                   CHANGING RETURN-MESSAGE.
      ENDIF.
      CONCATENATE RETURN-MESSAGE RTMSG INTO RTMSG SEPARATED BY '/'.
      CLEAR RETURN.
    ENDLOOP.
    IF SY-SUBRC = 0.
      RETURNERROR 'E:FAIL!' .
    ELSE.
      SET UPDATE TASK LOCAL.
      PERFORM BAPIRUN(ZPUBFORM) USING 'X'.
      IF GT_ZTSD206[] IS NOT INITIAL.
        MODIFY ZTSD206 FROM TABLE GT_ZTSD206.
        COMMIT WORK.
        "包号 存储到LIKP~ZBAOH
        LOOP AT IT_FHCK INTO DATA(WA_FHCK1).
          READ TABLE INTAB2 WITH KEY ID = WA_FHCK-CKDH .
          IF SY-SUBRC = 0.
            UPDATE LIPS SET ZBAOH = INTAB2-PKGNO WHERE VBELN = WA_FHCK1-CKD AND POSNR = WA_FHCK1-CKDH.
          ENDIF.
        ENDLOOP.
        COMMIT WORK.
      ENDIF.
    ENDIF.

  ENDIF.

*  SET UPDATE TASK LOCAL.
*  PERFORM VBELVPOST(ZPUBFORM) USING DELIVERY 'VL02N' SY-DATUM  CHANGING RTMSG.

  IF RTMSG+0(1) NE 'E'.
    RTYPE = 'S'.
    IF RTMSG IS INITIAL.
      RTMSG = 'SUCCESS'.
    ENDIF.
  ELSE.
    RTYPE = 'E'.
    ZFMDATASAVE2 'R'.
    RETURN.
  ENDIF.



  WMSNO       = INTAB1-WMSNO.
  ERPBILLCODE = DELIVERY.
  STATUS      = 'SUCCESS'.
  WAREHOUSE   = INTAB1-WAREHOUSE.

  CALL FUNCTION 'ZFM_GP_SD_WMS_CKDTB_POST' IN BACKGROUND TASK
    EXPORTING
      WMSNO       = WMSNO
      ERPBILLCODE = ERPBILLCODE
      STATUS      = STATUS
      WAREHOUSE   = WAREHOUSE
*   IMPORTING
*     P_INPUT     =
*     P_OUTPUT    =
*     P_STATUS    =
*     RTYPE       =
*     RTMSG       =
    EXCEPTIONS
      OTHERS      = 1.

  COMMIT WORK.

  ZFMDATASAVE2 'R'.

ENDFUNCTION.
