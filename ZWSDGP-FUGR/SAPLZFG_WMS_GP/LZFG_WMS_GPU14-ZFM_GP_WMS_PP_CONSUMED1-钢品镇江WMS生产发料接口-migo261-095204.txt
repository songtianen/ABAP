FUNCTION ZFM_GP_WMS_PP_CONSUMED1.
*"----------------------------------------------------------------------
*"*"本地接口：
*"  EXPORTING
*"     VALUE(FLAG) TYPE  BAPI_MTYPE
*"     VALUE(MESSAGE) TYPE  BAPI_MSG
*"     VALUE(RTYPE) TYPE  BAPI_MTYPE
*"     VALUE(RTMSG) TYPE  BAPI_MSG
*"  TABLES
*"      IN_TAB STRUCTURE  ZSPP_230
*"----------------------------------------------------------------------
  ZFMDATASAVE1 'ZFM_GPBX_MES_PP_CONSUMED1'.
  ZFMDATASAVE2 'B'.
  COMMIT WORK.
  DATA: LS_HEADER           TYPE BAPI2017_GM_HEAD_01,
        LS_CODE             TYPE BAPI2017_GM_CODE,
        LT_ITEM             TYPE STANDARD TABLE OF BAPI2017_GM_ITEM_CREATE,
        LS_ITEM             TYPE BAPI2017_GM_ITEM_CREATE,
        LT_RETURN           TYPE STANDARD TABLE OF BAPIRET2,
        LS_RETURN           TYPE BAPIRET2,
        LV_MATERIALDOCUMENT TYPE BAPI2017_GM_HEAD_RET-MAT_DOC,
        LV_MATDOCUMENTYEAR  TYPE BAPI2017_GM_HEAD_RET-DOC_YEAR,
        IT_ZZBH             TYPE TABLE OF ZSPP_006 WITH HEADER LINE,
        IT_ZSMM206          TYPE TABLE OF ZSMM206 WITH HEADER LINE.
  DATA:MSG3 TYPE STRING.
  DATA:MENGE TYPE VBAP-KWMENG.
  DATA: AUFNR TYPE AUFNR.
  DATA:ID TYPE I VALUE 0.
  DATA:CHARG TYPE CHARG_D.
  IF IN_TAB[] IS INITIAL.
    FILL_MSGBX 'E' '投料明细不能为空.'.
  ENDIF.
  "库存地点和工厂映射
  SELECT * INTO TABLE @DATA(LT_ZSAP2WMS) FROM  ZSAP2WMS.

  CLEAR MSG3.
  LOOP AT IN_TAB.
    IF IN_TAB-WERKS IS INITIAL.
      READ TABLE LT_ZSAP2WMS INTO DATA(LW_ZSAP2WMS) WITH KEY ZLGORT = IN_TAB-WMSNO+0(3).
      IF SY-SUBRC EQ 0.
        IN_TAB-WERKS = LW_ZSAP2WMS-WERKS.
        IN_TAB-WMSNO = LW_ZSAP2WMS-LGORT.
      ELSE.
        MSG3 = '工厂' && IN_TAB-WERKS && '库存地' && IN_TAB-WMSNO && '没有映射关系'.
        FILL_MSGBX 'E' MSG3 .
      ENDIF.
    ELSE.
      READ TABLE LT_ZSAP2WMS INTO LW_ZSAP2WMS WITH KEY ERPJG = IN_TAB-WERKS ZLGORT = IN_TAB-WMSNO+0(3).
      IF SY-SUBRC EQ 0.
        IN_TAB-WERKS = LW_ZSAP2WMS-WERKS.
        IN_TAB-WMSNO = LW_ZSAP2WMS-LGORT.
      ELSE.
        MSG3 = '工厂' && IN_TAB-WERKS && '库存地' && IN_TAB-WMSNO && '没有映射关系'.
        FILL_MSGBX 'E' MSG3 .
      ENDIF.
    ENDIF.
    "订单编号 去6位日期
    IN_TAB-CORRELATIONNO = IN_TAB-CORRELATIONNO+0(2)  && IN_TAB-CORRELATIONNO+8(10) .
    MODIFY IN_TAB.
  ENDLOOP.
  IF MSG3 IS NOT INITIAL.
    FILL_MSGBX 'E' MSG3 .
  ENDIF.
  READ TABLE IN_TAB INDEX 1.
  AUFNR = |{ IN_TAB-CORRELATIONNO ALPHA = IN }|.
  SELECT COUNT( * ) FROM AFKO WHERE AUFNR = AUFNR.
  IF SY-SUBRC NE 0.
    DATA(MSG) = 'SAP查无工单:' && AUFNR.
    FILL_MSGBX 'E' MSG .
  ENDIF.

  SELECT
    MARC~MATNR,
    MARC~WERKS,
    MARC~SBDKZ,
    MARC~XCHPF
    INTO TABLE @DATA(IT_MARC)
    FROM MARC
    FOR ALL ENTRIES IN @IN_TAB
    WHERE MATNR = @IN_TAB-PRODUCTCODE
      AND WERKS = @IN_TAB-WERKS.
  SORT IT_MARC BY  MATNR WERKS.

  SELECT
       MCHA~MATNR,
       MCHA~WERKS,
       MCHA~CHARG,
       MCHB~LGORT,
       MCHA~LWEDT,
       MCHB~CLABS,
       MCHB~CLABS AS ZCLABS
      INTO TABLE @DATA(IT_MCHB)
      FROM MCHB
      INNER JOIN MCHA ON MCHA~MATNR = MCHB~MATNR AND MCHA~WERKS = MCHB~WERKS AND MCHA~CHARG = MCHB~CHARG
      FOR ALL ENTRIES IN @IN_TAB
      WHERE MCHB~MATNR = @IN_TAB-PRODUCTCODE
      AND   MCHB~LGORT = @IN_TAB-WMSNO
      AND   MCHB~WERKS = @IN_TAB-WERKS
      AND   MCHB~CLABS GT 0.
  SORT IT_MCHB BY MATNR WERKS LGORT LWEDT CHARG.


  "抬头数据
  LS_HEADER-PSTNG_DATE = SY-DATUM.
  LS_HEADER-DOC_DATE   = SY-DATUM.
  LS_HEADER-PR_UNAME   = SY-UNAME.
  LS_HEADER-HEADER_TXT = '镇江WMS'.
  "分配事务代码--过账码
  LS_CODE-GM_CODE = '05'.



  "ITEM
  REFRESH:LT_ITEM,LT_RETURN.
  LOOP AT IN_TAB.
    READ TABLE IT_MARC INTO DATA(WA_MARC) WITH KEY MATNR = IN_TAB-PRODUCTCODE WERKS = IN_TAB-WERKS BINARY SEARCH.

    IF IN_TAB-ZZBH IS NOT INITIAL.
      CLEAR LS_ITEM.
      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          INPUT  = IN_TAB-PRODUCTCODE
        IMPORTING
          OUTPUT = LS_ITEM-MATERIAL.
      "根据传过来的自编号找到批次号
      IT_ZZBH-ZJH = IN_TAB-ZZBH.
      APPEND IT_ZZBH.
      IF IT_ZZBH[] IS NOT INITIAL.
        CALL FUNCTION 'ZFM_CHECKUSE_BYJH'
          EXPORTING
            ATNAM  = 'Z01'
          TABLES
            INTAB  = IT_ZZBH
            OUTTAB = IT_ZSMM206.
        DELETE IT_ZSMM206 WHERE CLABS IS INITIAL.
        SORT IT_ZSMM206 BY Z01.
      ENDIF.

      READ TABLE IT_ZSMM206 INDEX 1.
      IF SY-SUBRC = 0.
        CHARG = IT_ZSMM206-CHARG.
      ENDIF.

      LS_ITEM-PLANT    = IN_TAB-WERKS.                 "工厂
      LS_ITEM-STGE_LOC = IN_TAB-WMSNO.              "库存地点
      LS_ITEM-MOVE_TYPE = '261'.                    "移动类型（库存管理）
      LS_ITEM-ORDERID =   AUFNR.             "工单

      IF WA_MARC-SBDKZ = '1'.
        SELECT SINGLE
          PRPS~POSID
          INTO @DATA(POSID)
          FROM MSPR
          INNER JOIN PRPS ON PRPS~PSPNR = MSPR~PSPNR
          WHERE MSPR~MATNR = @LS_ITEM-MATERIAL
           AND  MSPR~LGORT = @IN_TAB-WMSNO
           AND  MSPR~WERKS = @IN_TAB-WERKS
           AND  MSPR~CHARG = @CHARG
              .
        LS_ITEM-VAL_WBS_ELEM = POSID.
        LS_ITEM-SPEC_STOCK = 'Q'.
      ENDIF.

      LS_ITEM-ENTRY_QNT = IN_TAB-JSQTY.           "发料数量
      LS_ITEM-ENTRY_UOM = IN_TAB-UNIT.             "计量单位
      IF WA_MARC-XCHPF = 'X'.
        LS_ITEM-BATCH = CHARG.
      ENDIF.
      APPEND LS_ITEM TO LT_ITEM.
      CLEAR IT_ZSMM206[].
      CLEAR IT_ZZBH[].
    ELSEIF IN_TAB-ZBAOH IS NOT INITIAL .
      CLEAR LS_ITEM.
      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          INPUT  = IN_TAB-PRODUCTCODE
        IMPORTING
          OUTPUT = LS_ITEM-MATERIAL.
      SELECT SINGLE
         MATNR,
         WERKS,
         CHARG
        INTO ( @DATA(MATNR) , @DATA(WERKS) , @CHARG )
        FROM ZTPP316
        WHERE ZTPP316~ZBH = @IN_TAB-ZBAOH
         .
      IF WA_MARC-SBDKZ = '1'.
        SELECT SINGLE
           PRPS~POSID
          INTO @POSID
          FROM MSPR
          INNER JOIN PRPS ON PRPS~PSPNR = MSPR~PSPNR
          WHERE MSPR~MATNR = @MATNR
           AND  MSPR~WERKS = @WERKS
           AND  MSPR~CHARG = @CHARG
              .
        LS_ITEM-VAL_WBS_ELEM = POSID.
        LS_ITEM-SPEC_STOCK = 'Q'.
      ELSE.


      ENDIF.

      LS_ITEM-PLANT    = IN_TAB-WERKS.                 "工厂
      LS_ITEM-STGE_LOC = IN_TAB-WMSNO.              "库存地点
      LS_ITEM-MOVE_TYPE = '261'.                    "移动类型（库存管理）
      LS_ITEM-ORDERID =   AUFNR.             "工单
      LS_ITEM-VAL_WBS_ELEM = POSID.
      LS_ITEM-SPEC_STOCK = 'Q'.
      LS_ITEM-ENTRY_QNT = IN_TAB-JSQTY.           "发料数量
      LS_ITEM-ENTRY_UOM = IN_TAB-UNIT.             "计量单位
      IF WA_MARC-XCHPF = 'X'.
        LS_ITEM-BATCH = CHARG.
      ENDIF.
      APPEND LS_ITEM TO LT_ITEM.

    ELSE.
      CLEAR LS_ITEM.
      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
        EXPORTING
          INPUT  = IN_TAB-PRODUCTCODE
        IMPORTING
          OUTPUT = LS_ITEM-MATERIAL.

      LS_ITEM-PLANT    = IN_TAB-WERKS.                 "工厂
      LS_ITEM-STGE_LOC = IN_TAB-WMSNO.              "库存地点
      LS_ITEM-MOVE_TYPE = '261'.                    "移动类型（库存管理）
      LS_ITEM-ORDERID =   AUFNR.             "工单

      IF WA_MARC-XCHPF = 'X'.
        MENGE = IN_TAB-JSQTY.
        READ TABLE IT_MCHB INTO DATA(WA_MCHB1) WITH KEY MATNR = IN_TAB-PRODUCTCODE  LGORT = IN_TAB-WMSNO WERKS = IN_TAB-WERKS BINARY SEARCH.
        IF SY-SUBRC = 0.
          LOOP AT IT_MCHB INTO DATA(WA_MCHB) FROM SY-TABIX.
            IF WA_MCHB-MATNR NE IN_TAB-PRODUCTCODE OR WA_MCHB-LGORT NE IN_TAB-WMSNO OR WA_MCHB-WERKS NE IN_TAB-WERKS.
              EXIT.
            ENDIF.
            IF MENGE = 0.
              EXIT.
            ENDIF.
            IF MENGE >= WA_MCHB-CLABS.
              MENGE = MENGE - WA_MCHB-CLABS.
              LS_ITEM-ENTRY_QNT         = WA_MCHB-CLABS.
              LS_ITEM-BATCH             = WA_MCHB-CHARG.
              APPEND LS_ITEM TO LT_ITEM.
              WA_MCHB-CLABS = 0.
            ELSE.
              LS_ITEM-ENTRY_QNT         = MENGE.
              LS_ITEM-BATCH             = WA_MCHB-CHARG.
              APPEND LS_ITEM TO LT_ITEM.
              WA_MCHB-CLABS = WA_MCHB-CLABS - MENGE.
              MENGE = 0.
            ENDIF.
            MODIFY IT_MCHB FROM WA_MCHB.
          ENDLOOP.
        ENDIF.
        IF MENGE > 0.
          DATA(MSG2) = 'SAP物料:' && IN_TAB-PRODUCTCODE && '库存不足!'.
          FILL_MSGBX 'E' MSG2 .
        ENDIF.
      ELSE.
        LS_ITEM-ENTRY_QNT = IN_TAB-JSQTY.           "发料数量

        APPEND LS_ITEM TO LT_ITEM.
        "append放在loop中当多个批次时，append多条
      ENDIF.


    ENDIF.
  ENDLOOP.

  "BAPI
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      GOODSMVT_HEADER  = LS_HEADER
      GOODSMVT_CODE    = LS_CODE
    IMPORTING
      MATERIALDOCUMENT = LV_MATERIALDOCUMENT
      MATDOCUMENTYEAR  = LV_MATDOCUMENTYEAR
    TABLES
      GOODSMVT_ITEM    = LT_ITEM
      RETURN           = LT_RETURN.

  IF ( LINE_EXISTS( LT_RETURN[ TYPE = 'A' ] ) ) OR ( LINE_EXISTS( LT_RETURN[ TYPE = 'E' ] ) ) OR ( LINE_EXISTS( LT_RETURN[ TYPE = 'X' ] ) ).
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

    DATA: LT_MSG_TAB TYPE ESP1_MESSAGE_TAB_TYPE,
          WA_MSG_TAB LIKE LINE OF LT_MSG_TAB.
    DATA:MSG1 TYPE BAPI_MSG.
    CLEAR MSG1.
    LOOP AT LT_RETURN INTO LS_RETURN WHERE TYPE CA 'AEX'.
      CONCATENATE '错误：' LS_RETURN-MESSAGE INTO MSG1.
    ENDLOOP.
    FILL_MSGBX 'E' MSG1 .
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        WAIT = 'X'.
    DATA(CC) = |261生产投料成功,凭证号:{ LV_MATERIALDOCUMENT }|.
    FILL_MSGBX 'S' CC .
  ENDIF.


  ZFMDATASAVE2 'R'.
ENDFUNCTION.
