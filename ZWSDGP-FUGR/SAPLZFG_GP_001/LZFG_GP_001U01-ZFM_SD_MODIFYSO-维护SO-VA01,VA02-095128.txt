FUNCTION ZFM_SD_MODIFYSO.
*"----------------------------------------------------------------------
*"*"本地接口：
*"  IMPORTING
*"     REFERENCE(UPDKZ) TYPE  UPDKZ_D OPTIONAL
*"     REFERENCE(AUART) TYPE  AUART OPTIONAL
*"     REFERENCE(VKORG) TYPE  VKORG OPTIONAL
*"     REFERENCE(VTWEG) TYPE  VTWEG OPTIONAL
*"     REFERENCE(SPART) TYPE  SPART OPTIONAL
*"     REFERENCE(KUNAG) TYPE  KUNAG OPTIONAL
*"     REFERENCE(KUNWE) TYPE  KUNWE OPTIONAL
*"     REFERENCE(VKBUR) TYPE  VKBUR OPTIONAL
*"     REFERENCE(VKGRP) TYPE  VKGRP OPTIONAL
*"     REFERENCE(PRSDT) TYPE  PRSDT OPTIONAL
*"     REFERENCE(BSTKD) TYPE  BSTKD OPTIONAL
*"     REFERENCE(GUEBG) TYPE  GUEBG OPTIONAL
*"     REFERENCE(GUEEN) TYPE  GUEEN OPTIONAL
*"     REFERENCE(WAERS) TYPE  WAERS OPTIONAL
*"     REFERENCE(KDGRP) TYPE  KDGRP OPTIONAL
*"     REFERENCE(INCO1) TYPE  INCO1 OPTIONAL
*"     REFERENCE(INCO2) TYPE  INCO2 OPTIONAL
*"     REFERENCE(ZTERM) TYPE  DZTERM OPTIONAL
*"     REFERENCE(AUGRU) TYPE  AUGRU OPTIONAL
*"     REFERENCE(VDATU) TYPE  EDATU_VBAK OPTIONAL
*"     REFERENCE(KONDA) TYPE  KONDA OPTIONAL
*"     REFERENCE(POSID) TYPE  PS_POSID OPTIONAL
*"     REFERENCE(KUNTV) TYPE  LIFNR OPTIONAL
*"     REFERENCE(HEAD_ENH) TYPE  ZSSD_ENH_VBAK OPTIONAL
*"  EXPORTING
*"     REFERENCE(RTYPE) TYPE  BAPI_MTYPE
*"     REFERENCE(RTMSG) TYPE  BAPI_MSG
*"  TABLES
*"      RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"      TEXT STRUCTURE  BAPISDTEXT OPTIONAL
*"      CONDITION STRUCTURE  ZSSD211B OPTIONAL
*"  CHANGING
*"     REFERENCE(VBELN) TYPE  VBELN OPTIONAL
*"     REFERENCE(ITEM) TYPE  ZSSD211D OPTIONAL
*"----------------------------------------------------------------------
  DATA :SALES_HEADER_IN      TYPE BAPISDHD1,
        SALES_HEADER_INX     TYPE BAPISDHD1X,
        ORDER_HEADER_IN      TYPE BAPISDH1,
        ORDER_HEADER_INX     TYPE BAPISDH1X,
        SALESDOCUMENT_EX     TYPE BAPIVBELN-VBELN,
        SALES_ITEMS_IN       TYPE TABLE OF BAPISDITM WITH HEADER LINE,
        SALES_ITEMS_INX      TYPE TABLE OF BAPISDITMX WITH HEADER LINE,
        SALES_SCHEDULES_IN   TYPE TABLE OF BAPISCHDL WITH HEADER LINE,
        SALES_SCHEDULES_INX  TYPE TABLE OF BAPISCHDLX WITH HEADER LINE,
        SALES_CONDITIONS_IN  TYPE TABLE OF BAPICOND WITH HEADER LINE,
        SALES_CONDITIONS_INX TYPE TABLE OF BAPICONDX WITH HEADER LINE,
        SALES_PARTNERS       TYPE STANDARD TABLE OF BAPIPARNR WITH HEADER LINE,
        PARTNERCHANGES       TYPE STANDARD TABLE OF BAPIPARNRC WITH HEADER LINE,
        EXTENSIONIN          TYPE TABLE OF BAPIPAREX WITH HEADER LINE,
        WA_EXTK              TYPE BAPE_VBAK,
        WA_EXTKX             TYPE BAPE_VBAKX,
        WA_EXTP              TYPE BAPE_VBAP,
        WA_EXTPX             TYPE BAPE_VBAPX,
        SALES_TEXT           TYPE TABLE OF BAPISDTEXT WITH HEADER LINE,
        E_BUSINESS_OBJECT    TYPE NAST-OBJTYPE,
        BUSINESS_OBJECT      TYPE BAPIUSW01-OBJTYPE.
  DATA:T_POSNR TYPE TABLE OF POSNR_LINE WITH HEADER LINE.
  DATA:WA_ITEM  TYPE ZSSD211,
       WA_TEXT  TYPE BAPISDTEXT,
       WA_COND  TYPE ZSSD211B,
       SUBRC    TYPE SY-SUBRC,
       POSNR    TYPE POSNR,
       MSG      TYPE BAPI_MSG,
       ZDMSTR   TYPE STRING,
       IT_ITEM  TYPE TABLE OF ZSSD211 WITH HEADER LINE,
       IT_VBAP  TYPE TABLE OF VBAP WITH HEADER LINE,
       IT_VBPA  TYPE TABLE OF VBPA WITH HEADER LINE,
       IT_POSNR TYPE TABLE OF LIPS_KEY WITH HEADER LINE.
  FIELD-SYMBOLS:<FS> TYPE ANY.
  CONSTANTS:PARVW TYPE VBPA-PARVW VALUE 'TV'.

  CLEAR:SALES_HEADER_IN,SALES_HEADER_INX,SALESDOCUMENT_EX,SALES_ITEMS_IN[],
  SALES_ITEMS_INX[],SALES_SCHEDULES_IN[],SALES_SCHEDULES_INX[],
  SALES_CONDITIONS_IN[],SALES_CONDITIONS_INX[],SALES_PARTNERS[],
  EXTENSIONIN[],POSNR,RTMSG,RTYPE,RETURN[],IT_POSNR[],ORDER_HEADER_IN,ORDER_HEADER_INX,
  *VBAK,VBAK,PARTNERCHANGES[].
  PERFORM ADDZERO(ZPUBFORM) CHANGING VBELN.

  SELECT SINGLE *
    FROM VBAK
    WHERE VBELN = VBELN.
  SELECT *
    INTO TABLE IT_VBAP
    FROM VBAP
    WHERE VBELN = VBAK-VBELN.
  SELECT *
    INTO TABLE IT_VBPA
    FROM VBPA
    WHERE VBELN = VBAK-VBELN.

*抬头
  SALES_HEADER_IN-DOC_TYPE = AUART.
  SALES_HEADER_IN-SALES_ORG = VKORG."
  SALES_HEADER_IN-DISTR_CHAN = VTWEG."
  SALES_HEADER_IN-DIVISION = SPART."
  SALES_HEADER_IN-SALES_OFF = VKBUR."
  SALES_HEADER_IN-SALES_GRP = VKGRP."
  SALES_HEADER_IN-PRICE_DATE = PRSDT."
  SALES_HEADER_IN-PRICE_GRP = KONDA."
  SALES_HEADER_IN-PURCH_NO_C = BSTKD."
  SALES_HEADER_IN-CT_VALID_F = GUEBG."
  SALES_HEADER_IN-CT_VALID_T = GUEEN."
  SALES_HEADER_IN-CURRENCY = WAERS."
  SALES_HEADER_IN-CUST_GROUP = KDGRP."
  SALES_HEADER_IN-INCOTERMS1 = INCO1."
  SALES_HEADER_IN-INCOTERMS2 = INCO2."
  SALES_HEADER_IN-PMNTTRMS = ZTERM."
  SALES_HEADER_IN-ORD_REASON = AUGRU."
  SALES_HEADER_IN-REQ_DATE_H = VDATU."
  SALES_HEADER_IN-WBS_ELEM = POSID."
  PERFORM SETBAPIX(ZPUBFORM) USING SALES_HEADER_IN CHANGING SALES_HEADER_INX.
*合作伙伴处理
  CLEAR:SALES_PARTNERS.
  SALES_PARTNERS-PARTN_ROLE = 'AG'.
  SALES_PARTNERS-PARTN_NUMB = KUNAG.
  PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_PARTNERS-PARTN_NUMB.
  APPEND SALES_PARTNERS.
  CLEAR:SALES_PARTNERS.
  SALES_PARTNERS-PARTN_ROLE = 'WE'. "送达方
  SALES_PARTNERS-PARTN_NUMB = KUNWE.
  IF KUNWE IS INITIAL.
    SALES_PARTNERS-PARTN_NUMB = KUNAG.
  ENDIF.
  PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_PARTNERS-PARTN_NUMB.
  APPEND SALES_PARTNERS.
  IF KUNTV IS NOT INITIAL.
    CLEAR:SALES_PARTNERS.
    SALES_PARTNERS-PARTN_ROLE = PARVW. "
    SALES_PARTNERS-PARTN_NUMB = KUNTV.
    PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_PARTNERS-PARTN_NUMB.
    APPEND SALES_PARTNERS.
*合作伙伴的修改
    READ TABLE IT_VBPA WITH KEY PARVW = PARVW.
    IF SY-SUBRC EQ 0.
      IF IT_VBPA-LIFNR NE KUNTV.
        CLEAR:PARTNERCHANGES.
        PARTNERCHANGES-DOCUMENT = VBAK-VBELN.
        PARTNERCHANGES-UPDATEFLAG = 'D'.
        PARTNERCHANGES-PARTN_ROLE = PARVW.
        PARTNERCHANGES-P_NUMB_OLD = IT_VBPA-LIFNR.
        APPEND PARTNERCHANGES.
        CLEAR:PARTNERCHANGES.
        PARTNERCHANGES-DOCUMENT = VBAK-VBELN.
        PARTNERCHANGES-UPDATEFLAG = 'I'.
        PARTNERCHANGES-PARTN_ROLE = PARVW.
        PARTNERCHANGES-P_NUMB_NEW = KUNTV.
        APPEND PARTNERCHANGES.
      ENDIF.
    ELSE.
      CLEAR:PARTNERCHANGES.
      PARTNERCHANGES-DOCUMENT = VBAK-VBELN.
      PARTNERCHANGES-UPDATEFLAG = 'I'.
      PARTNERCHANGES-PARTN_ROLE = PARVW.
      PARTNERCHANGES-P_NUMB_NEW = KUNTV.
      APPEND PARTNERCHANGES.
    ENDIF.
  ENDIF.
  IF VBAK IS INITIAL.
    *VBAK-AUART = AUART.
    *VBAK-VTWEG = VTWEG.
    *VBAK-SPART = SPART.
    *VBAK-KUNNR = KUNAG.
    *VBAK-WAERK = WAERS.
    *VBAK-VKORG = VKORG.
  ENDIF.
*抬头价格
  LOOP AT CONDITION WHERE KSCHL IS NOT INITIAL.
    PERFORM FILLCOND USING '' CONDITION-KSCHL CONDITION-KBETR *VBAK
          CHANGING SALES_CONDITIONS_IN SALES_CONDITIONS_INX.
    APPEND:SALES_CONDITIONS_IN,SALES_CONDITIONS_INX.
  ENDLOOP.
  LOOP AT ITEM INTO WA_ITEM.
*自动扩充库存地
    CLEAR:MARD.
    MARD-WERKS = WA_ITEM-WERKS.
    MARD-LGORT = WA_ITEM-LGORT.
    MARD-MATNR = WA_ITEM-MATNR.
    PERFORM EXLGORT(ZPUBFORM) USING MARD
          CHANGING MSG.
  ENDLOOP.
*抬头文本
  SALES_TEXT[] = TEXT[].
  IF VBAK IS INITIAL.
*创建

*行项目
    LOOP AT ITEM INTO WA_ITEM .
      IF WA_ITEM-UPDKZ = 'N'.
        CONTINUE.
      ENDIF.
      CLEAR:SALES_TEXT,EXTENSIONIN,WA_EXTP,WA_EXTPX,
       SALES_ITEMS_IN,SALES_ITEMS_INX,SALES_CONDITIONS_IN,
      SALES_CONDITIONS_INX,SALES_SCHEDULES_IN.
      ADD 10 TO POSNR.
      WA_ITEM-POSNR = POSNR.
      MODIFY ITEM FROM WA_ITEM TRANSPORTING POSNR.
*行项目+计划行
      SALES_ITEMS_IN-ITM_NUMBER    = POSNR.
      SALES_ITEMS_IN-MATERIAL      = WA_ITEM-MATNR .
      PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_ITEMS_IN-MATERIAL.
      SALES_ITEMS_IN-TARGET_QTY    = WA_ITEM-KWMENG .
      SALES_ITEMS_IN-PLANT         = WA_ITEM-WERKS .
      SALES_ITEMS_IN-STORE_LOC     = WA_ITEM-LGORT .
      SALES_ITEMS_IN-BATCH         = WA_ITEM-CHARG .
      SALES_ITEMS_IN-ITEM_CATEG    = WA_ITEM-PSTYV .
      SALES_ITEMS_IN-SHIP_POINT    = WA_ITEM-VSTEL .
      SALES_ITEMS_IN-SALES_UNIT    = WA_ITEM-VRKME .
      SALES_ITEMS_IN-PRC_GROUP2    = WA_ITEM-MVGR2 .
      PERFORM TRANSUNIT_TO_INSIDE(ZPUBFORM) CHANGING SALES_ITEMS_IN-SALES_UNIT.
      SALES_ITEMS_IN-SHORT_TEXT    = WA_ITEM-ARKTX .
      SALES_ITEMS_IN-CUST_MAT35    = WA_ITEM-KDMAT .
      SALES_ITEMS_IN-WBS_ELEM    = WA_ITEM-POSID .
      SALES_ITEMS_IN-REASON_REJ    = WA_ITEM-ABGRU .
      SALES_ITEMS_IN-REF_DOC    = WA_ITEM-VGBEL .
      SALES_ITEMS_IN-REF_DOC_IT    = WA_ITEM-VGPOS .
*      SALES_ITEMS_IN-HG_LV_ITEM    = WA_ITEM-UEPOS .“因板含辅材单独发货进行注释―20221229
      SELECT SINGLE VBTYP
        INTO SALES_ITEMS_IN-REF_DOC_CA
        FROM VBAK
        WHERE VBELN = WA_ITEM-VGBEL .
      SALES_ITEMS_IN-ORDERID    = WA_ITEM-AUFNR .
      PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_ITEMS_IN-ORDERID.

      SALES_SCHEDULES_IN-ITM_NUMBER = SALES_ITEMS_IN-ITM_NUMBER.
      SALES_SCHEDULES_IN-SCHED_LINE = 1.
      SALES_SCHEDULES_IN-REQ_DATE   = WA_ITEM-EINDT.
      SALES_SCHEDULES_IN-REQ_QTY    = SALES_ITEMS_IN-TARGET_QTY.

      APPEND :SALES_SCHEDULES_IN,SALES_ITEMS_IN.
*价格
      LOOP AT WA_ITEM-CONDITION INTO WA_COND WHERE KSCHL IS NOT INITIAL.
        PERFORM FILLCOND USING POSNR WA_COND-KSCHL WA_COND-KBETR *VBAK
              CHANGING SALES_CONDITIONS_IN SALES_CONDITIONS_INX.
        APPEND:SALES_CONDITIONS_IN,SALES_CONDITIONS_INX.
      ENDLOOP.
*行项目文本
      LOOP AT WA_ITEM-TEXT INTO WA_TEXT.
        CLEAR: SALES_TEXT.
        SALES_TEXT = WA_TEXT.
        SALES_TEXT-ITM_NUMBER = POSNR.
        SALES_TEXT-LANGU = SY-LANGU .
        APPEND SALES_TEXT.
      ENDLOOP.
    ENDLOOP.
*根据订单类型获取业务类型
    CLEAR:E_BUSINESS_OBJECT,TVAK,BUSINESS_OBJECT,SUBRC.
    SELECT SINGLE *
      FROM TVAK
      WHERE AUART = SALES_HEADER_IN-DOC_TYPE.
    CALL FUNCTION 'SD_OBJECT_TYPE_DETERMINE'
      EXPORTING
        I_DOCUMENT_TYPE   = TVAK-VBTYP
      IMPORTING
        E_BUSINESS_OBJECT = E_BUSINESS_OBJECT.
    BUSINESS_OBJECT = E_BUSINESS_OBJECT.
    SET UPDATE TASK LOCAL.
    CALL FUNCTION 'SD_SALESDOCUMENT_CREATE'
      EXPORTING
        SALES_HEADER_IN      = SALES_HEADER_IN
        SALES_HEADER_INX     = SALES_HEADER_INX
        BUSINESS_OBJECT      = BUSINESS_OBJECT
      IMPORTING
        SALESDOCUMENT_EX     = SALESDOCUMENT_EX
      TABLES
        RETURN               = RETURN
        SALES_PARTNERS       = SALES_PARTNERS
        SALES_ITEMS_IN       = SALES_ITEMS_IN
*       SALES_ITEMS_INX      = SALES_ITEMS_INX
        SALES_SCHEDULES_IN   = SALES_SCHEDULES_IN
*       SALES_SCHEDULES_INX  = SALES_SCHEDULES_INX
        SALES_CONDITIONS_IN  = SALES_CONDITIONS_IN
        SALES_CONDITIONS_INX = SALES_CONDITIONS_INX
*       EXTENSIONIN          = EXTENSIONIN
        SALES_TEXT           = SALES_TEXT
      EXCEPTIONS
        OTHERS               = 1.
    IF SY-SUBRC NE 0.
      PERFORM MSGTOTEXT(ZPUBFORM) USING '' '' '' '' '' '' CHANGING RTMSG.
      ADD SY-SUBRC TO SUBRC.
    ENDIF.
    LOOP AT RETURN WHERE TYPE CA 'AEX'.
      CONCATENATE RETURN-MESSAGE RTMSG INTO RTMSG SEPARATED BY '/'.
    ENDLOOP.
    IF SY-SUBRC EQ 0.
      ADD 4 TO SUBRC.
    ENDIF.
    IF SUBRC = 0
      AND SALESDOCUMENT_EX IS NOT INITIAL.
      PERFORM BAPIRUN(ZPUBFORM)  USING 'S'.
      RTMSG = '成功'.
      VBELN = SALESDOCUMENT_EX.
      RTYPE = 'S'.
    ELSE.
      PERFORM BAPIRUN(ZPUBFORM) USING 'E'.
      RTYPE = 'E'.
    ENDIF.
  ELSE.
*修改-可能存在删除行、新增行、修改行
*若存在拒绝原因，先取消拒绝原因再修改
    SORT IT_VBAP BY POSNR.
    LOOP AT ITEM INTO WA_ITEM WHERE ABGRU IS INITIAL.
      IF WA_ITEM-UPDKZ = 'N'.
        CONTINUE.
      ENDIF.
      READ TABLE IT_VBAP WITH KEY POSNR = WA_ITEM-POSNR BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        IF IT_VBAP-ABGRU IS NOT INITIAL.
          CLEAR:SALES_ITEMS_IN,SALES_ITEMS_INX.
          SALES_ITEMS_IN-ITM_NUMBER = IT_VBAP-POSNR.
          SALES_ITEMS_INX-ITM_NUMBER = IT_VBAP-POSNR.
          SALES_ITEMS_IN-MATERIAL = IT_VBAP-MATNR.
          PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_ITEMS_IN-MATERIAL.
          SALES_ITEMS_INX-MATERIAL = 'X'.
          SALES_ITEMS_IN-REASON_REJ = ' '.
          SALES_ITEMS_INX-REASON_REJ = 'X'.
          SALES_ITEMS_INX-UPDATEFLAG = 'U'.
          APPEND:SALES_ITEMS_IN,SALES_ITEMS_INX.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR :RTMSG,SUBRC.
    IF SALES_ITEMS_IN[] IS NOT INITIAL.
      ORDER_HEADER_INX-UPDATEFLAG = 'U'.
      SALESDOCUMENT_EX = VBELN.
      SET UPDATE TASK LOCAL.
      CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
        EXPORTING
          SALESDOCUMENT    = SALESDOCUMENT_EX
          ORDER_HEADER_INX = ORDER_HEADER_INX
        TABLES
          RETURN           = RETURN
          ORDER_ITEM_IN    = SALES_ITEMS_IN
          ORDER_ITEM_INX   = SALES_ITEMS_INX
        EXCEPTIONS
          OTHERS           = 4.
      IF SY-SUBRC NE 0.
        PERFORM MSGTOTEXT(ZPUBFORM) USING '' '' '' '' '' '' CHANGING RTMSG.
        ADD SY-SUBRC TO SUBRC.
      ENDIF.
      LOOP AT RETURN WHERE TYPE CA 'AEX'.
        CONCATENATE RETURN-MESSAGE RTMSG INTO RTMSG SEPARATED BY '/'.
      ENDLOOP.
      IF SY-SUBRC EQ 0.
        ADD 4 TO SUBRC.
      ENDIF.
      IF SUBRC = 0.
        PERFORM BAPIRUN(ZPUBFORM)  USING 'S'.
      ELSE.
        PERFORM BAPIRUN(ZPUBFORM) USING 'E'.
        FILLMSG 'E' RTMSG 'X'.
      ENDIF.
    ENDIF.
*先删除
    IF UPDKZ = 'D'."整单删除
*删除之前先清掉行的WBS
*      CLEAR:T_POSNR[].
*      PERFORM CLEARWBS(ZRSD202) TABLES T_POSNR
*        USING VBELN ''
*         CHANGING RTMSG.
*      IF RTMSG+0(1) EQ 'E'.
*        FILLMSG 'E' RTMSG 'X'.
*      ENDIF.
      CLEAR:RTMSG,RTYPE.
      PERFORM DELVBELN(ZPUBFORM) USING VBELN 'SO' CHANGING RTMSG.
      IF RTMSG+0(1) NE 'S'.
        FILLMSG 'E' RTMSG 'X'.
      ELSE.
        FILLMSG 'S' '处理成功' 'X'.
      ENDIF.
    ELSE.
*按行处理时，先把修改和新增的加好，再删除
*修改/新增
      LOOP AT SALES_TEXT.
        SALES_TEXT-DOC_NUMBER = VBELN.
        MODIFY SALES_TEXT.
      ENDLOOP.
      CLEAR:ORDER_HEADER_INX,ORDER_HEADER_IN,RETURN[],SALES_ITEMS_IN[],
      SALES_ITEMS_INX[],SALESDOCUMENT_EX.

      SALESDOCUMENT_EX = VBAK-VBELN.
      SORT IT_VBAP BY POSNR DESCENDING.
      POSNR = IT_VBAP-POSNR.
      SORT IT_VBAP BY POSNR.
      LOOP AT ITEM INTO WA_ITEM.
        CLEAR:SALES_ITEMS_IN,SALES_ITEMS_INX,SALES_SCHEDULES_IN,SALES_SCHEDULES_INX.
        CASE WA_ITEM-UPDKZ.
          WHEN 'D' OR 'N'.
            CONTINUE.
        ENDCASE.
        READ TABLE IT_VBAP WITH KEY POSNR = WA_ITEM-POSNR BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          IF IT_VBAP-ABGRU = WA_ITEM-ABGRU
            AND IT_VBAP-ABGRU IS NOT INITIAL
            AND WA_ITEM-ABGRU IS NOT INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.
        IF WA_ITEM-UPDKZ = 'I'.
          ADD 10 TO POSNR.
          SALES_ITEMS_IN-ITM_NUMBER = POSNR.
          WA_ITEM-POSNR = POSNR.
          MODIFY ITEM FROM WA_ITEM TRANSPORTING POSNR.
        ELSE.
          SALES_ITEMS_IN-ITM_NUMBER = WA_ITEM-POSNR.
        ENDIF.
        SALES_ITEMS_IN-MATERIAL      = WA_ITEM-MATNR .
*        SALES_ITEMS_IN-HG_LV_ITEM    = WA_ITEM-UEPOS ."因板含辅材单独发货进行注释_20221229_likun
        PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_ITEMS_IN-MATERIAL.
        SALES_ITEMS_IN-TARGET_QTY    = WA_ITEM-KWMENG .
        SALES_ITEMS_IN-PLANT         = WA_ITEM-WERKS .
        SALES_ITEMS_IN-STORE_LOC     = WA_ITEM-LGORT .
        SALES_ITEMS_IN-BATCH         = WA_ITEM-CHARG .
        SALES_ITEMS_IN-ITEM_CATEG    = WA_ITEM-PSTYV .
        SALES_ITEMS_IN-SHIP_POINT    = WA_ITEM-VSTEL .
        SALES_ITEMS_IN-SALES_UNIT    = WA_ITEM-VRKME .
        SALES_ITEMS_IN-PRC_GROUP2    = WA_ITEM-MVGR2 .
        PERFORM TRANSUNIT_TO_INSIDE(ZPUBFORM) CHANGING SALES_ITEMS_IN-SALES_UNIT.
        SALES_ITEMS_IN-SHORT_TEXT    = WA_ITEM-ARKTX .
        SALES_ITEMS_IN-CUST_MAT35    = WA_ITEM-KDMAT .
        SALES_ITEMS_IN-WBS_ELEM    = WA_ITEM-POSID .
        SALES_ITEMS_IN-REASON_REJ    = WA_ITEM-ABGRU .
        SALES_ITEMS_IN-REF_DOC    = WA_ITEM-VGBEL .
        SALES_ITEMS_IN-REF_DOC_IT    = WA_ITEM-VGPOS .
        SELECT SINGLE VBTYP
          INTO SALES_ITEMS_IN-REF_DOC_CA
          FROM VBAK
          WHERE VBELN = WA_ITEM-VGBEL .
        SALES_ITEMS_IN-ORDERID    = WA_ITEM-AUFNR .
        PERFORM ADDZERO(ZPUBFORM) CHANGING SALES_ITEMS_IN-ORDERID.
        SALES_SCHEDULES_IN-ITM_NUMBER = SALES_ITEMS_IN-ITM_NUMBER.
        SALES_SCHEDULES_IN-SCHED_LINE = 1.
        SALES_SCHEDULES_IN-REQ_DATE   = WA_ITEM-EINDT.
        SALES_SCHEDULES_IN-REQ_QTY    = SALES_ITEMS_IN-TARGET_QTY.
        PERFORM SETBAPIX(ZPUBFORM) USING SALES_ITEMS_IN CHANGING SALES_ITEMS_INX.
        PERFORM SETBAPIX(ZPUBFORM) USING SALES_SCHEDULES_IN CHANGING SALES_SCHEDULES_INX.
        IF WA_ITEM-UPDKZ = 'I'.
          SALES_ITEMS_INX-UPDATEFLAG = 'I'.
          SALES_SCHEDULES_INX-UPDATEFLAG = 'I'.
        ELSE.
          SALES_ITEMS_INX-UPDATEFLAG = 'U'.
          SALES_SCHEDULES_INX-UPDATEFLAG = 'U'.
        ENDIF.
*处理行价格
        LOOP AT WA_ITEM-CONDITION INTO WA_COND WHERE KSCHL IS NOT INITIAL.
          PERFORM FILLCOND USING SALES_ITEMS_IN-ITM_NUMBER WA_COND-KSCHL WA_COND-KBETR VBAK
                CHANGING SALES_CONDITIONS_IN SALES_CONDITIONS_INX.
          IF WA_ITEM-UPDKZ = 'I'.
            SALES_CONDITIONS_INX-UPDATEFLAG = 'I'.
          ELSE.
            SALES_CONDITIONS_INX-UPDATEFLAG = 'U'.
          ENDIF.
          APPEND:SALES_CONDITIONS_IN,SALES_CONDITIONS_INX.
        ENDLOOP.
        APPEND: SALES_ITEMS_IN,SALES_ITEMS_INX,SALES_SCHEDULES_IN,SALES_SCHEDULES_INX.
      ENDLOOP.
*      IF SALES_ITEMS_IN[] IS NOT INITIAL.
      ORDER_HEADER_INX-UPDATEFLAG = 'U'.
*合作伙伴处理
      SORT IT_VBPA BY PARVW.
      LOOP AT SALES_PARTNERS.
        READ TABLE IT_VBPA WITH KEY PARVW = SALES_PARTNERS-PARTN_ROLE BINARY SEARCH.
        IF SY-SUBRC = 0.
          IF SALES_PARTNERS-PARTN_NUMB = IT_VBPA-KUNNR.
            SALES_PARTNERS-PARTN_NUMB = 'X'.
          ELSE.
          ENDIF.
        ENDIF.
        MODIFY SALES_PARTNERS TRANSPORTING  PARTN_NUMB.
        CLEAR SALES_PARTNERS.
      ENDLOOP.
      DELETE SALES_PARTNERS WHERE PARTN_NUMB = 'X'.
      CLEAR :RTMSG,SUBRC.
      DATA:VBAKENH TYPE ZSSD_ENH_VBAK,
           VBAPENH TYPE TABLE OF ZSSD264 WITH HEADER LINE.
*增强字段内存传值更新
      MOVE-CORRESPONDING HEAD_ENH TO VBAKENH.
      EXPORT I_VBAK = VBAKENH
             T_VBAP = VBAPENH[]
             TO MEMORY ID 'MEMO_ZSSDVBAK_VBAP'.
      SET UPDATE TASK LOCAL.

      CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
        EXPORTING
          SALESDOCUMENT    = SALESDOCUMENT_EX
          ORDER_HEADER_IN  = ORDER_HEADER_IN
          ORDER_HEADER_INX = ORDER_HEADER_INX
        TABLES
          RETURN           = RETURN
          ORDER_ITEM_IN    = SALES_ITEMS_IN
          ORDER_ITEM_INX   = SALES_ITEMS_INX
          PARTNERCHANGES   = PARTNERCHANGES
          SCHEDULE_LINES   = SALES_SCHEDULES_IN
          SCHEDULE_LINESX  = SALES_SCHEDULES_INX
          CONDITIONS_IN    = SALES_CONDITIONS_IN
          CONDITIONS_INX   = SALES_CONDITIONS_INX
          ORDER_TEXT       = SALES_TEXT
        EXCEPTIONS
          OTHERS           = 4.
      IF SY-SUBRC NE 0.
        PERFORM MSGTOTEXT(ZPUBFORM) USING '' '' '' '' '' '' CHANGING RTMSG.
        ADD SY-SUBRC TO SUBRC.
      ENDIF.
      LOOP AT RETURN WHERE TYPE CA 'AEX'.
        CONCATENATE RETURN-MESSAGE RTMSG INTO RTMSG SEPARATED BY '/'.
      ENDLOOP.
      IF SY-SUBRC EQ 0.
        ADD 4 TO SUBRC.
      ENDIF.
      IF SUBRC = 0.
        SET UPDATE TASK LOCAL.
        PERFORM BAPIRUN(ZPUBFORM)  USING 'S'.
        FILLMSG 'S' '成功' ''.
      ELSE.
        PERFORM BAPIRUN(ZPUBFORM) USING 'E'.
        FILLMSG 'E' RTMSG 'X'.
      ENDIF.
*      ENDIF.

*删除行
      LOOP AT ITEM INTO WA_ITEM WHERE UPDKZ = 'D'.
        CLEAR IT_POSNR.
        IT_POSNR-VBELN = VBELN.
        IT_POSNR-POSNR = WA_ITEM-POSNR.
        APPEND IT_POSNR.
      ENDLOOP.
      IF IT_POSNR[] IS NOT INITIAL.
        CLEAR :RTMSG,SUBRC.
        RTMSG = 'X'.
        SET UPDATE TASK LOCAL.
        PERFORM DELVBELNP(ZPUBFORM) TABLES IT_POSNR USING 'SO'
              CHANGING RTMSG.
        IF RTMSG+0(1) = 'E'.
          FILLMSG 'E' RTMSG 'X'.
        ELSE.
          FILLMSG 'S' '处理成功' 'X'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*更新增强字段
  CHECK RTYPE = 'S'.
  DO .
    SELECT SINGLE COUNT(*)
      FROM VBAK
      WHERE VBELN = VBELN.
    IF SY-SUBRC EQ 0.
      EXIT.
    ENDIF.
  ENDDO.
  SELECT *
    INTO TABLE IT_VBAP
    FROM VBAP
    WHERE VBELN = VBELN.

*动态更新增强字段
  CLEAR:ZDMSTR.
  SELECT *
    INTO TABLE @DATA(IT_DD03L)
    FROM DD03L
    WHERE TABNAME = 'ZSSD_ENH_VBAK'
    AND   AS4LOCAL = 'A'.
  IF SY-SUBRC EQ 0.
    LOOP AT IT_DD03L INTO DATA(WA_DD03L) .
      ASSIGN COMPONENT WA_DD03L-FIELDNAME OF STRUCTURE HEAD_ENH TO <FS>.
      IF SY-SUBRC EQ 0.
        CONCATENATE WA_DD03L-FIELDNAME ` = ` `'` <FS> `'` INTO ZDMSTR.
        UPDATE VBAK
        SET (ZDMSTR)
        WHERE VBELN = VBELN.
      ENDIF.
    ENDLOOP.
  ENDIF.


*  UPDATE VBAK
*  SET ZTTZT  = HEAD_ENH-ZTTZT
*      ZSHR   = HEAD_ENH-ZSHR
*      ZSHDQ  = HEAD_ENH-ZSHDQ
*      ZXXDZ  = HEAD_ENH-ZXXDZ
*      ZHUOC  = HEAD_ENH-ZHUOC
*      ZHUOK  = HEAD_ENH-ZHUOK
*      ZHUOG  = HEAD_ENH-ZHUOG
*      ZHUOZ  = HEAD_ENH-ZHUOZ
*      ZSHRDH = HEAD_ENH-ZSHRDH
*      ZSFDX  = HEAD_ENH-ZSFDX
*      ZYFFS  = HEAD_ENH-ZYFFS
*      ZYSRQ  = HEAD_ENH-ZYSRQ
*      ZYSJE  = HEAD_ENH-ZYSJE
*      ZXMMC  = HEAD_ENH-ZXMMC
*      ZQBFH  = HEAD_ENH-ZQBFH
*      ZSXSJ  = HEAD_ENH-ZSXSJ
*      ZBDJL  = HEAD_ENH-ZBDJL
*      ZBUM   = HEAD_ENH-ZBUM
*      ZYWY   = HEAD_ENH-ZYWY
*      ZWLY   = HEAD_ENH-ZWLY
*      ZJHFS   = HEAD_ENH-ZJHFS
*      ZYSGS   = HEAD_ENH-ZYSGS
*      ZCHEX   = HEAD_ENH-ZCHEX
*      ZYSFZR   = HEAD_ENH-ZYSFZR
*      ZQSD   = HEAD_ENH-ZQSD
*      ZSJXM   = HEAD_ENH-ZSJXM
*      ZSJDH   = HEAD_ENH-ZSJDH
*      ZCHEHAO   = HEAD_ENH-ZCHEHAO
*      ZCLXZ   = HEAD_ENH-ZCLXZ
*  WHERE VBELN = VBELN.
*新增行/新建行项目状态为E
  SORT ITEM BY POSNR.
  LOOP AT IT_VBAP WHERE ZCKZT IS INITIAL.
    UPDATE VBAP
    SET ZCKZT  = 'E'
    WHERE VBELN = VBELN
    AND   POSNR = IT_VBAP-POSNR.
  ENDLOOP.
  COMMIT WORK.
*更新增强字段
  LOOP AT IT_VBAP.
    READ TABLE ITEM INTO WA_ITEM WITH KEY POSNR = IT_VBAP-POSNR BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      UPDATE VBAP
      SET ZZHWZ = WA_ITEM-ZZHWZ
      WHERE VBELN = IT_VBAP-VBELN
      AND   POSNR = IT_VBAP-POSNR.
    ENDIF.
  ENDLOOP.
  COMMIT WORK.
ENDFUNCTION.
