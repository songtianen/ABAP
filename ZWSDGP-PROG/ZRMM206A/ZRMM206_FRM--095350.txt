*&---------------------------------------------------------------------*
*& Include ZRMM206_FRM
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& Form INITLOAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM REFRESHALV .
  IS_STABLE-ROW = 'X'.
  IS_STABLE-COL = 'X'.
  IF ALVGRID IS NOT INITIAL.
    CALL METHOD ALVGRID->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = IS_STABLE.
  ENDIF.
ENDFORM.                    " REFRESHALV
FORM REFRESHALV9001 .
  IS_STABLE1-ROW = 'X'.
  IS_STABLE1-COL = 'X'.
  IF ALVGRID1 IS NOT INITIAL.
    CALL METHOD ALVGRID1->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = IS_STABLE1.
  ENDIF.
ENDFORM.                    " REFRESHALV
FORM INITLOAD .
  SELECT * INTO TABLE IT_ZTMM210 FROM ZTMM210.
  SELECT * INTO TABLE IT_ZTMM212 FROM ZTMM212.
  SELECT * INTO TABLE IT_ZVTMM215 FROM ZVTMM215.
  SORT IT_ZVTMM215 BY ZCKBM.
  SELECT * INTO TABLE IT_ZTMM215 FROM ZTMM215.
  SELECT * INTO TABLE IT_T024 FROM T024.
  SORT IT_T024 BY EKGRP.
  SELECT * INTO TABLE IT_T023T FROM T023T WHERE SPRAS = SY-LANGU.
  SORT IT_T023T BY MATKL.
  SELECT * INTO TABLE IT_T001L FROM T001L.
  SORT IT_T001L BY WERKS LGORT.
  SELECT * INTO TABLE IT_T001 FROM T001.
  SORT IT_T001 BY BUKRS.
  SELECT * INTO TABLE IT_T001W FROM T001W.
  SORT IT_T001W BY WERKS.
  SELECT * INTO TABLE IT_T024E FROM T024E.
  SORT IT_T024E BY EKORG.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZDHLX USING 'ZDG_ZDHLX'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZDHZT USING 'ZDG_ZDHZT'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZTHFS USING 'ZDG_ZTHFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZJSFS USING 'ZDG_ZJSFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZYSFS USING 'ZDG_ZYSFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZZFFS USING 'ZDG_ZZFFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZSFCC USING 'ZDG_ZSFCC'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZSFHG USING 'ZDG_ZSFHG'.


  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZYSFS1  USING 'ZD_ZYSFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZJGSD  USING 'ZD_SF'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZFKFS  USING 'ZD_ZFKFS'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZFKLX  USING 'ZD_ZFKLX'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZXCF   USING 'ZD_ZXCF'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZYFCDF USING 'ZDPP_ZYFCDF'.
  PERFORM GETDOMAIN(ZPUBFORM) TABLES IT_ZCGLX  USING 'ZD_ZCGLX'.
*默认PO查询的字段
  PERFORM INITFIELDCAT.
*文本下拉框
  CLEAR:IT_LIST2.
  IT_LIST2-ID = 'Z001'.
  IT_LIST2-VALUE = '装运要求'.
  APPEND IT_LIST2.
  CLEAR:IT_LIST2.
  IT_LIST2-ID = 'Z002'.
  IT_LIST2-VALUE = '备注'.
  APPEND IT_LIST2.

  APPEND 'IEQZ800' TO S_KTOKK.

  APPEND 'INEX' TO S_DEL.
  APPEND 'INEX' TO S_DELI.

  APPEND 'IEQ3060' TO D_WERKS.
  APPEND 'IEQ3062' TO D_WERKS.
*默认值设置
  CASE SY-TCODE.
    WHEN TCODE1 OR 'SE38'.
      TEXT1 = '收货已完成'.
      TEXT2 = '收货未完成'.
    WHEN TCODE4.
      TEXT1 = '收货已完成'.
      TEXT2 = '未收货'.
  ENDCASE.
ENDFORM.
FORM FILLDATA CHANGING INWA.
  DATA:BEGIN OF IT_YS OCCURS 0,
         FIELD1 TYPE FIELDNAME, "编码字段
         FIELD2 TYPE FIELDNAME, "文本
         FIELD3 TYPE FIELDNAME, "对应内表
       END OF IT_YS,
       BEGIN OF IT_YS1 OCCURS 0,
         KSCHL TYPE KSCHL,
         FIELD TYPE FIELDNAME,
       END OF IT_YS1.
  DATA:KPOSN TYPE PRCD_ELEMENTS-KPOSN.
  FIELD-SYMBOLS:<FS1>    TYPE ANY,
                <FS2>    TYPE ANY,
                <FS3>    TYPE ANY,
                <C_WA1>  TYPE ANY,
                <C_TAB1> TYPE STANDARD TABLE.
  CLEAR:*ZVMMPO,IT_YS[],IT_YS1[],KPOSN.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZDHLX'.
  IT_YS-FIELD2 = 'ZDHLXT'.
  IT_YS-FIELD3 = 'IT_ZDHLX[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZDHZT'.
  IT_YS-FIELD2 = 'ZDHZTT'.
  IT_YS-FIELD3 = 'IT_ZDHZT[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZTHFS'.
  IT_YS-FIELD2 = 'ZTHFST'.
  IT_YS-FIELD3 = 'IT_ZTHFS[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZJSFS'.
  IT_YS-FIELD2 = 'ZJSFST'.
  IT_YS-FIELD3 = 'IT_ZJSFS[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZYSFS'.
  IT_YS-FIELD2 = 'ZYSFST'.
  IT_YS-FIELD3 = 'IT_ZYSFS[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZYSFS1'.
  IT_YS-FIELD2 = 'ZYSFS1T'.
  IT_YS-FIELD3 = 'IT_ZYSFS1[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZZFFS'.
  IT_YS-FIELD2 = 'ZZFFST'.
  IT_YS-FIELD3 = 'IT_ZZFFS[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZSFCC'.
  IT_YS-FIELD2 = 'ZSFCCT'.
  IT_YS-FIELD3 = 'IT_ZSFCC[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZSFHG'.
  IT_YS-FIELD2 = 'ZSFHGT'.
  IT_YS-FIELD3 = 'IT_ZSFHG[]'.
  APPEND IT_YS.

  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZJGSD'.
  IT_YS-FIELD2 = 'ZJGSDT'.
  IT_YS-FIELD3 = 'IT_ZJGSD[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZFKFS'.
  IT_YS-FIELD2 = 'ZFKFST'.
  IT_YS-FIELD3 = 'IT_ZFKFS[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZFKLX'.
  IT_YS-FIELD2 = 'ZFKLXT'.
  IT_YS-FIELD3 = 'IT_ZFKLX[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZXCF'.
  IT_YS-FIELD2 = 'ZXCFT'.
  IT_YS-FIELD3 = 'IT_ZXCF[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZYFCDF'.
  IT_YS-FIELD2 = 'ZYFCDFT'.
  IT_YS-FIELD3 = 'IT_ZYFCDF[]'.
  APPEND IT_YS.
  CLEAR IT_YS.
  IT_YS-FIELD1 = 'ZCGLX'.
  IT_YS-FIELD2 = 'ZCGLXT'.
  IT_YS-FIELD3 = 'IT_ZCGLX[]'.
  APPEND IT_YS.

  CLEAR IT_YS1.
  IT_YS1-KSCHL = 'PBXX'.
  IT_YS1-FIELD = 'PBXX'.
  APPEND IT_YS1.
  CLEAR IT_YS1.
  IT_YS1-KSCHL = 'PBXX'.
  IT_YS1-FIELD = 'K_PBXX'.
  APPEND IT_YS1.
  CLEAR IT_YS1.
  IT_YS1-KSCHL = 'ZWVZ'.
  IT_YS1-FIELD = 'K_ZWVZ'.
  APPEND IT_YS1.

  MOVE-CORRESPONDING INWA TO *ZVMMPO.
  ASSIGN COMPONENT 'FRGKE' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    IF <FS1> = 'R'.
      <FS1> = 'X'.
    ELSE.
      CLEAR <FS1>.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'T024E' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T024E WITH KEY EKORG = *ZVMMPO-EKORG
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T024E-EKOTX.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'LGOBE' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T001L WITH KEY WERKS = *ZVMMPO-WERKS
                                 LGORT = *ZVMMPO-LGORT
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T001L-LGOBE.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'NAMEW' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T001W WITH KEY WERKS = *ZVMMPO-WERKS
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T001W-NAME1.
    ENDIF.
  ENDIF.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE INWA TO <FS2>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_MARA WITH KEY MATNR = <FS2> BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'MATKL' OF STRUCTURE INWA TO <FS1>.
      IF SY-SUBRC EQ 0.
        <FS1> = IT_MARA-MATKL.
      ENDIF.
      ASSIGN COMPONENT 'ZZL1' OF STRUCTURE INWA TO <FS1>.
      IF SY-SUBRC EQ 0.
        <FS1> = IT_MARA-ZZL1.
      ENDIF.
      ASSIGN COMPONENT 'ZJDW' OF STRUCTURE INWA TO <FS1>.
      IF SY-SUBRC EQ 0.
        IF <FS1> IS INITIAL.
          <FS1> = IT_MARA-MEINS.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'MATNR' OF STRUCTURE INWA TO <FS2>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_MARM WITH KEY MATNR = <FS2>
                                KZWSO = 'B'
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'RKDW' OF STRUCTURE INWA TO <FS1>.
      IF SY-SUBRC EQ 0.
        IF <FS1> IS INITIAL.
          <FS1> = IT_MARM-MEINH.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


  ASSIGN COMPONENT 'BANFN' OF STRUCTURE INWA TO <FS2>.
  IF SY-SUBRC EQ 0.
    ASSIGN COMPONENT 'BNFPO' OF STRUCTURE INWA TO <FS3>.
    IF SY-SUBRC EQ 0.
      READ TABLE IT_EBAN WITH KEY BANFN = <FS2>
                                  BNFPO = <FS3>
                                  BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        CLEAR IT_EBANS.
        MOVE-CORRESPONDING IT_EBAN TO IT_EBANS.
        IT_EBANS-LGORT1 = IT_EBAN-LGORT.
        MOVE-CORRESPONDING IT_EBANS TO INWA.
        ASSIGN COMPONENT 'NAMEK' OF STRUCTURE INWA TO <FS1>.
        IF SY-SUBRC EQ 0.
          SELECT SINGLE NAME1
            INTO <FS1>
            FROM KNA1
            WHERE KUNNR = IT_EBANS-KUNNR.
        ENDIF.
        IF IT_EBANS-LGORT1 IS NOT INITIAL.
          ASSIGN COMPONENT 'LGOBE1' OF STRUCTURE INWA TO <FS2>.
          IF SY-SUBRC EQ 0.
            READ TABLE IT_T001L WITH KEY WERKS = *ZVMMPO-WERKS
                                         LGORT = IT_EBANS-LGORT1
                                         BINARY SEARCH.
            IF SY-SUBRC EQ 0.
              <FS2> = IT_T001L-LGOBE.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'ZBGT' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    ASSIGN COMPONENT 'ZBG' OF STRUCTURE INWA TO <FS2>.
    IF SY-SUBRC EQ 0.
      SELECT SINGLE NAME1
        INTO <FS1>
        FROM KNA1
        WHERE KUNNR = <FS2>.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'LGOBE' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T001L WITH KEY WERKS = *ZVMMPO-WERKS
                                 LGORT = *ZVMMPO-LGORT
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T001L-LGOBE.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'NAMEL' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_LFA1 WITH KEY LIFNR = *ZVMMPO-LIFNR
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_LFA1-NAME1.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'ZYSGST' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    ASSIGN COMPONENT 'ZYSGS' OF STRUCTURE INWA TO <FS2>.
    READ TABLE IT_LFA1 WITH KEY LIFNR = <FS2>
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_LFA1-NAME1.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'MAKTX' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_MAKT WITH KEY MATNR = *ZVMMPO-MATNR
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_MAKT-MAKTX.
    ENDIF.
  ENDIF.
*物料长描述
  ASSIGN COMPONENT 'ZWLCMS' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    PERFORM GETLONGTEXT(ZPUBFORM)
    USING 'GRUN' *ZVMMPO-MATNR 'MATERIAL'
          CHANGING <FS1>.
  ENDIF.

  ASSIGN COMPONENT 'T024' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T024 WITH KEY EKGRP = *ZVMMPO-EKGRP
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T024-EKNAM.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'BUTXT' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    READ TABLE IT_T001 WITH KEY BUKRS = *ZVMMPO-BUKRS
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      <FS1> = IT_T001-BUTXT.
    ENDIF.
  ENDIF.
  ASSIGN COMPONENT 'T023T' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    ASSIGN COMPONENT 'MATKL' OF STRUCTURE INWA TO <FS2>.
    IF SY-SUBRC EQ 0.
      READ TABLE IT_T023T WITH KEY MATKL = <FS2>
                                   BINARY SEARCH.
      IF SY-SUBRC EQ 0.
        <FS1> = IT_T023T-WGBEZ.
      ENDIF.
    ENDIF.

  ENDIF.
  LOOP AT IT_YS.
    ASSIGN COMPONENT IT_YS-FIELD1 OF STRUCTURE INWA TO <FS1>.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT IT_YS-FIELD2 OF STRUCTURE INWA TO <FS2>.
      IF SY-SUBRC EQ 0.
        ASSIGN (IT_YS-FIELD3) TO <C_TAB1>.
        IF SY-SUBRC EQ 0.
          READ TABLE <C_TAB1> ASSIGNING <C_WA1> WITH KEY ('DOMVALUE_L') = <FS1>
                                                         BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            ASSIGN COMPONENT 'DDTEXT' OF STRUCTURE <C_WA1> TO <FS3>.
            IF SY-SUBRC EQ 0.
              <FS2> = <FS3>.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
*取价格
  ASSIGN COMPONENT 'EBELP' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    KPOSN = <FS1>.
    LOOP AT IT_YS1.
      IF IT_YS1-FIELD+0(2) = 'K_'.
        READ TABLE IT_PRCD WITH KEY KNUMV = *ZVMMPO-KNUMV
                                    KPOSN = KPOSN
                                    KSCHL = IT_YS1-KSCHL
                                    BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          ASSIGN COMPONENT IT_YS1-FIELD OF STRUCTURE INWA TO <FS2>.
          IF SY-SUBRC EQ 0.
            <FS2> = IT_PRCD-KWERT.
          ENDIF.
        ENDIF.
      ELSE.
        READ TABLE IT_PRCD WITH KEY KNUMV = *ZVMMPO-KNUMV
                                    KPOSN = KPOSN
                                    KSCHL = IT_YS1-KSCHL
                                    BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          ASSIGN COMPONENT IT_YS1-FIELD OF STRUCTURE INWA TO <FS2>.
          IF SY-SUBRC EQ 0.
            <FS2> = IT_PRCD-KBETR.
          ENDIF.
        ENDIF.
      ENDIF.

    ENDLOOP.
    READ TABLE IT_CGWQ WITH KEY EBELN = *ZVMMPO-EBELN
                                EBELP = <FS1>
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'CGWQ' OF STRUCTURE INWA TO <FS2>.
      IF SY-SUBRC EQ 0.
        <FS2> = IT_CGWQ-MENGE.
      ENDIF.
      ASSIGN COMPONENT 'SHMNG' OF STRUCTURE INWA TO <FS3>.
      IF SY-SUBRC EQ 0.
        <FS3> = IT_CGWQ-SHMNG.
      ENDIF.
    ENDIF.
    READ TABLE IT_EKKN WITH KEY EBELN = *ZVMMPO-EBELN
                                EBELP = <FS1>
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'PSPNR' OF STRUCTURE INWA TO <FS2>.
      IF SY-SUBRC EQ 0.
        <FS2> = IT_EKKN-PS_PSP_PNR.
        READ TABLE IT_PRPS WITH KEY PSPNR = IT_EKKN-PS_PSP_PNR BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          ASSIGN COMPONENT 'POSID' OF STRUCTURE INWA TO <FS3>.
          IF SY-SUBRC EQ 0.
            <FS3> = IT_PRPS-POSID.
          ENDIF.
          ASSIGN COMPONENT 'POST1' OF STRUCTURE INWA TO <FS3>.
          IF SY-SUBRC EQ 0.
            <FS3> = IT_PRPS-POST1.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
*获取税率
  ASSIGN COMPONENT 'ZSL' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    PERFORM GETTAX(ZPUBFORM) USING '' *ZVMMPO-MWSKZ
          CHANGING <FS1>.
*计算净价
    ASSIGN COMPONENT 'PBXX' OF STRUCTURE INWA TO <FS2>.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'NETPR' OF STRUCTURE INWA TO <FS3>.
      IF SY-SUBRC EQ 0.
        <FS3> = <FS2> / ( 1 + <FS1> ).
      ENDIF.
    ENDIF.
  ENDIF.
*计算不含税金额
  ASSIGN COMPONENT 'K_PBXX' OF STRUCTURE INWA TO <FS1>.
  IF SY-SUBRC EQ 0.
    ASSIGN COMPONENT 'K_ZWVZ' OF STRUCTURE INWA TO <FS2>.
    IF SY-SUBRC EQ 0.
      ASSIGN COMPONENT 'ZBHSJE' OF STRUCTURE INWA TO <FS3>.
      IF SY-SUBRC EQ 0.
        <FS3> = <FS1> + <FS2>.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Module STATUS_9000 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.
  PERFORM MODIFY9000."按钮与字段可编辑
  PERFORM SETLIST."下拉框
  PERFORM EDITCONTAINER."长文本
  PERFORM SHOWITEM."明细ALV
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM EXIT USING OK_CODE.
  CLEAR SY-UCOMM.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form EXIT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> OK_CODE
*&---------------------------------------------------------------------*
FORM EXIT  USING    P_OK_CODE.
  CHECK P_OK_CODE+0(5) = 'BUT10'.
  CASE 'X'.
    WHEN P1_X OR P2_X.
      PERFORM CONFIRMACT(ZPUBFORM) USING '' CHANGING ANSWER.
      IF ANSWER EQ '1'.
        IF P2_X = 'X'.
          LOCK 'X' WA_HEAD-ZDHDH.
        ENDIF.
        LEAVE TO SCREEN 0.
      ENDIF.
    WHEN OTHERS.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form SHOWITEM
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SHOWITEM .
  "创建容器
  IF ALVGRID IS INITIAL.
    CREATE OBJECT CONTAIN
      EXPORTING
        CONTAINER_NAME              = 'CONT2'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.
    IF SY-SUBRC NE 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    CREATE OBJECT ALVGRID
      EXPORTING
        I_PARENT = CONTAIN.

    CALL METHOD CL_GUI_CFW=>DISPATCH.

    CREATE OBJECT LCL_EVENT_RECEIVER1.
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_DOUBLE_CLICK FOR ALVGRID.
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_DATA_CHANGED FOR ALVGRID.
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_HOTSPOT_CLICK FOR ALVGRID."热点点击
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_TOOLBAR FOR ALVGRID."增加按钮
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_COMMAND FOR ALVGRID."按钮响应
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_ON_F4 FOR ALVGRID."按钮响应
    ALVGRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED )."mc_evt_enter
*    ALVGRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER )."mc_evt_enter
    ALVGRID->REGISTER_DELAYED_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_DELAYED_CHANGE_SELECT )."MC_EVT_DELAYED_CHANGE_SELECT

    PERFORM CALLALVN.
  ELSE.
    PERFORM CALLALVN.
  ENDIF.
*刷新ALV
  PERFORM REFRESHALV.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALLALVN
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CALLALVN .
  CLEAR:IT_FIELDCAT.
*FIELDCAT
  PERFORM FILLFIELDCAT(ZPUBFORM) TABLES IT_FIELDCAT USING:
'CHBOX' '选择' '' '',
'DEL' '删除标记' '' '',
'ZJBS' '组件标记' '' '',
'ZDHHH' '' 'ZTMM202' '' ,
'UEPOS' '上层行号' '' '' ,
'EBELN' '' 'ZTMM202' '' ,
'EBELP' '' 'ZTMM202' '' ,
'MATNR' '' 'ZTMM202' '' ,
*'MAKTX' '物料描述' '' '' ,
'ZWLCMS' '物料长描述' '' '' ,
'ZZL1' '品名' '' '' ,
'ZJYBZ' '' 'ZTMM202' '' ,
'ZXHL' '' 'ZTMM202' '' ,
'SHMNG' '已到货数量' 'EKPO' 'MENGE' ,
'ZDHL' '' 'ZTMM202' '' ,
'ZJSL' '' 'ZTMM202' '' ,
'ZXHPC' '' 'ZTMM202' '' ,
'ZRKL' '' 'ZTMM202' '' ,
'RKDW' '' 'ZTMM202' '' ,
'ZJDW' '组件单位' 'ZTMM202' 'ZJDW' ,
'ZCML' '' 'ZTMM202' '' ,
'WERKS' '' 'ZTMM202' '' ,
'NAMEW' '工厂名称' '' '' ,
'LGORT' '卸货仓库' 'T001L' '' ,
'LGOBE' '库存地名称' '' '' ,
'CHARG' '' 'ZTMM202' '' ,
'ZMF' '免费' '' '' ,
'ZJH' '' 'ZTMM202' '' ,
'ZZBH' '' 'ZTMM202' '' ,
'ZZYH' '' 'ZTMM202' '' ,
'ZCD' '' 'ZTMM202' '' ,
'ZKW' '' 'ZTMM202' '' ,
'ZRKRQ' '' 'ZTMM202' '' ,
'ZSCRQ' '' 'ZTMM202' '' ,
'ZBZRQ' '' 'ZTMM202' '' ,
'ZYXQ' '' 'ZTMM202' '' ,
'ZSFHG' '' 'ZTMM202' '' ,
'ZBHGL' '' 'ZTMM202' '' ,
'ZJYR' '' 'ZTMM202' '' ,
'ZBG' '' 'ZTMM202' '' ,
'ZBGT' '保管名称' '' '' ,
'ZBZH' '' 'ZTMM202' '' ,
'ZBHGSM' '' 'ZTMM202' '' ,
'BANFN' '采购申请' 'ZTMM202' '' ,
'BNFPO' '采购申请行号' 'ZTMM202' '' ,
'ZYSJEI' '运费' 'ZTMM202' '' ,
'AFNAM' '申请人' '' '',
'BEDNR' '销售合同' '' '' ,
'EKGRP' '采购组' '' '' ,
'T024' '采购组名称' '' '' ,
'PSPNR' '项目号' 'PRPS' '' ,
'POSID' '项目定义' 'PRPS' '' ,
'POST1' '项目名称' 'PRPS' '' ,
'KUNNR' '客户编码' 'KNA1' '' ,
'NAMEK' '客户名称' '' '' ,
*'TXZ01' '行文本文本' '' '' ,
'MENGE' '订单数量' 'EKPO' '' ,
'MEINS' '订单单位' 'EKPO' '' .
  LOOP AT IT_FIELDCAT INTO WA_FIELDCAT.
    CASE WA_FIELDCAT-FIELDNAME.
      WHEN 'DEL' OR 'ZJBS'.
        WA_FIELDCAT-CHECKBOX   = 'X'.
      WHEN 'CHBOX' OR 'CHBOX1'.
        WA_FIELDCAT-HOTSPOT   = 'X'.
        WA_FIELDCAT-EDIT   = 'X'.
        WA_FIELDCAT-CHECKBOX   = 'X'.
        WA_FIELDCAT-FIX_COLUMN   = 'X'.
      WHEN 'ZMF' OR 'ZSFHG'.
        WA_FIELDCAT-CHECKBOX   = 'X'.
      WHEN 'ZXHPC' OR 'RKDW' OR 'LGORT' OR 'ZJDW'.
        WA_FIELDCAT-F4AVAILABL = 'X'.
    ENDCASE.
    CASE 'X'.
      WHEN P1_X OR P2_X.
        CASE WA_FIELDCAT-FIELDNAME.
          WHEN 'ZXHL' OR 'ZDHL' OR 'ZCD'
            OR 'ZJH' OR 'ZBZH' OR 'ZXHPC'.
            WA_FIELDCAT-EDIT = 'X'.
          WHEN 'ZMF'.
            WA_FIELDCAT-HOTSPOT   = 'X'.
            WA_FIELDCAT-EDIT   = 'X'.
          WHEN 'LGORT' OR 'ZZBH' OR 'ZJDW'.
            CASE WA_HEAD-ZDHLX.
              WHEN 'WWCL'.
                WA_FIELDCAT-EDIT = 'X'.
            ENDCASE.
        ENDCASE.
      WHEN P4_X.
        CASE WA_HEAD-ZDHZT.
          WHEN 'D'.
            CASE WA_FIELDCAT-FIELDNAME.
              WHEN 'LGORT' OR 'ZJSL' OR 'ZRKL'
                OR 'ZKW' OR 'ZZBH' OR 'ZBZH'
                OR 'ZJH' OR 'ZZYH' OR 'ZCD'
                OR 'ZSCRQ' OR 'ZBZRQ' OR 'ZYXQ'
                OR 'ZBHGL' OR 'ZBHGSM' OR 'ZJYR'
                OR 'ZXHPC' OR 'RKDW'.
                WA_FIELDCAT-EDIT = 'X'.
              WHEN 'ZSFHG'.
                WA_FIELDCAT-HOTSPOT   = 'X'.
                WA_FIELDCAT-EDIT   = 'X'.
              WHEN 'ZXHL'.
                CASE WA_HEAD-ZDHLX.
                  WHEN 'WWHC' OR 'WWGD'.
                    WA_FIELDCAT-EDIT   = 'X'.
                ENDCASE.
              WHEN 'ZJDW'.
                CASE WA_HEAD-ZDHLX.
                  WHEN 'WWCL'.
                    WA_FIELDCAT-EDIT = 'X'.
                ENDCASE.
            ENDCASE.
        ENDCASE.
    ENDCASE.
    CASE WA_FIELDCAT-FIELDNAME.
      WHEN 'ZJDW'.
        CASE WA_HEAD-ZDHLX.
          WHEN 'WWCL'.
          WHEN OTHERS.
            WA_FIELDCAT-NO_OUT = 'X'.
        ENDCASE.
    ENDCASE.
    MODIFY IT_FIELDCAT FROM WA_FIELDCAT.
  ENDLOOP.

*设置搜索帮助
  CLEAR:IT_F4.
  LOOP AT IT_FIELDCAT INTO WA_FIELDCAT WHERE F4AVAILABL = 'X'
                                         AND EDIT = 'X'.
    CLEAR:WA_F4.
    WA_F4-FIELDNAME = WA_FIELDCAT-FIELDNAME.
    WA_F4-REGISTER = 'X'.
    WA_F4-GETBEFORE = SPACE.
    WA_F4-CHNGEAFTER = 'X'.
    INSERT WA_F4 INTO TABLE IT_F4.
  ENDLOOP.
  CALL METHOD ALVGRID->REGISTER_F4_FOR_FIELDS
    EXPORTING
      IT_F4 = IT_F4.

  PERFORM CALLALV(ZPUBFORM)
  TABLES IT_ITEM USING ALVGRID IT_FIELDCAT 'M206'.
ENDFORM.
FORM FILLFIELDCAT TABLES P_FIELDCAT STRUCTURE LVC_S_FCAT
                   USING P_FIELDNAME P_TEXT P_TAB P_FIELD.
  DATA:WA_FIELDCAT TYPE LVC_S_FCAT,
       EDITALV     TYPE CHAR1.
  CLEAR:WA_FIELDCAT,EDITALV.
  CASE SY-TCODE.
    WHEN TCODE1.
      CASE 'X'.
        WHEN P1_X OR P2_X.
          EDITALV = 'X'.
        WHEN P3_X.
      ENDCASE.
    WHEN TCODE2 OR TCODE3.
*      CASE 'X'.
*        WHEN P1_X OR P2_X.
*        WHEN P3_X.
*          EDITALV = 'X'.
*      ENDCASE.
    WHEN TCODE5.
  ENDCASE.
  WA_FIELDCAT-FIELDNAME = P_FIELDNAME.
  WA_FIELDCAT-SCRTEXT_M = P_TEXT.
  WA_FIELDCAT-SCRTEXT_L = P_TEXT.
  WA_FIELDCAT-SCRTEXT_S = P_TEXT.
  WA_FIELDCAT-REF_TABLE = P_TAB.
  WA_FIELDCAT-REF_FIELD = P_FIELD.
  IF P_FIELD IS INITIAL.
    WA_FIELDCAT-REF_FIELD = P_FIELDNAME.
  ENDIF.
  IF P_FIELD = 'N'.
    CLEAR:WA_FIELDCAT-REF_FIELD.
  ENDIF.
  CASE P_FIELDNAME.
    WHEN 'DEL' OR 'ZJBS'.
      WA_FIELDCAT-CHECKBOX   = 'X'.
    WHEN 'CHBOX' OR 'CHBOX1'.
      WA_FIELDCAT-HOTSPOT   = EDITALV.
      WA_FIELDCAT-EDIT   = EDITALV.
      WA_FIELDCAT-CHECKBOX   = 'X'.
      WA_FIELDCAT-FIX_COLUMN   = 'X'.
    WHEN 'ZMF' OR 'ZSFHG'.
      WA_FIELDCAT-HOTSPOT   = EDITALV.
      WA_FIELDCAT-EDIT   = EDITALV.
      WA_FIELDCAT-CHECKBOX   = 'X'.
    WHEN 'ZDHL' OR 'ZCD' OR 'ZJH'
      OR 'LGORT' OR 'ZJSL' OR 'ZCML'
      OR 'ZKW' OR 'ZZBH' OR 'ZZYH'
      OR 'ZSCRQ' OR 'ZBZRQ' OR 'ZYXQ'
      OR 'ZBHGL' OR 'ZBHGSM' OR 'ZJYR'.
      WA_FIELDCAT-EDIT = EDITALV.
  ENDCASE.
  APPEND WA_FIELDCAT TO P_FIELDCAT.
ENDFORM.                    "FILLFIELDCAT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.
  DATA:MSG1 TYPE BAPI_MSG.
  CLEAR:MSG1, MSG.
  OK_CODE = SY-UCOMM.
  PERFORM SCREEN2TAB USING WA_HEAD-TDID.
  PERFORM TAB2SCREEN USING WA_HEAD-TDID.
  CASE OK_CODE.
    WHEN 'ITEMCHG'.
      PERFORM CALZZZ.
  ENDCASE.
  CASE OK_CODE+0(5).
    WHEN 'BUT04'."保存
      PERFORM BUT04 USING OK_CODE.
    WHEN 'BUT05' OR 'BUT06' OR 'BUT07'."提交
      PERFORM CONFIRMACT(ZPUBFORM) USING '' CHANGING ANSWER.
      CHECK ANSWER = '1'.
*提交前先保存
      CASE OK_CODE.
        WHEN 'BUT05'.
          PERFORM BUT04 USING OK_CODE.
          IF RETURN[] IS NOT INITIAL.
            EXIT.
          ENDIF.
          IF MSG+0(1) = 'S'.
          ELSE.
            MESSAGE S000(OO) WITH MSG DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
      ENDCASE.
      PERFORM CHGSTATUS USING WA_HEAD-ZDHDH OK_CODE
            CHANGING MSG1.
      IF MSG1+0(1) = 'S'.
        LOCK 'X' WA_HEAD-ZDHDH.
        PERFORM GETDATA.
        MESSAGE I011 WITH WA_HEAD-ZDHDH.
        LEAVE TO SCREEN 0.
      ENDIF.
*    WHEN 'BUT06'."驳回
*    WHEN 'BUT07'."重置
    WHEN 'BUT08'."删除
      IF WA_HEAD-ZDHZT NE 'A'.
        MESSAGE S013 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      PERFORM DELALL.
      PERFORM GETDATA.
      MESSAGE I007.
      LEAVE TO SCREEN 0.
    WHEN 'BUT09'."一键填充到货数量
      LOOP AT IT_ITEM WHERE ZDHL IS INITIAL.
        IT_ITEM-ZDHL = IT_ITEM-MENGE - IT_ITEM-SHMNG.
        IF IT_ITEM-ZDHL LT 0.
          CLEAR:IT_ITEM-ZDHL.
        ENDIF.
        MODIFY IT_ITEM TRANSPORTING ZDHL.
      ENDLOOP.
      PERFORM CALZZL USING 'BUT09'.
      PERFORM CALZZZ.
      MESSAGE S007.
    WHEN 'BUT10'."
      PERFORM EXIT USING OK_CODE.
    WHEN 'BUT11' .
*先执行保存
      PERFORM BUT04 USING OK_CODE.
      IF RETURN[] IS NOT INITIAL.
        PERFORM SHOWMSG(ZPUBFORM) TABLES RETURN.
        EXIT.
      ENDIF.
      IF MSG+0(1) NE 'S'.
        EXIT.
      ENDIF.
      PERFORM BUT11A USING OK_CODE."过账
      IF RTYPE = 'S'.
        MESSAGE I000(OO) WITH RTMSG.
        LEAVE TO SCREEN 0.
      ELSE.
        IF RTMSG CS 'CRTD'.
          RTMSG = '项目未激活，请联系销售'.
        ENDIF.
        MESSAGE S000(OO) WITH RTMSG DISPLAY LIKE 'E'.
      ENDIF.
    WHEN 'BUT12'.
      PERFORM BUT11A USING OK_CODE."
      IF RTYPE = 'S'.
        MESSAGE I000(OO) WITH RTMSG.
        LEAVE TO SCREEN 0.
      ELSE.
        MESSAGE S000(OO) WITH RTMSG DISPLAY LIKE 'E'.
      ENDIF.
    WHEN 'PICK'.
      PERFORM PICK USING OK_CODE.
    WHEN 'BUT13'.
      SELECT SINGLE COUNT(*)
        FROM ZTMM201
        WHERE ZDHDH = WA_HEAD-ZDHDH.
      IF SY-SUBRC EQ 0.
        CALL FUNCTION 'ZFM_FTP_CALLZFTP'
          EXPORTING
            SAPNO = WA_HEAD-ZDHDH
            SAPMK = 'MM'
            DJLX  = 'DHTZ'.
      ELSE.
        MESSAGE S000(OO) WITH '保存后再上传附件' DISPLAY LIKE 'E'.
      ENDIF.
    WHEN 'BUT14'.
      PERFORM SENWMS USING WA_HEAD-ZDHDH
            CHANGING MSG RTMSG.
      CONCATENATE MSG RTMSG INTO WA_HEAD-ZWMSJG.
    WHEN 'BUT15'.
      LOOP AT IT_ITEM.
        SELECT SINGLE *
          FROM ZVMMPO
          WHERE EBELN = IT_ITEM-EBELN
          AND   EBELP = IT_ITEM-EBELP.
        READ TABLE IT_T024 WITH KEY EKGRP = ZVMMPO-EKGRP BINARY SEARCH.
        CALL FUNCTION 'ZFM_GP_MM_WMS_SYNCCLOSEORDER'
          EXPORTING
            WERKS = IT_ITEM-WERKS
            LGORT = IT_ITEM-LGORT
            ZDJLX = 'RK' "WA_HEAD-ZDHLX
            ZDHNO = WA_HEAD-ZDHDH
            ZCZR  = IT_T024-TEL_EXTENS. "EKNAM
      ENDLOOP.
    WHEN 'BUT99'."打印入库单
      SELECT SINGLE COUNT(*)
        FROM ZTMM201
        WHERE ZDHDH = WA_HEAD-ZDHDH.
      IF SY-SUBRC NE 0.
        MESSAGE S000(OO) WITH '保存后再打印' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      PERFORM BUT99.
  ENDCASE.
  CLEAR SY-UCOMM.
  PERFORM REFRESHALV.
ENDMODULE.
FORM PICK USING P_UCOMM.
  DATA:L_ROW   TYPE I,
       L_FIELD TYPE CHAR30.
  CLEAR:L_ROW,L_FIELD.
  GET CURSOR LINE L_ROW.
  GET CURSOR FIELD L_FIELD.
  CASE L_FIELD.
    WHEN 'WA_HEAD-MBLNR'.
      PERFORM MIGO(ZPUBFORM) USING WA_HEAD-MBLNR WA_HEAD-MJAHR.
    WHEN 'WA_HEAD-MBLNR1'.
      PERFORM MIGO(ZPUBFORM) USING WA_HEAD-MBLNR1 WA_HEAD-MJAHR.
  ENDCASE.
ENDFORM.
FORM BUT11A USING P_R_UCOMM.
  DATA:BEGIN OF IT_ZDHDH01 OCCURS 0.
         INCLUDE STRUCTURE ZSMM201.
  DATA:  BUDAT TYPE BUDAT,
       END OF IT_ZDHDH01.
  DATA:ACTTYPE TYPE CHAR10.
  CLEAR:IT_ZDHDH01[],ACTTYPE,RTYPE,RTMSG.
  CASE P_R_UCOMM.
    WHEN 'BUT11'.
      ACTTYPE = 'POST'.
    WHEN 'BUT12'.
      ACTTYPE = 'CANCEL'.
  ENDCASE.
  IF WA_HEAD-ZDHDH IS INITIAL.
    LOOP AT <ITAB> ASSIGNING <WA>.
      ASSIGN COMPONENT 'SEL' OF STRUCTURE <WA> TO <FS>.
      IF SY-SUBRC EQ 0.
        IF <FS> = 'X'.
          CLEAR:IT_ZDHDH01.
          MOVE-CORRESPONDING <WA> TO IT_ZDHDH01.
          IF IT_ZDHDH01-BUDAT IS INITIAL.
            IT_ZDHDH01-BUDAT = SY-DATUM.
          ENDIF.
          COLLECT IT_ZDHDH01.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ELSE.
    IF WA_HEAD-BUDAT GT SY-DATUM.
      RTMSG = '过账日期不能大于当前日期'.
      RTYPE = 'E'.
      EXIT.
    ENDIF.
    CLEAR:IT_ZDHDH01.
    IT_ZDHDH01-ZDHDH = WA_HEAD-ZDHDH.
    IT_ZDHDH01-BUDAT = WA_HEAD-BUDAT.
    IF IT_ZDHDH01-BUDAT IS INITIAL.
      IT_ZDHDH01-BUDAT = SY-DATUM.
    ENDIF.
    COLLECT IT_ZDHDH01.
  ENDIF.
  IF IT_ZDHDH01[] IS INITIAL.
    MESSAGE E003.
  ENDIF.
  SORT IT_ZDHDH01 BY ZDHDH.
  DELETE ADJACENT DUPLICATES FROM IT_ZDHDH01
  COMPARING ZDHDH.
  LOOP AT IT_ZDHDH01.
    CLEAR:*ZTMM201,RTYPE,RTMSG,RETURN[],ZSMM205.
    CALL FUNCTION 'ZFM_DHTZ_MOVE_CANCEL'
      EXPORTING
        ZDHDH     = IT_ZDHDH01-ZDHDH
        BUDAT     = IT_ZDHDH01-BUDAT
        ACT       = ACTTYPE
      IMPORTING
        RTYPE     = RTYPE
        RTMSG     = RTMSG
      CHANGING
        O_ZTMM201 = *ZTMM201.
    MOVE-CORRESPONDING *ZTMM201 TO ZSMM205.
    LOOP AT ITAB3 WHERE ZDHDH = IT_ZDHDH01-ZDHDH.
      ITAB2-MSG = RTMSG.
      MOVE-CORRESPONDING ZSMM205 TO ITAB2.
      IF RTYPE = 'S'.
        ITAB2-ICON = GREEN.
      ELSE.
        ITAB2-ICON = RED.
      ENDIF.
      MODIFY ITAB3.
    ENDLOOP.
  ENDLOOP.
  COMMIT WORK.
ENDFORM.
FORM BUT04 USING P_OKCODE.
  DATA:BEGIN OF IT_CHECKFIELD OCCURS 0,
         TYPE  TYPE CHAR1,
         FIELD TYPE CHAR30,
         TEXT  TYPE CHAR30,
       END OF IT_CHECKFIELD.
  DATA:ZNUMBER TYPE ZTNUMS_UPDATE-ZNUMBER10,
       SUBRC   TYPE SY-SUBRC,
       BLC     TYPE CHAR10,
       TABIXC  TYPE CHAR10.
  FIELD-SYMBOLS:<FS1> TYPE ANY.
  CLEAR:IT_CHECKFIELD[],ZNUMBER,SUBRC,MSG,ZDHHH,
  SUBRC,RETURN[],IT_ZTMM202[],IT_ZTMM201[],BLC.
  BLC = CE * 100.
  CONDENSE BLC NO-GAPS.

  PERFORM CALZZL USING 'BUT04'.
*若总重总量不一致，则提示
  IF WA_HEAD-ZZL NE WA_HEAD-ZZZ.
    PERFORM CONFIRMACT(ZPUBFORM) USING '总重与总量不一致，请确认!' CHANGING ANSWER.
    CHECK ANSWER = '1'.
  ENDIF.
*若全部删除，则提示
  IF IT_ITEM[] IS INITIAL.
    MESSAGE S000(OO) WITH '到货通知没有明细，不能保存' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.
  CASE 'X'.
    WHEN P4_X.
    WHEN OTHERS.
      READ TABLE IT_ITEM WITH KEY DEL = 'X'.
      IF SY-SUBRC EQ 0.
        LOOP AT IT_ITEM WHERE DEL NE 'X'.
          SUBRC = SUBRC + 1.
        ENDLOOP.
        IF SUBRC IS INITIAL.
          PERFORM CONFIRMACT(ZPUBFORM) USING '若要删除全部明细，则整单也将被删除，请确认!' CHANGING ANSWER.
          CHECK ANSWER = '1'.
          PERFORM DELALL.
          PERFORM GETDATA.
          MESSAGE I007.
          LEAVE TO SCREEN 0.
        ENDIF.
      ENDIF.
  ENDCASE.
  CASE SY-TCODE.
    WHEN TCODE5.
      IF WA_HEAD-BUDAT GT SY-DATUM.
        PERFORM INMSG(ZPUBFORM) TABLES RETURN
           USING 'OO' 'E' '000'
                 '过账日期不能大于当前日期'
                  '' '' ''.
      ENDIF.
  ENDCASE.
  CLEAR:IT_CHECKFIELD.
  IT_CHECKFIELD-TYPE = 'H'.
  IT_CHECKFIELD-FIELD = 'ZDHLX'.
  IT_CHECKFIELD-TEXT = '到货类型'.
  APPEND IT_CHECKFIELD.
  CLEAR:IT_CHECKFIELD.
  IT_CHECKFIELD-TYPE = 'H'.
  IT_CHECKFIELD-FIELD = 'ZTHFS'.
  IT_CHECKFIELD-TEXT = '提货方式'.
  APPEND IT_CHECKFIELD.
  CLEAR:IT_CHECKFIELD.
  IT_CHECKFIELD-TYPE = 'H'.
  IT_CHECKFIELD-FIELD = 'ZDHRQ'.
  IT_CHECKFIELD-TEXT = '到货日期'.
  APPEND IT_CHECKFIELD.
*检查必填
  CASE WA_HEAD-ZTHFS.
    WHEN 'ZT'.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZWLY'.
      IT_CHECKFIELD-TEXT = '物流员'.
      APPEND IT_CHECKFIELD.
      CASE WA_HEAD-ZDHLX.
        WHEN 'WWGD' OR 'WWHC' OR 'WWCL'.
        WHEN OTHERS.
          CLEAR:IT_CHECKFIELD.
          IT_CHECKFIELD-TYPE = 'H'.
          IT_CHECKFIELD-FIELD = 'ZCKBM'.
          IT_CHECKFIELD-TEXT = '仓库名称'.
          APPEND IT_CHECKFIELD.
          CLEAR:IT_CHECKFIELD.
          IT_CHECKFIELD-TYPE = 'H'.
          IT_CHECKFIELD-FIELD = 'ZCKDZ'.
          IT_CHECKFIELD-TEXT = '仓库地址'.
          APPEND IT_CHECKFIELD.
      ENDCASE.
  ENDCASE.
  CASE WA_HEAD-ZDHLX.
    WHEN 'WWGD' OR 'CGGD'.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZYSR'.
      IT_CHECKFIELD-TEXT = '项目现场验收人'.
      APPEND IT_CHECKFIELD.
  ENDCASE.
  CASE 'X'.
    WHEN P4_X.
      CASE WA_HEAD-ZDHLX.
        WHEN 'WWGD' OR 'WWHC'.
        WHEN OTHERS.
          CLEAR:IT_CHECKFIELD.
          IT_CHECKFIELD-TYPE = 'I'.
          IT_CHECKFIELD-FIELD = 'LGORT'.
          IT_CHECKFIELD-TEXT = '卸货仓库'.
          APPEND IT_CHECKFIELD.
      ENDCASE.
    WHEN P1_X.
  ENDCASE.
  CASE SY-TCODE.
    WHEN TCODE3.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZCH'.
      IT_CHECKFIELD-TEXT = '车号'.
      APPEND IT_CHECKFIELD.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZSJ'.
      IT_CHECKFIELD-TEXT = '司机'.
      APPEND IT_CHECKFIELD.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZSJDH'.
      IT_CHECKFIELD-TEXT = '司机电话'.
      APPEND IT_CHECKFIELD.
      CLEAR:IT_CHECKFIELD.
      IT_CHECKFIELD-TYPE = 'H'.
      IT_CHECKFIELD-FIELD = 'ZJSFS'.
      IT_CHECKFIELD-TEXT = '结算方式'.
      APPEND IT_CHECKFIELD.
      CASE WA_HEAD-ZJSFS.
        WHEN 'DJ'.
          CLEAR:IT_CHECKFIELD.
          IT_CHECKFIELD-TYPE = 'H'.
          IT_CHECKFIELD-FIELD = 'ZWLDJ'.
          IT_CHECKFIELD-TEXT = '物流单价'.
          APPEND IT_CHECKFIELD.
        WHEN 'ZC'.
          CLEAR:IT_CHECKFIELD.
          IT_CHECKFIELD-TYPE = 'H'.
          IT_CHECKFIELD-FIELD = 'ZYSJE'.
          IT_CHECKFIELD-TEXT = '运输金额'.
          APPEND IT_CHECKFIELD.
      ENDCASE.
  ENDCASE.


  PERFORM TRANSYSGS IN PROGRAM ZRSD202 CHANGING WA_HEAD-ZYSGS.
  CLEAR: SUBRC,IT_ZZBH[],IT_ZSMM206[].
  LOOP AT IT_ITEM WHERE DEL NE 'X'.
    CLEAR IT_ZZBH.
    IT_ZZBH-ZJH = IT_ITEM-ZZBH.
    IT_ZZBH-N = 1.
    COLLECT IT_ZZBH.
  ENDLOOP.
  DELETE IT_ZZBH WHERE ZJH IS INITIAL.
*检查自编号重复
  LOOP AT IT_ZZBH WHERE N GT 1.
    PERFORM INMSG(ZPUBFORM) TABLES RETURN
       USING 'ZMSG_GP' 'E' '060' IT_ZZBH-ZJH
              '' '' ''.
  ENDLOOP.
*检查填写的自编号
  CALL FUNCTION 'ZFM_CHECKUSE_BYJH'
    EXPORTING
      ATNAM  = 'Z01'
      TSKC   = 'X'
    TABLES
      INTAB  = IT_ZZBH
      OUTTAB = IT_ZSMM206.
  SORT IT_ZSMM206 BY Z01.
*明细数据的检查
*检查本次到货量
  LOOP AT IT_ITEM.
    TABIXC = SY-TABIX.
    CONDENSE TABIXC NO-GAPS.
    IF IT_ITEM-DEL NE 'X'.
*检查结算量和入库量一致
      CASE WA_HEAD-ZDHLX.
        WHEN 'WWCL'.
        WHEN OTHERS.
          IF IT_ITEM-RKDW = IT_ITEM-MEINS.
            IF IT_ITEM-ZJSL NE IT_ITEM-ZRKL.
              PERFORM INMSG(ZPUBFORM) TABLES RETURN
                 USING 'ZMSG_GP' 'E' '055' IT_ITEM-ZDHHH
                        '' '' ''.
            ENDIF.
          ENDIF.
      ENDCASE.

      CASE WA_HEAD-ZDHLX.
        WHEN 'WWCL'.
          IF IT_ITEM-ZZBH IS NOT INITIAL.
            READ TABLE IT_ZSMM206 WITH KEY Z01 = IT_ITEM-ZZBH BINARY SEARCH.
            IF SY-SUBRC EQ 0.
              SELECT SINGLE COUNT(*)
                FROM MSRD
                WHERE CHARG = IT_ZSMM206-CHARG.
              IF SY-SUBRC NE 0.
                SELECT SINGLE COUNT(*)
                  FROM MSLB
                  WHERE CHARG = IT_ZSMM206-CHARG.
                IF SY-SUBRC NE 0.
                  PERFORM INMSG(ZPUBFORM) TABLES RETURN
                     USING 'OO' 'E' '000' '请核对' IT_ITEM-ZDHHH
                            '行自编号' ''.
                ENDIF.
              ENDIF.
            ELSE.
              SELECT SINGLE COUNT(*)
                FROM MSRD
                WHERE CHARG = IT_ITEM-ZZBH.
              IF SY-SUBRC NE 0.
                SELECT SINGLE COUNT(*)
                  FROM MSLB
                  WHERE CHARG = IT_ITEM-ZZBH.
                IF SY-SUBRC NE 0.
                  PERFORM INMSG(ZPUBFORM) TABLES RETURN
                     USING 'OO' 'E' '000' '请核对' IT_ITEM-ZDHHH
                            '行自编号' ''.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.
*钢卷类审核人
      IF IT_ITEM-ZJBS NE 'X'.
        CASE WA_HEAD-ZDHLX.
          WHEN 'CGHC' OR 'WWHC'.
            CASE IT_ITEM-WERKS.
              WHEN '3000' OR '3060'.
                CASE IT_ITEM-MATKL.
                  WHEN 'E0201' OR 'E0202' OR 'E0203'
                    OR 'E0204' OR 'E0205' OR 'E0206' OR 'E0207'
                    OR 'E0212' OR 'E0216' OR 'E0217'.
                    CLEAR:IT_CHECKFIELD.
                    IT_CHECKFIELD-TYPE = 'H'.
                    IT_CHECKFIELD-FIELD = 'ZSHR'.
                    IT_CHECKFIELD-TEXT = '审核人'.
                    COLLECT IT_CHECKFIELD.
                ENDCASE.
            ENDCASE.
          WHEN 'CGGD'.
            CASE IT_ITEM-WERKS.
              WHEN '3002' OR '3012'.
                CLEAR:IT_CHECKFIELD.
                IT_CHECKFIELD-TYPE = 'H'.
                IT_CHECKFIELD-FIELD = 'ZSHR'.
                IT_CHECKFIELD-TEXT = '审核人'.
                COLLECT IT_CHECKFIELD.
            ENDCASE.
          WHEN 'WWCL'.
        ENDCASE.
        CASE 'X'.
          WHEN P1_X.
            CASE WA_HEAD-ZDHLX.
              WHEN 'WWHC'.
              WHEN 'WWCL'.
                IF IT_ITEM-ZJBS = 'X'.
                  CLEAR:IT_CHECKFIELD.
                  IT_CHECKFIELD-TYPE = 'I'.
                  IT_CHECKFIELD-FIELD = 'ZDHL'.
                  IT_CHECKFIELD-TEXT = '到货量'.
                  APPEND IT_CHECKFIELD.
                ENDIF.
              WHEN OTHERS.
                CLEAR:IT_CHECKFIELD.
                IT_CHECKFIELD-TYPE = 'I'.
                IT_CHECKFIELD-FIELD = 'ZDHL'.
                IT_CHECKFIELD-TEXT = '到货量'.
                APPEND IT_CHECKFIELD.
            ENDCASE.
          WHEN P4_X .
            CLEAR:IT_CHECKFIELD.
            IT_CHECKFIELD-TYPE = 'I'.
            IT_CHECKFIELD-FIELD = 'ZJSL'.
            IT_CHECKFIELD-TEXT = '结算量'.
            APPEND IT_CHECKFIELD.
            CASE WA_HEAD-ZDHLX.
              WHEN 'WWGD' OR 'WWHC' OR 'WWCL'.
              WHEN OTHERS.
*入库量必填
                CLEAR:IT_CHECKFIELD.
                IT_CHECKFIELD-TYPE = 'I'.
                IT_CHECKFIELD-FIELD = 'ZRKL'.
                IT_CHECKFIELD-TEXT = '入库量'.
                APPEND IT_CHECKFIELD.
            ENDCASE.
        ENDCASE.

*检查差额
        IF IT_ITEM-ZDHL IS NOT INITIAL.
          IF  IT_ITEM-ZDHL
            GT ( IT_ITEM-MENGE * ( 1 + CE ) ).
            PERFORM INMSG(ZPUBFORM) TABLES RETURN
               USING 'ZMSG_GP' 'E' '043' IT_ITEM-ZDHHH
                      BLC '' ''.
          ENDIF.
        ENDIF.
      ENDIF.
      CASE WA_HEAD-ZDHLX.
        WHEN 'WWCL'.
          IF IT_ITEM-ZJBS = 'X'.
            IF IT_ITEM-ZDHL IS INITIAL.
              PERFORM INMSG(ZPUBFORM) TABLES RETURN
                USING 'ZMSG_GP' 'E' '026' IT_ITEM-ZDHHH
                      '' '' ''.
            ENDIF.
          ENDIF.
        WHEN 'WWHC' OR 'WWGD'.
          IF IT_ITEM-ZJBS NE 'X'.
            IF IT_ITEM-ZDHL IS INITIAL.
              PERFORM INMSG(ZPUBFORM) TABLES RETURN
                USING 'ZMSG_GP' 'E' '026' IT_ITEM-ZDHHH
                      '' '' ''.
            ENDIF.
          ELSE.
            CASE 'X'.
              WHEN P4_X.
                IF IT_ITEM-ZXHPC IS INITIAL.
                  PERFORM INMSG(ZPUBFORM) TABLES RETURN
                    USING 'ZMSG_GP' 'E' '062' IT_ITEM-ZDHHH
                          '' '' ''.
                ENDIF.
                IF IT_ITEM-ZXHL IS INITIAL.
                  PERFORM INMSG(ZPUBFORM) TABLES RETURN
                    USING 'ZMSG_GP' 'E' '063' IT_ITEM-ZDHHH
                          '消耗量' '' ''.
                ENDIF.
            ENDCASE.
          ENDIF.
      ENDCASE.
*检查库存地
      IF IT_ITEM-LGORT IS NOT INITIAL.
        READ TABLE IT_T001L WITH KEY WERKS = IT_ITEM-WERKS
                                     LGORT = IT_ITEM-LGORT
                                     BINARY SEARCH.
        IF SY-SUBRC NE 0.
          PERFORM INMSG(ZPUBFORM) TABLES RETURN
            USING 'ZMSG_GP' 'E' '054' IT_ITEM-LGORT
                  IT_ITEM-WERKS '' ''.
        ENDIF.
      ENDIF.
    ELSE.
*检查删除原行前保证拆分行删除
      IF IT_ITEM-UEPOS IS INITIAL.
*过账时不能删除原行
        IF SY-TCODE = TCODE5.
          PERFORM INMSG(ZPUBFORM) TABLES RETURN
             USING 'OO' 'E' '000'
                   '入库时原行不能删除'
                   '' '' ''.
        ENDIF.
        LOOP AT IT_ITEM INTO WA_ITEM WHERE UEPOS = IT_ITEM-ZDHHH
                                       AND DEL NE 'X'.
          EXIT.
        ENDLOOP.
        IF SY-SUBRC EQ 0.
          PERFORM INMSG(ZPUBFORM) TABLES RETURN
             USING 'ZMSG_GP' 'E' '036' WA_ITEM-ZDHHH
                    IT_ITEM-ZDHHH '' ''.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.
  IF WA_HEAD-ZCKBM IS NOT INITIAL
    AND WA_HEAD-ZCKDZ IS NOT INITIAL.
    SELECT SINGLE COUNT(*)
      FROM ZTMM216
      WHERE ZCKBM = WA_HEAD-ZCKBM
      AND   ZCKDZ = WA_HEAD-ZCKDZ.
    IF SY-SUBRC NE 0.
      PERFORM INMSG(ZPUBFORM) TABLES RETURN
        USING 'ZMSG_GP' 'E' '010' ''
              '' '' ''.
    ENDIF.
  ENDIF.
  IF WA_HEAD-ZYSGS IS NOT INITIAL.
    SELECT SINGLE COUNT(*)
      FROM LFA1
      WHERE LIFNR = WA_HEAD-ZYSGS.
    IF SY-SUBRC NE 0.
      PERFORM INMSG(ZPUBFORM) TABLES RETURN
        USING 'ZMSG_GP' 'E' '034' ''
              '' '' ''.
    ENDIF.
  ENDIF.
  IF WA_HEAD-ZYSZRR IS NOT INITIAL.
    SELECT SINGLE COUNT(*)
      FROM ZTMM212
      WHERE ZYSZRR = WA_HEAD-ZYSZRR.
    IF SY-SUBRC NE 0.
      PERFORM INMSG(ZPUBFORM) TABLES RETURN
        USING 'ZMSG_GP' 'E' '014' ''
              '' '' ''.
    ENDIF.
  ENDIF.
  PERFORM CHECKBP TABLES RETURN USING WA_HEAD-ZWLY '物流员'.
  PERFORM CHECKBP TABLES RETURN USING WA_HEAD-ZSHR '审核人'.
  PERFORM CHECKBP TABLES RETURN USING WA_HEAD-ZYSR '验收人 '.

*数据的基础检查
  LOOP AT IT_CHECKFIELD.
    CASE IT_CHECKFIELD-TYPE.
      WHEN 'H'.
        ASSIGN COMPONENT IT_CHECKFIELD-FIELD OF STRUCTURE WA_HEAD TO <FS1>.
        IF SY-SUBRC EQ 0.
          IF <FS1> IS INITIAL.
            PERFORM INMSG(ZPUBFORM) TABLES RETURN
              USING 'ZMSG_GP' 'E' '009' IT_CHECKFIELD-TEXT
                    '' '' ''.
          ENDIF.
        ENDIF.
      WHEN 'I'.
        LOOP AT IT_ITEM.
          ASSIGN COMPONENT IT_CHECKFIELD-FIELD OF STRUCTURE IT_ITEM TO <FS1>.
          IF SY-SUBRC EQ 0.
            IF IT_ITEM-ZJBS = 'X'.
              CASE IT_CHECKFIELD-FIELD.
                WHEN 'ZJSL'.
                  CONTINUE.
              ENDCASE.
            ENDIF.
            IF <FS1> IS INITIAL.
              PERFORM INMSG(ZPUBFORM) TABLES RETURN
                USING 'ZMSG_GP' 'E' '009' IT_CHECKFIELD-TEXT
                      '' '' ''.
            ENDIF.
          ENDIF.
        ENDLOOP.
    ENDCASE.
  ENDLOOP.


  IF RETURN[] IS NOT INITIAL.
    PERFORM SHOWMSG(ZPUBFORM) TABLES RETURN.
    EXIT.
  ENDIF.
*计算行项目数据
  PERFORM CALZTMM202 TABLES IT_ITEM USING 'ZBZRQ'.
  PERFORM CALZTMM202 TABLES IT_ITEM USING 'ZJSL'.
*保存
  IF WA_HEAD-ZDHDH IS INITIAL.
    CALL FUNCTION 'ZNUMS_UPDATE'
      EXPORTING
*       REPID    = SY-REPID
*       WERKS    =
*       TCODE    = SY-TCODE
        FLAG     = 'D'
*       INITNUM  =
        WEISHU   = 3
      IMPORTING
        ZNUMBER  = ZNUMBER
      EXCEPTIONS
        OVERFLOW = 1
        OTHERS   = 2.
    CONCATENATE 'DHTZ' SY-DATUM+2(6) ZNUMBER INTO WA_HEAD-ZDHDH.
    WA_HEAD-ZDHZT = 'A'.
    WA_HEAD-UPDKZ = 'I'.
    WA_HEAD-ERDAT = SY-DATUM.
    WA_HEAD-ERNAM = SY-UZEIT.
    WA_HEAD-ERTIM = SY-UNAME.
  ELSE.
  ENDIF.
  CLEAR:IT_ZTMM201.
  SELECT SINGLE COUNT(*)
    FROM ZTMM201
    WHERE ZDHDH = WA_HEAD-ZDHDH.
  IF SY-SUBRC EQ 0.
    WA_HEAD-UPDKZ = 'U'.
  ENDIF.
  MOVE-CORRESPONDING WA_HEAD TO IT_ZTMM201.
  APPEND IT_ZTMM201.

  LOOP AT IT_ITEM.
    CLEAR IT_ZTMM202.
    MOVE-CORRESPONDING IT_ITEM TO IT_ZTMM202.
    IT_ZTMM202-ZDHDH = WA_HEAD-ZDHDH.
    IF IT_ITEM-UPDKZ IS INITIAL.
      IT_ZTMM202-UPDKZ = 'I'.
    ELSE.
      CASE IT_ITEM-UPDKZ.
        WHEN 'I' OR 'U'.
          IT_ZTMM202-UPDKZ = 'U'.
        WHEN ''.
          IT_ZTMM202-UPDKZ = 'I'.
      ENDCASE.
    ENDIF.
    IT_ITEM-UPDKZ = IT_ZTMM202-UPDKZ.
    APPEND IT_ZTMM202.
    MODIFY IT_ITEM.
  ENDLOOP.
*分摊运费
  PERFORM FTYSJE TABLES IT_ZTMM202
    USING IT_ZTMM201.
  CALL FUNCTION 'ZFM_UPDDHDH'
    IMPORTING
      RTMSG     = MSG
    TABLES
      I_ZTMM201 = IT_ZTMM201
      I_ZTMM202 = IT_ZTMM202.

  IF MSG+0(1) = 'S'.
    PERFORM CHGSTATUS USING WA_HEAD-ZDHDH 'BUT04'
          CHANGING MSG.
*推送钉钉
    IF WA_HEAD-UPDKZ = 'I'
      AND P_OKCODE = 'BUT04'."保存引起的状态更改不推送DD
      PERFORM PUSHDD USING WA_HEAD-ZDHDH P_OKCODE.
    ENDIF.
*更新长文本
*将当前停留文本更新
    PERFORM SCREEN2TAB USING WA_HEAD-TDID.
    LOOP AT IT_LIST2.
      REFRESH T_TEXT.
      LOOP AT IT_TEXT WHERE TDID = IT_LIST2-ID.
        T_TEXT-TEXT = IT_TEXT-TEXT.
        APPEND T_TEXT.
      ENDLOOP.
      WAIT UP TO '0.5' SECONDS.
      CALL FUNCTION 'ZFM_DEALLONGTEXT'
        EXPORTING
          INTYPE = 'I'
          TDID   = IT_LIST2-ID
          SAPNO  = WA_HEAD-ZDHDH
          SAPMK  = 'DHTZ'
        TABLES
          T_TEXT = T_TEXT.
    ENDLOOP.
    LOCK 'X' WA_HEAD-ZDHDH.
    CASE P_OKCODE.
      WHEN 'BUT04'.
        PERFORM GETDATA.
        MESSAGE I011 WITH WA_HEAD-ZDHDH.
        CASE 'X'.
          WHEN P1_X.
          WHEN OTHERS.
            LEAVE TO SCREEN 0.
        ENDCASE.
    ENDCASE.

*    PERFORM GETDATA.
  ELSE.
    ROLLBACK WORK .
    MESSAGE S000(OO) WITH '更新失败' DISPLAY LIKE 'E'.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Module  EDITTEXT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EDITTEXT INPUT.
*若TDID发生变化
  IF TDID NE WA_HEAD-TDID
    AND TDID IS NOT INITIAL.
    PERFORM SCREEN2TAB  USING TDID.
  ENDIF.
  PERFORM TAB2SCREEN USING WA_HEAD-TDID.
  TDID = WA_HEAD-TDID.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form EDITCONTAINER
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM EDITCONTAINER .
  IF GO_EDITOR_CONTAINER IS INITIAL.
    CREATE OBJECT GO_EDITOR_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONT1'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    CREATE OBJECT GO_EDITOR
      EXPORTING
        PARENT                     = GO_EDITOR_CONTAINER
        WORDWRAP_MODE              = CL_GUI_TEXTEDIT=>WORDWRAP_AT_FIXED_POSITION
        WORDWRAP_POSITION          = '100'
        WORDWRAP_TO_LINEBREAK_MODE = CL_GUI_TEXTEDIT=>TRUE.
  ENDIF.
  CALL METHOD GO_EDITOR->SET_TOOLBAR_MODE
    EXPORTING
      TOOLBAR_MODE = 0.
  CASE SY-TCODE.
    WHEN TCODE1.
      CASE 'X'.
        WHEN P1_X OR P2_X.
        WHEN OTHERS.
          CALL METHOD GO_EDITOR->SET_READONLY_MODE
            EXPORTING
              READONLY_MODE = 1.
      ENDCASE.
    WHEN OTHERS.
      CALL METHOD GO_EDITOR->SET_READONLY_MODE
        EXPORTING
          READONLY_MODE = 1.
  ENDCASE.


  CALL METHOD GO_EDITOR->SET_STATUSBAR_MODE
    EXPORTING
      STATUSBAR_MODE = 0.

  PERFORM CLEAR_TEXT.
  CL_GUI_CONTROL=>SET_FOCUS( GO_EDITOR ).
  IF WA_HEAD-TDID IS NOT INITIAL.
*    PERFORM SCREEN2TAB USING WA_HEAD-TDID.
    PERFORM TAB2SCREEN USING WA_HEAD-TDID.
  ENDIF.
ENDFORM.
FORM CLEAR_TEXT.
*  REFRESH:TEXTTABLE.
  CALL METHOD GO_EDITOR->SET_TEXT_AS_STREAM
    EXPORTING
      TEXT            = TEXTTABLE[]
    EXCEPTIONS
      ERROR_DP        = 1
      ERROR_DP_CREATE = 2
      OTHERS          = 3.
  CALL METHOD CL_GUI_CFW=>FLUSH.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form MODIFY9000
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM MODIFY9000 .
  DATA:IT_EXCODE LIKE TABLE OF SY-UCOMM WITH HEADER LINE.
  CLEAR IT_EXCODE[].
  CASE SY-TCODE.
    WHEN TCODE1.
      APPEND 'BUT11' TO IT_EXCODE.
      APPEND 'BUT12' TO IT_EXCODE.
      CASE 'X'.
        WHEN P1_X.
*          APPEND 'BUT05' TO IT_EXCODE.
          APPEND 'BUT06' TO IT_EXCODE.
          APPEND 'BUT07' TO IT_EXCODE.
          APPEND 'BUT08' TO IT_EXCODE.
          APPEND 'BUT14' TO IT_EXCODE.
          APPEND 'BUT15' TO IT_EXCODE.
        WHEN P2_X.
          APPEND 'BUT06' TO IT_EXCODE.
          APPEND 'BUT07' TO IT_EXCODE.
          APPEND 'BUT09' TO IT_EXCODE.
        WHEN P3_X.
          APPEND 'BUT04' TO IT_EXCODE.
          APPEND 'BUT05' TO IT_EXCODE.
          APPEND 'BUT06' TO IT_EXCODE.
          APPEND 'BUT07' TO IT_EXCODE.
          APPEND 'BUT08' TO IT_EXCODE.
          APPEND 'BUT09' TO IT_EXCODE.
          APPEND 'BUT14' TO IT_EXCODE.
          APPEND 'BUT15' TO IT_EXCODE.
      ENDCASE.
      CASE 'X'.
        WHEN P1_X.
          LOOP AT SCREEN.
            CASE SCREEN-GROUP1.
              WHEN 'A1' OR 'A3'.
                SCREEN-INPUT = 1.
            ENDCASE.
            MODIFY SCREEN.
          ENDLOOP.
        WHEN P2_X.
          LOOP AT SCREEN.
            CASE SCREEN-GROUP1.
              WHEN 'A1' OR 'A4'.
                SCREEN-INPUT = 1.
              WHEN 'A3'.
                CASE WA_HEAD-ZDHZT.
                  WHEN 'A' OR ''.
                    SCREEN-INPUT = 1.
                ENDCASE.
            ENDCASE.
            MODIFY SCREEN.
          ENDLOOP.
      ENDCASE.
    WHEN TCODE2 OR TCODE3.
      APPEND 'BUT08' TO IT_EXCODE.
      APPEND 'BUT09' TO IT_EXCODE.
      APPEND 'BUT11' TO IT_EXCODE.
      APPEND 'BUT12' TO IT_EXCODE.
      APPEND 'BUT14' TO IT_EXCODE.
      APPEND 'BUT15' TO IT_EXCODE.
      IF SY-TCODE = TCODE3.
        LOOP AT SCREEN.
          CASE SCREEN-GROUP2.
            WHEN 'B1'.
              SCREEN-INPUT = 1.
          ENDCASE.
          CASE SCREEN-GROUP1.
            WHEN 'A4'.
              SCREEN-INPUT = 1.
          ENDCASE.
          MODIFY SCREEN.
        ENDLOOP.
      ENDIF.
    WHEN TCODE5.
      APPEND 'BUT05' TO IT_EXCODE.
      APPEND 'BUT08' TO IT_EXCODE.
      APPEND 'BUT09' TO IT_EXCODE.
      APPEND 'BUT15' TO IT_EXCODE.
      CASE WA_HEAD-ZDHZT.
        WHEN 'E'.
          APPEND 'BUT06' TO IT_EXCODE.
          APPEND 'BUT07' TO IT_EXCODE.
          APPEND 'BUT11' TO IT_EXCODE.
          APPEND 'BUT04' TO IT_EXCODE.
          APPEND 'BUT14' TO IT_EXCODE.
        WHEN 'D'.
          APPEND 'BUT12' TO IT_EXCODE.
      ENDCASE.
      LOOP AT SCREEN.
        CASE SCREEN-GROUP1.
          WHEN 'A2'.
            SCREEN-INPUT = 1.
            SCREEN-REQUIRED = 2.
        ENDCASE.
        MODIFY SCREEN.
      ENDLOOP.
  ENDCASE.
  SET PF-STATUS '9000' EXCLUDING IT_EXCODE.
* SET TITLEBAR 'xxx'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SETLIST
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM SETLIST .
  DATA:IT_LIST1 TYPE TABLE OF TY_LIST WITH HEADER LINE.
  CLEAR:IT_LIST1.
  SELECT *
    FROM ZTMM215.
    CLEAR IT_LIST1.
    IT_LIST1-ID = ZTMM215-ZCKBM.
    IT_LIST1-VALUE = ZTMM215-ZCKMC.
    APPEND IT_LIST1.
  ENDSELECT.
  SORT IT_LIST1 BY ID.

*  PERFORM ITABTOLIST(ZPUBFORM) TABLES IT_LIST1 USING 'WA_HEAD-ZCKBM'.
  PERFORM ITABTOLIST(ZPUBFORM) TABLES IT_LIST2 USING 'WA_HEAD-TDID'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  ZYSGSF4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZYSGSF4 INPUT.

*  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST' "调用函数
*    EXPORTING
*      RETFIELD         = 'ZYSGS'  "搜索帮助内表要输出的的帮助字段名，注：要大写
*      DYNPPROG         = SY-REPID
*      DYNPNR           = SY-DYNNR
*      DYNPROFIELD      = 'WA_HEAD-ZYSGS' "屏幕字段
*      VALUE_ORG        = 'S'
*      CALLBACK_PROGRAM = SY-REPID
*      CALLBACK_FORM    = 'CB_FORM'
*    TABLES
*      VALUE_TAB        = IT_ZTMM212 "存储搜索帮助内容的内表
**      RETURN_TAB       = RETURN_TAB
**      FIELD_TAB        = FIELD_TAB
*    EXCEPTIONS
*      PARAMETER_ERROR  = 1
*      NO_VALUES_FOUND  = 2
*      OTHERS           = 3.
*  IF SY-SUBRC <> 0.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*  PERFORM F4HELPN(ZPUBFORM) TABLES IT_ZTMM212 USING 'ZYSGS' 'WA_HEAD-ZYSGS'.
ENDMODULE.
*FORM CB_FORM TABLES RECORD_TAB STRUCTURE SEAHLPRES
*           CHANGING SHLP TYPE SHLP_DESCR_T
*                    CALLCONTROL LIKE DDSHF4CTRL.
*  DATA: INTERFACE LIKE LINE OF SHLP-INTERFACE.
*  CLEAR:INTERFACE.
*  READ TABLE SHLP-INTERFACE INTO INTERFACE INDEX 1.
**选中后自动带出(SHLPFIELD字段结构F0001)
**  INTERFACE-SHLPFIELD+4(1) = '3'."F0001
**  INTERFACE-VALFIELD = 'ITAB-ZJUANH'.
**  APPEND INTERFACE TO SHLP-INTERFACE.
*  INTERFACE-SHLPFIELD+4(1) = '3'.
*  INTERFACE-VALFIELD = 'WA_HEAD-ZYSZRR'.
*  APPEND INTERFACE TO SHLP-INTERFACE.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  ZCKDZF4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZCKDZF4 INPUT.
  PERFORM F4HELPN(ZPUBFORM) TABLES IT_ZVTMM215 USING 'ZCKDZ' 'WA_HEAD-ZCKDZ'.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form USER_COMMAND_CLS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM USER_COMMAND_CLS  USING    P_E_UCOMM.
  DATA:BEGIN OF IT_CHECK OCCURS 0,
         FIELD TYPE CHAR30,
         TEXT  TYPE CHAR30,
       END OF IT_CHECK.
  DATA:IT_ITEMA LIKE TABLE OF IT_ITEM WITH HEADER LINE.
  DATA:ZDHHH1 TYPE ZTMM202-ZDHHH.
  REFRESH:IT_KNUMV,IT_EBELN,IT_BANFN,
        IT_MATNR,IT_LIFNR,IT_ITEMA,
        FIELDCATEX,IT_UPLOAD,RETURN,
        IT_CHECK,IT_ZDHHH.
  CLEAR:NUM.
  CASE P_E_UCOMM.
    WHEN 'UPLOAD'.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'EBELN'.
      IT_CHECK-TEXT = '采购订单'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'EBELP'.
      IT_CHECK-TEXT = '采购订单行项目'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'ZJSL'.
      IT_CHECK-TEXT = '结算量'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'ZRKL'.
      IT_CHECK-TEXT = '入库量'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'RKDW'.
      IT_CHECK-TEXT = '入库单位'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'ZJH'.
      IT_CHECK-TEXT = '卷号'.
      APPEND IT_CHECK.
      CLEAR IT_CHECK.
      IT_CHECK-FIELD = 'LGORT'.
      IT_CHECK-TEXT = '卸货仓库'.
      APPEND IT_CHECK.
      PERFORM CONFIRMACT(ZPUBFORM) USING '请确认已经将数据复制到剪切板' CHANGING ANSWER.
      CHECK ANSWER = '1'.
      PERFORM CLIPTOITAB(ZPUBFORM) TABLES IT_UPLOAD.
      IF IT_UPLOAD[] IS INITIAL.
        MESSAGE S000(OO) WITH '上传无数据' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
*检查上传数据并进行拆分
      LOOP AT IT_UPLOAD.
        CLEAR:IT_UPLOAD-ZDHHH,IT_ZDHHH.
        LOOP AT IT_CHECK.
          ASSIGN COMPONENT IT_CHECK-FIELD OF STRUCTURE IT_UPLOAD TO <FS>.
          IF SY-SUBRC EQ 0.
            IF <FS> IS INITIAL.
              PERFORM INMSG(ZPUBFORM) TABLES RETURN
                USING 'ZMSG_GP' 'E' '009' IT_CHECK-TEXT
                      '' '' ''.
            ENDIF.
          ENDIF.
        ENDLOOP.
        LOOP AT IT_ITEM WHERE EBELN = IT_UPLOAD-EBELN
                          AND EBELP = IT_UPLOAD-EBELP
                          AND UEPOS IS INITIAL.
          EXIT.
        ENDLOOP.
        IF SY-SUBRC NE 0.
          PERFORM INMSG(ZPUBFORM) TABLES RETURN
            USING 'ZMSG_GP' 'E' '053' IT_UPLOAD-EBELN
                  IT_UPLOAD-EBELP '' ''.
        ELSE.
          IT_UPLOAD-ZDHHH = IT_ITEM-ZDHHH.
          IT_ZDHHH-ZDHHH = IT_ITEM-ZDHHH.
          COLLECT IT_ZDHHH.
        ENDIF.
        MODIFY IT_UPLOAD.
      ENDLOOP.
      IF RETURN[] IS NOT INITIAL.
        PERFORM SHOWMSG(ZPUBFORM) TABLES RETURN.
        EXIT.
      ENDIF.
*进行拆分
      CLEAR:ZDHHH.
      IT_ITEMA[] = IT_ITEM[].
      DELETE IT_ITEMA WHERE UEPOS IS INITIAL."删掉原行
*找到行对应的最大行号
      SORT IT_ITEMA BY UEPOS ZDHHH DESCENDING.
      DELETE ADJACENT DUPLICATES FROM IT_ITEMA
      COMPARING UEPOS.
      LOOP AT IT_ZDHHH .
        CLEAR:ZDHHH,WA_ITEM,IT_ITEMA,TABIX.
*最大行号
        READ TABLE IT_ITEMA WITH KEY UEPOS = IT_ZDHHH-ZDHHH.
        IF IT_ITEMA-ZDHHH IS INITIAL.
          IT_ITEMA-ZDHHH = IT_ZDHHH-ZDHHH.
        ENDIF.
        ZDHHH = IT_ITEMA-ZDHHH.
        READ TABLE IT_ITEM INTO WA_ITEM WITH KEY ZDHHH = IT_ZDHHH-ZDHHH.
*拆分后删掉界面上的原行，将上传数据中一条作为原行
        DELETE IT_ITEM WHERE ZDHHH = IT_ZDHHH-ZDHHH.
        LOOP AT IT_UPLOAD WHERE ZDHHH = IT_ZDHHH-ZDHHH.
          CLEAR:IT_ITEM.
          TABIX = TABIX + 1.
          IF TABIX = 1.
            IT_ITEM = WA_ITEM.
            MOVE-CORRESPONDING IT_UPLOAD TO IT_ITEM.
            CLEAR:IT_ITEM-UPDKZ,IT_ITEM-CHBOX,IT_ITEM-UEPOS.
            IT_ITEM-UPDKZ = 'U'.
            APPEND IT_ITEM.
          ELSE.
            ADD 1 TO ZDHHH.
            IT_ITEM = WA_ITEM.
            MOVE-CORRESPONDING IT_UPLOAD TO IT_ITEM.
            IT_ITEM-ZDHHH = ZDHHH.
            IT_ITEM-UEPOS = WA_ITEM-ZDHHH.
            CLEAR:IT_ITEM-UPDKZ,IT_ITEM-CHBOX.
            APPEND IT_ITEM.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
*计算出米率
      PERFORM CALZTMM202 TABLES IT_ITEM USING 'ZJSL'.
      SORT IT_ITEM BY ZDHHH UEPOS.
      MESSAGE S007.
    WHEN 'TEMP'.
*构建导出字段
      PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCATEX USING:
'' '采购凭证' '' '' '' '',
'' '行项目号' '' '' '' '',
'' '结算量' '' '' '' '',
'' '入库量' '' '' '' '',
'' '不合格量' '' '' '' '',
'' '入库单位' '' '' '' '',
'' '库位' '' '' '' '',
'' '卷号' '' '' '' '',
'' '卸货仓库' '' '' '' '',
'' '自编号' '' '' '' '',
'' '备注' '' '' '' ''.
      PERFORM ITABSTRUCTOCLIP(ZPUBFORM) USING FIELDCATEX 0 0.
    WHEN 'ZCF'."拆分
      LOOP AT IT_ITEM INTO WA_ITEM WHERE CHBOX = 'X'
                                      AND DEL NE 'X'.
        IF WA_ITEM-UEPOS IS INITIAL.
          NUM = NUM + 1.
        ENDIF.
      ENDLOOP.
      IF NUM NE 1.
        MESSAGE S000(OO) WITH '请选择未删除的原行进行拆分' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      CLEAR:IT_ITEM, IT_ITEMA.
      IT_ITEMA[] = IT_ITEM[].
      DELETE IT_ITEMA WHERE UEPOS NE WA_ITEM-ZDHHH.
      SORT IT_ITEMA BY ZDHHH DESCENDING.
      READ TABLE IT_ITEMA INDEX 1.
      IF IT_ITEMA-ZDHHH IS INITIAL.
        IT_ITEMA-ZDHHH = WA_ITEM-ZDHHH.
      ENDIF.
*判断拆分的最大行号
      IF WA_HEAD-ZDHDH IS INITIAL.
        IT_ITEM = WA_ITEM.
        CLEAR:IT_ITEM-CHBOX.
        IT_ITEM-ZDHHH = IT_ITEMA-ZDHHH + 1.
        IT_ITEM-UEPOS = WA_ITEM-ZDHHH.
        CLEAR:IT_ITEM-UPDKZ.
        IT_ITEM-ZSFHG = 'X'.
        APPEND IT_ITEM.
      ELSE.
        SELECT SINGLE MAX( ZDHHH )
          INTO ZDHHH
          FROM ZTMM202
          WHERE ZDHDH = WA_HEAD-ZDHDH
          AND   UEPOS = WA_ITEM-ZDHHH.
        IF ZDHHH LT IT_ITEMA-ZDHHH.
        ELSE.
          IT_ITEMA-ZDHHH = ZDHHH.
        ENDIF.
        IT_ITEM = WA_ITEM.
        CLEAR:IT_ITEM-CHBOX.
        IT_ITEM-ZDHHH = IT_ITEMA-ZDHHH + 1.
        IT_ITEM-UEPOS = WA_ITEM-ZDHHH.
        CLEAR:IT_ITEM-UPDKZ.
        IT_ITEM-ZSFHG = 'X'.
        APPEND IT_ITEM.
      ENDIF.
      LOOP AT IT_ITEM.
        IT_ITEM-CHBOX = ''.
        MODIFY IT_ITEM TRANSPORTING CHBOX.
      ENDLOOP.
      SORT IT_ITEM BY ZDHHH UEPOS.
      CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
        EXPORTING
          NEW_CODE = 'ITEMCHG'.
    WHEN 'ADD'."添加明细
      REFRESH:ITAB1A,IT_ITEMA.
      PERFORM GETPOINFO TABLES ITAB1A USING '2'.
*      IT_ITEMA[] = IT_ITEM[].
*      SORT IT_ITEMA BY EBELN EBELP.
      SORT ITAB1A BY EBELN EBELP.
      LOOP AT IT_ITEM.
        DELETE ITAB1A WHERE EBELN = IT_ITEM-EBELN
                        AND EBELP = IT_ITEM-EBELP.
      ENDLOOP.
      IF ITAB1A[] IS INITIAL.
        MESSAGE S005 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      LOOP AT ITAB1A.
        CLEAR:IT_KNUMV,IT_EBELN,IT_BANFN,
        IT_MATNR,IT_LIFNR.
        IT_EBELN-EBELN = ITAB1A-EBELN.
        IT_KNUMV-KNUMV = ITAB1A-KNUMV.
        IT_KNUMV-POSNR = ITAB1A-EBELP.
        IT_KNUMV-EBELP = ITAB1A-EBELP.
        IT_BANFN-BANFN = ITAB1A-BANFN.
        IT_LIFNR-LIFNR = ITAB1A-LIFNR.
        IT_MATNR-MATNR = ITAB1A-MATNR.
        COLLECT:IT_BANFN, IT_KNUMV,IT_MATNR,IT_LIFNR.
      ENDLOOP.
      PERFORM GETPUBDATA.
      LOOP AT ITAB1A.
        PERFORM FILLDATA CHANGING ITAB1A.
*物料长描述
        PERFORM GETLONGTEXT(ZPUBFORM)
        USING 'GRUN' ITAB1A-MATNR 'MATERIAL'
              CHANGING ITAB1A-ZWLCMS.
        MODIFY ITAB1A.
      ENDLOOP.
*填写FIELDCAT
      CLEAR:IT_FIELDCAT1.
      PERFORM FILLFIELDCAT TABLES IT_FIELDCAT1 USING:
  'CHBOX1' '选择' '' ''.
      LOOP AT FIELDCAT1 INTO WA_FIELD.
        PERFORM FILLFIELDCAT TABLES IT_FIELDCAT1
          USING WA_FIELD-FIELDNAME WA_FIELD-SELTEXT_L '' ''.
      ENDLOOP.
      LOOP AT IT_FIELDCAT1 INTO WA_FIELDCAT.
        CLEAR:WA_FIELDCAT-EDIT.
        MODIFY IT_FIELDCAT1 FROM WA_FIELDCAT.
      ENDLOOP.
*添加界面
      CALL SCREEN 9001
      STARTING AT 40 5 ENDING AT 180 25.
    WHEN 'DEL'.
*已经有的行和新加行
      CLEAR:WA_ITEM, IT_ITEM,ANSWER.
      READ TABLE IT_ITEM WITH KEY CHBOX  = 'X'.
      IF SY-SUBRC NE 0.
        MESSAGE S003 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      CASE SY-TCODE.
        WHEN TCODE5.
          LOOP AT IT_ITEM WHERE CHBOX = 'X'.
            IF IT_ITEM-UEPOS IS INITIAL.
              WA_ITEM = IT_ITEM.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF WA_ITEM IS NOT INITIAL.
            MESSAGE S000(OO) WITH '入库时原行不能删除' DISPLAY LIKE 'E'.
            EXIT.
          ENDIF.
      ENDCASE.
      LOOP AT IT_ITEM WHERE CHBOX = 'X'
                        AND UPDKZ IS NOT INITIAL .
        EXIT.
      ENDLOOP.
      IF SY-SUBRC = 0.
        PERFORM CONFIRMACT(ZPUBFORM) USING '' CHANGING ANSWER.
        CHECK ANSWER = '1'.
      ENDIF.
      LOOP AT IT_ITEM WHERE CHBOX = 'X'.
        IF IT_ITEM-UPDKZ IS INITIAL.
          DELETE TABLE IT_ITEM.
        ELSE.
          IT_ITEM-DEL = 'X'.
          MODIFY IT_ITEM TRANSPORTING DEL.
        ENDIF.
      ENDLOOP.
      PERFORM CALZZL USING 'OOCHG'.
      CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
        EXPORTING
          NEW_CODE = 'ITEMCHG'.
      MESSAGE S007.
    WHEN 'UNDEL'."撤销删除
      READ TABLE IT_ITEM WITH KEY CHBOX  = 'X'.
      IF SY-SUBRC NE 0.
        MESSAGE S003 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      LOOP AT IT_ITEM WHERE CHBOX = 'X'.
        IT_ITEM-DEL = ''.
        MODIFY IT_ITEM TRANSPORTING DEL.
      ENDLOOP.
      PERFORM CALZZL USING 'OOCHG'.
      CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
        EXPORTING
          NEW_CODE = 'ITEMCHG'.
      MESSAGE S007.
    WHEN 'ALL'.
      LOOP AT IT_ITEM.
        IT_ITEM-CHBOX = 'X'.
        MODIFY IT_ITEM TRANSPORTING CHBOX.
      ENDLOOP.
    WHEN 'SAL'.
      LOOP AT IT_ITEM.
        IT_ITEM-CHBOX = ''.
        MODIFY IT_ITEM TRANSPORTING CHBOX.
      ENDLOOP.
  ENDCASE.
  PERFORM REFRESHALV.
ENDFORM.
FORM USER_COMMAND_CLS1  USING    P_E_UCOMM.
  DATA:IT_ITEM1 LIKE TABLE OF IT_ITEM WITH HEADER LINE.
  CLEAR:IT_RSNUM[],ZDHHH,IT_ITEM1[],IT_ITEM1.
  CASE P_E_UCOMM.
    WHEN 'ADD'.
*找到数据库及当前界面最大行
      SELECT SINGLE MAX( ZDHHH )
        INTO ZDHHH
        FROM ZTMM202
        WHERE ZDHHH = WA_HEAD-ZDHDH.
*获取最大行号
      IT_ITEM1[] = IT_ITEM[].
      DELETE IT_ITEM1 WHERE UEPOS IS NOT INITIAL.
      SORT IT_ITEM1 BY ZDHHH DESCENDING.
      READ TABLE IT_ITEM1 INDEX 1.
      IF ZDHHH LT IT_ITEM1-ZDHHH.
        ZDHHH = IT_ITEM1-ZDHHH.
      ENDIF.
*将选中的添加到明细
      LOOP AT ITAB1A WHERE CHBOX1 = 'X'.
        CLEAR:IT_ITEM.
        MOVE-CORRESPONDING ITAB1A TO IT_ITEM.
        IT_ITEM-ZCD = ITAB1A-ZCHANDI.
        IT_ITEM-LGORT = ITAB1A-LGORT1.
        IT_ITEM-ZBG = ITAB1A-ZBAOGUAN.
        CLEAR:IT_ITEM-CHBOX.
        ADD 100 TO ZDHHH.
        IT_ITEM-ZDHHH = ZDHHH.
        IT_ITEM-ZSFHG = 'X'.
        APPEND IT_ITEM.
        CASE ITAB1A-PSTYP.
          WHEN '3'.
            IT_RSNUM-RSNUM = ITAB1A-RSNUM.
            COLLECT IT_RSNUM.
        ENDCASE.
      ENDLOOP.
      IF SY-SUBRC NE 0.
        MESSAGE S003 DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
*添加组件
      PERFORM ADDZJ TABLES ITAB1A.
      MESSAGE S007.
      LEAVE TO SCREEN 0.
    WHEN 'ALL'.
      LOOP AT ITAB1A.
        ITAB1A-CHBOX1 = 'X'.
        MODIFY ITAB1A TRANSPORTING CHBOX1.
      ENDLOOP.
    WHEN 'SAL'.
      LOOP AT ITAB1A.
        ITAB1A-CHBOX1 = ''.
        MODIFY ITAB1A TRANSPORTING CHBOX1.
      ENDLOOP.
  ENDCASE.
  PERFORM REFRESHALV9001.
ENDFORM.
*&---------------------------------------------------------------------*
*& Module STATUS_9001 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE STATUS_9001 OUTPUT.
  SET PF-STATUS '9001'.
* SET TITLEBAR 'xxx'.
  "创建容器
  IF ALVGRID1 IS INITIAL.
    CREATE OBJECT CONTAIN1
      EXPORTING
        CONTAINER_NAME              = 'CONT9001'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.
    IF SY-SUBRC NE 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    CREATE OBJECT ALVGRID1
      EXPORTING
        I_PARENT = CONTAIN1.

    CALL METHOD CL_GUI_CFW=>DISPATCH.

    CREATE OBJECT LCL_EVENT_RECEIVER2.
    SET HANDLER LCL_EVENT_RECEIVER2->HANDLE_DOUBLE_CLICK1 FOR ALVGRID1.
    SET HANDLER LCL_EVENT_RECEIVER2->HANDLE_DATA_CHANGED1 FOR ALVGRID1.
    SET HANDLER LCL_EVENT_RECEIVER2->HANDLE_HOTSPOT_CLICK1 FOR ALVGRID1."热点点击
    SET HANDLER LCL_EVENT_RECEIVER2->HANDLE_TOOLBAR1 FOR ALVGRID1."增加按钮
    SET HANDLER LCL_EVENT_RECEIVER2->HANDLE_COMMAND1 FOR ALVGRID1."按钮响应
    ALVGRID1->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED )."mc_evt_enter
    ALVGRID1->REGISTER_DELAYED_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_DELAYED_CHANGE_SELECT )."MC_EVT_DELAYED_CHANGE_SELECT

    PERFORM CALLALV(ZPUBFORM)
    TABLES ITAB1A USING ALVGRID1 IT_FIELDCAT1 'M207'.
  ELSE.
    PERFORM CALLALV(ZPUBFORM)
    TABLES ITAB1A USING ALVGRID1 IT_FIELDCAT1 'M207'.
  ENDIF.
*刷新ALV
  PERFORM REFRESHALV9001.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE EXIT9001 INPUT.
  OK_CODE1 = SY-UCOMM.
  CHECK OK_CODE1+0(5) = 'BUT10'.
  LEAVE TO SCREEN 0.
  CLEAR OK_CODE1.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9001 INPUT.
  OK_CODE1 = SY-UCOMM.
  CHECK OK_CODE1+0(5) = 'BUT10'.
  LEAVE TO SCREEN 0.
  CLEAR OK_CODE1.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form INITFIELDCAT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INITFIELDCAT .
  PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCAT USING :
'EBELN' '采购订单' '' '' 'X' '' ,
'BUKRS' '公司代码' '' '' '' '' ,
'BUTXT' '公司描述' '' '' '' '' ,
'PSTYP' '采购凭证类别' '' '' '' '' ,
'BSART' '采购凭证类型' '' '' '' '' ,
'LIFNR' '供应商编号' 'X' '' '' '' ,
'NAMEL' '供应商名称' '' '' '' '' ,
'ZTERM' '付款条件' '' '' '' '' ,
'EKORG' '采购组织' '' '' '' '' ,
'T024E' '采购组织描述' '' '' '' '' ,
'EKGRP' '采购组' '' '' '' '' ,
'T024' '采购组名称' '' '' '' '' ,
'WAERS' '货币' '' '' '' '' ,
'FRGKE' '审批标识' '' '' '' '' ,
'ZZYH' '资源号' '' '' '' '' ,
'ZHTH' '外部合同号' '' '' '' '' ,
 'ZYSFS' '运输方式' '' '' '' '',
 'ZYSFST' '运输方式' '' '' '' '',
 'ZCK' '仓库' '' '' '' '',
 'ZGYSLX' '供应商类型' '' '' '' '',
 'ZJGSD' '价格锁定' '' '' '' '',
 'ZJGSDT' '价格锁定' '' '' '' '',
 'ZFKFS' '付款方式' '' '' '' '',
 'ZFKFST' '付款方式' '' '' '' '',
 'ZFKLX' '付款类型' '' '' '' '',
 'ZFKLXT' '付款类型' '' '' '' '',
 'ZXCF' '卸车方' '' '' '' '',
 'ZXCFT' '卸车方' '' '' '' '',
 'ZYFKJE' '预付款金额' '' '' '' '',
 'ZYFKBL' '预付款比例' '' '' '' '',
 'ZZBJ' '质保金' '' '' '' '',
 'ZZBJBL' '质保金比例' '' '' '' '',
 'ZYFCDF' '运费承担方' '' '' '' '',
 'ZYFCDFT' '运费承担方' '' '' '' '',
 'ZTZTGRQ' '图纸提供日期' '' '' '' '',
 'ZCGLX' '采购类型' '' '' '' '',
 'ZCGLXT' '采购类型' '' '' '' '',
 'ZGJGQ' '构件工期' '' '' '' '',
 'ZDHJSRQ' '到货结算日期' '' '' '' '',
 'ZCKBM' '仓库编码' '' '' '' '',
'BEDAT' '凭证日期' '' '' '' '' ,
'INCO1' '国际贸易条款1' '' '' '' '' ,
'INCO2' '国际贸易条款2' '' '' '' '' ,
'EBELP' '采购订单行号' '' '' '' '' ,
'PSPNR' 'WBS元素' '' '' '' '' ,
'POSID' '项目定义' '' '' '' '' ,
'POST1' '项目名称' '' '' '' '' ,
'TXZ01' '采购订单文本' '' '' '' '' ,
'MATNR' '物料编码' 'X' '' '' '' ,
'MAKTX' '物料描述' '' '' '' '' ,
'ZWLCMS' '物料长描述' '' '' '' '' ,
'ZZL1' '品名' '' '' '' '' ,
'WERKS' '工厂' '' '' '' '' ,
'NAMEW' '工厂名称' '' '' '' '' ,
'LGORT' '库存地' '' '' '' '' ,
'LGOBE' '库存地名称' '' '' '' '' ,
'MATKL' '物料组' '' '' '' '' ,
'T023T' '物料组名称' '' '' '' '' ,
'MENGE' '订单数量' '' '' '' '' ,
'CGWQ' '采购未清' '' '' '' '' ,
'SHMNG' '收货数量' '' '' '' '' ,
'MEINS' '订单单位' '' '' '' '' ,
'PBXX' '含税单价' '' '' '' '' ,
'K_PBXX' '含税金额' '' '' '' '' ,
'ZBHSJE' '不含税金额' '' '' '' '' ,
'NETPR' '净价' '' '' '' '' ,
'PEINH' '价格单位' '' '' '' '' ,
'MWSKZ' '税码' '' '' '' '' ,
'ELIKZ' '发货完成' '' '' '' '' ,
'PSTYP' '项目类别' '' '' '' '' ,
'KNTTP' '科目分配类别' '' '' '' '' ,
'RETPO' '退货' '' '' '' '' ,
'UMSON' '免费项目' '' '' '' '' ,
*    'LOEKZ' '删除标记' '' '' '' '' ,
'EINDT' '交货日期' '' '' '' '' ,
'RSNUM' '预留号' '' '' '' '' ,
'BANFN' '采购申请' 'X' '' 'X' '' ,
'BNFPO' '采购申请行号' '' '' '' '' ,
'AFNAM' '申请人' '' '' '' '' ,
'ZZFDZ' '卸货地址' '' '' '' '' ,
'KUNNR' '客户' 'X' '' '' '' ,
'NAMEK' '客户名称' '' '' '' '' ,
'ZBAOGUAN' '保管' '' '' '' '' ,
'ZCHANDI' '产地' '' '' '' '' ,
'BEDNR' '销售合同' '' '' '' '' ,
'LGORT1' '库存地' '' '' '' '' ,
'LGOBE1' '库存地描述' '' '' '' '' ,
'LFDAT' '需求日期' '' '' '' '' ,
'ZSFZF' '直发工地标识' '' '' '' '' ,
'JYSL  ' '校验数量' '' '' '' '' ,
'JYJE  ' '校验金额' '' '' '' '' ,
'SYJYSL' '剩余校验数量' '' '' '' '' ,
'SYJYJE' '剩余校验金额' '' '' '' '' ,
'FPJYHS' '发票校验金额-含税' '' '' '' '' ,
'SYJYHS' '剩余校验金额-含税' '' '' '' '' ,
'LJFKJE' '合同已付金额' '' '' '' '' ,
'ZSYFK ' '合同未付金额' '' '' '' '' ,
'ZFKE  ' '合同总金额' '' '' '' '' ,
'HANDLE' HANDLE '' 'X' '' '' .
  FIELDCAT1 = FIELDCAT.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GETPOINFO
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ITAB1
*&---------------------------------------------------------------------*
FORM GETPOINFO TABLES   P_ITAB1 STRUCTURE ITAB1
               USING P_TYPE.
  DATA:SELSTRN TYPE STRING.
  CLEAR:SELSTRN.
  CASE P_TYPE.
    WHEN '1'."初始选择
      IF P_WSH = 'X' AND P_YSH <> 'X'.
        SELSTRN = ` ZVMMPO~EKGRP IN @S_EKGRP `
              && ` AND ZVMMPO~BEDAT IN @S_BEDAT `
              && ` AND ZVMMPO~LGORT IN @S_LGORT `
              && ` AND ZVMMPO~EBELN IN @S_EBELN `
              && ` AND ZVMMPO~EBELP IN @S_EBELP `
              && ` AND ZVMMPO~MATNR IN @S_MATNR `
              && ` AND ZVMMPO~PSTYP IN @S_PSTYP `
              && ` AND ZVMMPO~ELIKZ <> 'X' `
              && ` AND ZVMMPO~EINDT IN @S_EINDT `.
      ELSE.
        SELSTRN = ` ZVMMPO~EKGRP IN @S_EKGRP `
              && ` AND ZVMMPO~BEDAT IN @S_BEDAT `
              && ` AND ZVMMPO~LGORT IN @S_LGORT `
              && ` AND ZVMMPO~EBELN IN @S_EBELN `
              && ` AND ZVMMPO~EBELP IN @S_EBELP `
              && ` AND ZVMMPO~MATNR IN @S_MATNR `
              && ` AND ZVMMPO~PSTYP IN @S_PSTYP `
              && ` AND ZVMMPO~EINDT IN @S_EINDT `.
      ENDIF.

    WHEN '2'."添加明细.
      SELSTRN = ` ZVMMPO~LIFNR = @WA_HEAD-LIFNR `
      && ` AND ZVMMPO~BSART = @WA_HEAD-BSART `
      && ` AND ZVMMPO~WERKS = @WA_HEAD-WERKS `
      && ` AND ZVMMPO~EKORG = @WA_HEAD-EKORG `.
    WHEN '3'."查看明细
  ENDCASE.
  CASE P_TYPE.
    WHEN '3'.
    WHEN OTHERS.
      SELECT ZVMMPO~*
        INTO TABLE @P_ITAB1
        FROM ZVMMPO
        WHERE ZVMMPO~BUKRS = @P_BUKRS
          AND ZVMMPO~ELIKZ IN @S_ELIKZ
          AND ZVMMPO~WEPOS IN @S_WEPOS
          AND ZVMMPO~MEMORY = ''
          AND ZVMMPO~LOEKZ NE 'L'
          AND ZVMMPO~EKORG IN @S_EKORG
          AND ZVMMPO~LIFNR IN @S_LIFNR
          AND ZVMMPO~WERKS IN @S_WERKS
          AND ZVMMPO~PSTYP IN @S_PSTYP1
          AND ZVMMPO~FRGKE IN @S_FRGKE
          AND (SELSTRN).
  ENDCASE.
ENDFORM.
FORM CHGSTATUS USING P_IN_ZDHDH
                     P_IN_UCOMM
                CHANGING P_OUTMSG.
  DATA:BEGIN OF IT_ACT OCCURS 0,
         TCODE TYPE SY-TCODE,
         DHZT  TYPE ZEG_ZDHZT,
       END OF IT_ACT,
       BEGIN OF IT_DHZT OCCURS 0,
         DHZT TYPE ZTMM201-ZDHZT,
       END OF IT_DHZT.
  DATA:ACT   TYPE ZE_ACT,
       LEN   TYPE I,
       CS    TYPE I,
       TABIX TYPE SY-TABIX.
  CLEAR:P_OUTMSG, *ZTMM201,ACT,IT_ACT[],IT_DHZT[],LEN,CS,
  TABIX.
  CLEAR IT_ACT.
  IT_ACT-TCODE = TCODE1.
  IT_ACT-DHZT = 'A'.
  APPEND IT_ACT.
  CLEAR IT_ACT.
  IT_ACT-TCODE = TCODE2.
  IT_ACT-DHZT = 'B'.
  APPEND IT_ACT.
  CLEAR IT_ACT.
  IT_ACT-TCODE = TCODE3.
  IT_ACT-DHZT = 'C'.
  APPEND IT_ACT.
  CLEAR IT_ACT.
  IT_ACT-TCODE = TCODE5.
  IT_ACT-DHZT = 'D'.
  APPEND IT_ACT.
  SORT IT_ACT BY TCODE.
  SELECT SINGLE *
    INTO *ZTMM201
    FROM ZTMM201
    WHERE ZDHDH = P_IN_ZDHDH.
  CHECK SY-SUBRC = 0.
  CASE *ZTMM201-ZTHFS.
    WHEN 'SD'.
      IF *ZTMM201-ZSHR IS NOT INITIAL.
        *ZTMM201-YWLC = 'ABDE'.
      ELSE.
        *ZTMM201-YWLC = 'ADE'.
      ENDIF.
    WHEN 'ZT'.
      IF *ZTMM201-ZSHR IS NOT INITIAL.
        *ZTMM201-YWLC = 'ABCDE'.
      ELSE.
        *ZTMM201-YWLC = 'ACDE'.
      ENDIF.
    WHEN OTHERS.
  ENDCASE.
  LEN = STRLEN( *ZTMM201-YWLC ).
  DO LEN TIMES.
    CLEAR:IT_DHZT.
    IF CS = LEN.
      EXIT.
    ENDIF.
    IT_DHZT-DHZT = *ZTMM201-YWLC+CS(1).
    APPEND IT_DHZT.
    CS = CS + 1.
  ENDDO.
  SORT IT_DHZT BY DHZT.
  CLEAR :IT_DHZT,IT_ACT.
  READ TABLE IT_ACT WITH KEY TCODE = SY-TCODE.
  READ TABLE IT_DHZT WITH KEY DHZT = IT_ACT-DHZT.
  TABIX = SY-TABIX.
  CASE P_IN_UCOMM.
    WHEN 'BUT04'."保存
      IF SY-TCODE = TCODE1
        AND P1_X = 'X'.
        UPDATE ZTMM201
        SET YWLC = *ZTMM201-YWLC
            ZDHZT = 'A'
        WHERE ZDHDH = P_IN_ZDHDH.
        COMMIT WORK.
        P_OUTMSG = 'S:操作成功'.
      ENDIF.
    WHEN 'BUT05' OR 'BUT06'."提交
      IF P_IN_UCOMM = 'BUT05'.
        "找到当前状态下一步状态
        IF TABIX = LEN."最后一步
          P_OUTMSG = 'S:已到最后一步流程'.
          EXIT.
        ENDIF.
        TABIX = TABIX + 1.
      ELSE.
        "找到当前状态上一步状态
        IF TABIX = 1."最后一步
          P_OUTMSG = 'S:已到第一步流程'.
          EXIT.
        ENDIF.
        TABIX = TABIX - 1.
      ENDIF.
      CLEAR:IT_DHZT.
      READ TABLE IT_DHZT INDEX TABIX."上一步状态
      IF *ZTMM201-ZDHZT = IT_DHZT-DHZT.
        P_OUTMSG = 'S:操作成功'.
        EXIT.
      ENDIF.
      IF *ZTMM201-ZDHZT = IT_ACT-DHZT.
        UPDATE ZTMM201
        SET ZDHZT = IT_DHZT-DHZT
        WHERE ZDHDH = P_IN_ZDHDH.
        COMMIT WORK.
        P_OUTMSG = 'S:操作成功'.
*判断触发推送WMS
        *ZTMM201-ZDHZT = IT_DHZT-DHZT.
        PERFORM PDSENDWMS USING *ZTMM201 CHANGING WA_HEAD-ZWMSJG.
*推送钉钉
        PERFORM PUSHDD USING WA_HEAD-ZDHDH P_IN_UCOMM.
      ELSE.
        P_OUTMSG = 'E:状态不允许'.
      ENDIF.
    WHEN 'BUT07'."重置
      IF *ZTMM201-ZDHZT = 'E'.
        P_OUTMSG = 'E:入库完成不允许重置'.
        EXIT.
      ENDIF.
      UPDATE ZTMM201
      SET ZDHZT = 'A'
      WHERE ZDHDH = P_IN_ZDHDH.
      COMMIT WORK.
      P_OUTMSG = 'S:操作成功'.
*推送钉钉
      PERFORM PUSHDD USING WA_HEAD-ZDHDH P_IN_UCOMM.
    WHEN 'BUT11'."过账
      CASE *ZTMM201-ZDHZT.
        WHEN 'D' .
          UPDATE ZTMM201
          SET ZDHZT = 'E'
          WHERE ZDHDH = P_IN_ZDHDH.
          COMMIT WORK.
          P_OUTMSG = 'S:操作成功'.
      ENDCASE.
    WHEN 'BUT12'."冲销
      IF *ZTMM201-ZDHZT NE 'E'.
        P_OUTMSG = 'E:入库未完成不允许冲销'.
        EXIT.
      ENDIF.
      UPDATE ZTMM201
      SET ZDHZT = 'D'
      WHERE ZDHDH = P_IN_ZDHDH.
      COMMIT WORK.
      P_OUTMSG = 'S:操作成功'.
  ENDCASE.
  IF P_OUTMSG+0(1) NE 'E'.
    P_OUTMSG = 'S:动作未识别'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form GETPUBDATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM GETPUBDATA .
*取采购未清
  IF IT_EBELN[] IS NOT INITIAL.
    CALL FUNCTION 'ZFMS_07_GETCGWQ'
      TABLES
        I_EBELN = IT_EBELN
        O_CGWQ  = IT_CGWQ.
    SELECT *
      INTO TABLE IT_EKKN
      FROM EKKN
      FOR ALL ENTRIES IN IT_EBELN
      WHERE EBELN = IT_EBELN-EBELN.
    LOOP AT IT_EKKN.
      CLEAR IT_PSPNR.
      IT_PSPNR-PSPNR = IT_EKKN-PS_PSP_PNR.
      COLLECT IT_PSPNR.
    ENDLOOP.
    DELETE IT_PSPNR WHERE PSPNR IS INITIAL.
    IF IT_PSPNR[] IS NOT INITIAL.
      SELECT *
        INTO TABLE IT_PRPS
        FROM PRPS
        FOR ALL ENTRIES IN IT_PSPNR
        WHERE PSPNR = IT_PSPNR-PSPNR.
      SORT IT_PRPS BY PSPNR.
    ENDIF.
    SORT IT_EKKN BY EBELN EBELP.
  ENDIF.
  DELETE IT_BANFN WHERE BANFN IS INITIAL.
  IF IT_BANFN[] IS NOT INITIAL.
    SORT IT_BANFN BY BANFN.
    SELECT *
      INTO TABLE IT_EBAN
      FROM EBAN
      FOR ALL ENTRIES IN IT_BANFN
      WHERE BANFN = IT_BANFN-BANFN.
    SORT IT_EBAN BY BANFN BNFPO.
  ENDIF.

*取价格
  IF IT_KNUMV[] IS NOT INITIAL.
    SORT IT_KNUMV BY KNUMV POSNR.
    SELECT *
      INTO TABLE IT_PRCD
      FROM PRCD_ELEMENTS
      FOR ALL ENTRIES IN IT_KNUMV
      WHERE KNUMV = IT_KNUMV-KNUMV
      AND   KPOSN = IT_KNUMV-POSNR
      AND   KSCHL IN ('PBXX','ZWVZ')
      AND   KINAK = ''.
    SORT IT_PRCD BY KNUMV KPOSN KSCHL.
  ENDIF.
  DELETE IT_MATNR WHERE MATNR IS INITIAL.
  IF IT_MATNR[] IS NOT INITIAL.
    SORT IT_MATNR BY MATNR.
    SELECT *
      INTO TABLE IT_MAKT
      FROM MAKT
      FOR ALL ENTRIES IN IT_MATNR
      WHERE MATNR = IT_MATNR-MATNR
      AND   SPRAS = SY-LANGU.
    SORT IT_MAKT BY MATNR.
    SELECT *
      INTO TABLE IT_MARA
      FROM MARA
      FOR ALL ENTRIES IN IT_MATNR
      WHERE MATNR = IT_MATNR-MATNR.
    SORT IT_MARA BY MATNR.
    SELECT *
      INTO TABLE IT_MARM
      FROM MARM
      FOR ALL ENTRIES IN IT_MATNR
      WHERE MATNR = IT_MATNR-MATNR.
    SORT IT_MARM BY MATNR KZWSO.
  ENDIF.
  DELETE IT_LIFNR WHERE LIFNR IS INITIAL.
  IF IT_LIFNR[] IS NOT INITIAL.
    SORT IT_LIFNR BY LIFNR.
    SELECT *
      INTO TABLE IT_LFA1
      FROM LFA1
      FOR ALL ENTRIES IN IT_LIFNR
      WHERE LIFNR = IT_LIFNR-LIFNR.
    SORT IT_LFA1 BY LIFNR.
  ENDIF.
  DELETE IT_KUNNR WHERE KUNNR IS INITIAL.
  IF IT_KUNNR[] IS NOT INITIAL.
    SORT IT_KUNNR BY KUNNR.
    SELECT *
      INTO TABLE IT_KNA1
      FROM KNA1
      FOR ALL ENTRIES IN IT_KUNNR
      WHERE KUNNR = IT_KUNNR-KUNNR.
    SORT IT_KNA1 BY KUNNR.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  ZYSZRR4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZYSZRR4 INPUT.

  CALL FUNCTION 'ZFM_ZYSGSF4'
    EXPORTING
      FIELD    = 'ZYSZRR'
      SCRFIELD = 'WA_HEAD-ZYSZRR'.
ENDMODULE.
*&---------------------------------------------------------------------*
*& Form DELALL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM DELALL .
  LOCK '' WA_HEAD-ZDHDH.
  UPDATE ZTMM201
  SET DEL = 'X'
  WHERE ZDHDH = WA_HEAD-ZDHDH.
  UPDATE ZTMM202
  SET DEL = 'X'
  WHERE ZDHDH = WA_HEAD-ZDHDH.
  COMMIT WORK.
  LOCK 'X' WA_HEAD-ZDHDH.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form ADDZJ
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM ADDZJ TABLES T_ITAB1 STRUCTURE ITAB1.
  CLEAR:ITAB1B[].
  ITAB1B[] = T_ITAB1[].
  SORT ITAB1B BY EBELN EBELP.
  IF IT_RSNUM[] IS NOT INITIAL.
    SORT IT_RSNUM BY RSNUM.
    SELECT *
      INTO TABLE IT_RESB
      FROM RESB
      FOR ALL ENTRIES IN IT_RSNUM
      WHERE RSNUM = IT_RSNUM-RSNUM.
    IF SY-SUBRC EQ 0.
      SORT IT_RESB BY EBELN EBELP.

      LOOP AT IT_RESB.
        CLEAR: IT_ITEM.
        READ TABLE ITAB1B WITH KEY EBELN = IT_RESB-EBELN
                                   EBELP = IT_RESB-EBELP
                                   BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          MOVE-CORRESPONDING ITAB1B TO IT_ITEM.
          IT_ITEM-ZCD = ITAB1B-ZCHANDI.
          IF IT_ITEM-LGORT IS INITIAL.
            IT_ITEM-LGORT = ITAB1B-LGORT1.
            IT_ITEM-LGOBE = ITAB1B-LGOBE1.
          ENDIF.
          IT_ITEM-ZBG = ITAB1B-ZBAOGUAN.
        ENDIF.
        IT_ITEM-ZJBS = 'X'.
        IT_ITEM-MATNR = IT_RESB-MATNR.
        IT_ITEM-EBELN = IT_RESB-EBELN.
        IT_ITEM-EBELP = IT_RESB-EBELP.
        IT_ITEM-WERKS = IT_RESB-WERKS.
*      IT_ITEM-ZXHL = IT_RESB-BDMNG.
        SELECT SINGLE MAKTX
          INTO IT_ITEM-MAKTX
          FROM MAKT
          WHERE MATNR = IT_ITEM-MATNR
          AND   SPRAS = SY-LANGU.
*物料长描述
        PERFORM GETLONGTEXT(ZPUBFORM)
        USING 'GRUN' IT_ITEM-MATNR 'MATERIAL'
              CHANGING IT_ITEM-ZWLCMS.
        ADD 100 TO ZDHHH.
        IT_ITEM-ZDHHH = ZDHHH.
        IT_ITEM-ZSFHG = 'X'.
        APPEND IT_ITEM.
      ENDLOOP.
      SORT IT_ITEM BY ZDHHH EBELN EBELP ZJBS.
    ENDIF.

  ENDIF.
ENDFORM.
FORM TAB2SCREEN USING P_TDID.
*清空
  CLEAR TEXTTABLE[].
  CALL METHOD GO_EDITOR->DELETE_TEXT .
  CALL METHOD CL_GUI_CFW=>FLUSH.

*取出已有的
  LOOP AT IT_TEXT WHERE TDID = P_TDID.
    CLEAR:TEXTTABLE.
    TEXTTABLE-TEXT = IT_TEXT-TEXT.
    APPEND TEXTTABLE.
  ENDLOOP.
  CALL METHOD GO_EDITOR->SET_TEXT_AS_STREAM
    EXPORTING
      TEXT            = TEXTTABLE[]
    EXCEPTIONS
      ERROR_DP        = 1
      ERROR_DP_CREATE = 2
      OTHERS          = 3.
  CALL METHOD CL_GUI_CFW=>FLUSH.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SCREEN2TAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> TDID
*&---------------------------------------------------------------------*
FORM SCREEN2TAB  USING    P_TDID.
  REFRESH:TEXTTABLE.
  "将容器中内容解析到内表
  GO_EDITOR->GET_TEXT_AS_R3TABLE( IMPORTING TABLE = TEXTTABLE[] ).
*将切换前的记录
  DELETE IT_TEXT WHERE TDID = P_TDID.
  LOOP AT TEXTTABLE.
    CLEAR:IT_TEXT.
    IT_TEXT-TDID = P_TDID.
    IT_TEXT-TEXT = TEXTTABLE-TEXT.
    APPEND IT_TEXT.
  ENDLOOP.
ENDFORM.
FORM Z800F4 USING P_SCRNAM.
  SELECT PARTNER AS LIFNR,
         NAME_ORG1 AS NAME1,
         BU_SORT1,
         BU_SORT2 AS BNAME
    INTO TABLE @DATA(IT_LIFNRF4)
    FROM BUT000
    WHERE BU_SORT2 NE ''
    AND   BU_GROUP = 'Z800'.
  PERFORM F4HELPN(ZPUBFORM) TABLES IT_LIFNRF4 USING 'LIFNR' P_SCRNAM.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  ZWLYZF4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZWLYZF4 INPUT.
  CALL FUNCTION 'ZFM_ZYSGSF4'
    EXPORTING
      FIELD    = 'ZWLY'
      SCRFIELD = 'WA_HEAD-ZWLY'.
ENDMODULE.
MODULE ZSHRZF4 INPUT.
  CALL FUNCTION 'ZFM_ZYSGSF4'
    EXPORTING
      FIELD    = 'ZSHR'
      SCRFIELD = 'WA_HEAD-ZSHR'.
*  PERFORM Z800F4 USING 'WA_HEAD-ZSHR'.
ENDMODULE.
MODULE ZYSRZF4 INPUT.
  CALL FUNCTION 'ZFM_ZYSGSF4'
    EXPORTING
      FIELD    = 'ZYSR'
      SCRFIELD = 'WA_HEAD-ZYSR'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  DEALDATA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DEALDATA INPUT.
  PERFORM TRANSYSGS IN PROGRAM ZRSD202 CHANGING WA_HEAD-ZYSGS.
  SELECT SINGLE NAME_ORG1
    INTO WA_HEAD-ZWLYT
    FROM BUT000
    WHERE PARTNER = WA_HEAD-ZWLY.
  SELECT SINGLE NAME_ORG1
    INTO WA_HEAD-ZSHRT
    FROM BUT000
    WHERE PARTNER = WA_HEAD-ZSHR.
  SELECT SINGLE NAME_ORG1
    INTO WA_HEAD-ZYSRT
    FROM BUT000
    WHERE PARTNER = WA_HEAD-ZYSR.
  SELECT SINGLE NAME1
    INTO WA_HEAD-ZYSGST
    FROM LFA1
    WHERE LIFNR = WA_HEAD-ZYSGS.
  READ TABLE IT_ZVTMM215 WITH KEY ZCKBM = WA_HEAD-ZCKBM BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_HEAD-ZCKMC = IT_ZVTMM215-ZCKMC.
  ENDIF.
  PERFORM CALZZL USING 'HEADCHG'.
ENDMODULE.
FORM CHECKBP TABLES T_RETURN USING P_PARTNER P_TEXT.
  CLEAR BUT000.
  CHECK P_PARTNER IS NOT INITIAL.
  SELECT SINGLE *
    FROM BUT000
    WHERE PARTNER = P_PARTNER
    AND   BU_GROUP IN S_KTOKK.
  IF BUT000-BU_SORT2 IS INITIAL.
    PERFORM INMSG(ZPUBFORM) TABLES RETURN
      USING 'ZMSG_GP' 'E' '035' P_TEXT
            '' '' ''.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALZZL
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM CALZZL USING P_OKCODE.
  CLEAR:WA_HEAD-ZZL.
  LOOP AT IT_ITEM INTO WA_ITEM WHERE DEL NE 'X'
                                 AND UEPOS IS INITIAL.
    WA_HEAD-ZZL = WA_HEAD-ZZL + WA_ITEM-ZDHL.
  ENDLOOP.
  CASE WA_HEAD-ZJSFS.
    WHEN 'DJ'.
      WA_HEAD-ZYSJE = WA_HEAD-ZWLDJ * WA_HEAD-ZZZ.
    WHEN 'ZC'.
      IF WA_HEAD-ZZZ GT 0.
        WA_HEAD-ZWLDJ = WA_HEAD-ZYSJE / WA_HEAD-ZZZ.
      ENDIF.
  ENDCASE.
  CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
    EXPORTING
      NEW_CODE = 'PAI'.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SENWMS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> WA_HEAD_ZDHDH
*&---------------------------------------------------------------------*
FORM SENWMS  USING    P_ZDHDH
             CHANGING P_TYPE P_MSG.
  DATA:IT_ZSMM_204 TYPE TABLE OF ZSMM_204 WITH HEADER LINE.
  DATA:RTYPE1 TYPE BAPI_MTYPE,
       RTMSG1 TYPE BAPI_MSG.
  CLEAR:IT_ZSMM_204[],P_TYPE,P_MSG.
  CHECK P_ZDHDH IS NOT INITIAL.
  SELECT *
    INTO TABLE @DATA(IT_ZVDHTZ)
    FROM ZVDHTZ
    WHERE ZDHDH = @P_ZDHDH
    AND   DEL NE 'X'
    AND   DELI NE 'X'.
  CHECK SY-SUBRC = 0.
  LOOP AT IT_ZVDHTZ INTO DATA(WA_ZVDHTZ).
    CLEAR:PRPS,EKKN, IT_ZSMM_204.
*组件到货量为0则不推送WMS
    CASE WA_ZVDHTZ-ZDHLX.
      WHEN 'WWCL'.
        IF WA_ZVDHTZ-ZJBS NE 'X'.
          CONTINUE.
        ENDIF.
      WHEN OTHERS.
        IF WA_ZVDHTZ-ZJBS = 'X'
          AND WA_ZVDHTZ-ZDHL IS INITIAL.
          CONTINUE.
        ENDIF.
    ENDCASE.
    MOVE-CORRESPONDING WA_ZVDHTZ TO IT_ZSMM_204.
    SELECT SINGLE ZZL1
      INTO IT_ZSMM_204-GROES
      FROM MARA
      WHERE MATNR = WA_ZVDHTZ-MATNR.
    SELECT SINGLE *
      INTO @DATA(WA_ZVMMPO)
      FROM ZVMMPO
      WHERE EBELN = @WA_ZVDHTZ-EBELN
      AND   EBELP = @WA_ZVDHTZ-EBELP.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_204-ZZDYS = WA_ZVMMPO-MENGE.
      IT_ZSMM_204-MEINS = WA_ZVMMPO-MEINS.
      IT_ZSMM_204-BANFN = WA_ZVMMPO-BANFN.
      SELECT SINGLE *
        INTO @DATA(WA_EKKN)
        FROM EKKN
        WHERE EBELN = @WA_ZVMMPO-EBELN
        AND   EBELP = @WA_ZVMMPO-EBELP.
      IF SY-SUBRC EQ 0.
        SELECT SINGLE *
          INTO @DATA(WA_PRPS)
          FROM PRPS
          WHERE PSPNR = @WA_EKKN-PS_PSP_PNR.
        IF SY-SUBRC EQ 0.
          IT_ZSMM_204-PSPID = WA_PRPS-POSID.
          IT_ZSMM_204-POST1 = WA_PRPS-POST1.
        ENDIF.
      ENDIF.
      SELECT SINGLE *
        INTO @DATA(WA_EBAN)
        FROM EBAN
        WHERE BANFN = @WA_ZVMMPO-BANFN
        AND   BNFPO = @WA_ZVMMPO-BNFPO.
      IF SY-SUBRC EQ 0.
        IT_ZSMM_204-ZXSHTH = WA_EBAN-BEDNR.
      ENDIF.
    ENDIF.
    SELECT SINGLE *
      INTO @DATA(WA_ZTPS010A)
      FROM ZTPS010A
      WHERE PSPID = @WA_PRPS-POSID.
    SELECT SINGLE TEL_EXTENS
      INTO @IT_ZSMM_204-ZZDR
      FROM T024
      WHERE EKGRP = @WA_ZVMMPO-EKGRP.
    SELECT SINGLE LGOBE
      INTO @IT_ZSMM_204-LGOBE
      FROM T001L
      WHERE WERKS = @WA_ZVDHTZ-WERKS
      AND   LGORT = @WA_ZVDHTZ-LGORT.
    SELECT SINGLE BUTXT
      INTO IT_ZSMM_204-BUTXT
      FROM T001
      WHERE BUKRS = IT_ZSMM_204-BUKRS.
    IT_ZSMM_204-ZDHNO = WA_ZVDHTZ-ZDHDH.
    IT_ZSMM_204-ZSHDATE = WA_ZVDHTZ-ZDHRQ.
    IT_ZSMM_204-ZCZMC = WA_ZVDHTZ-ZSJ.
    IT_ZSMM_204-ZZDATE = WA_ZVDHTZ-ERDAT.
    IT_ZSMM_204-ZRKSL = WA_ZVDHTZ-ZDHL.
    IT_ZSMM_204-ZZBH = WA_ZVDHTZ-ZZBH.
    IT_ZSMM_204-ZJH = WA_ZVDHTZ-ZJH.


    IT_ZSMM_204-KUNNR = WA_ZTPS010A-KUNNR.
    CONCATENATE WA_ZVDHTZ-ZDHDH WA_ZVDHTZ-ZDHHH
    INTO IT_ZSMM_204-ZBAOHAO.
    CALL FUNCTION 'ZFM_DEALLONGTEXT'
      EXPORTING
        INTYPE  = 'O'
        TDID    = 'Z002'
        SAPNO   = P_ZDHDH
        SAPMK   = 'DHTZ'
      IMPORTING
        OUTTEXT = IT_ZSMM_204-ZBZ.
    APPEND IT_ZSMM_204.
  ENDLOOP.
  CALL FUNCTION 'ZFM_GP_MM_WMS_CGDH_POST'
    IMPORTING
      RTYPE  = RTYPE1
      RTMSG  = RTMSG1
    TABLES
      IN_TAB = IT_ZSMM_204.
  P_TYPE = RTYPE1.
  P_MSG = RTMSG1.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form PDSENDWMS
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> *ZTMM201
*&---------------------------------------------------------------------*
FORM PDSENDWMS  USING    P_ZTMM201 TYPE ZTMM201
                CHANGING P_OUTMSG.
  DATA:TSFLGS TYPE CHAR1,
       NUMT   TYPE I,
       MSG1   TYPE BAPI_MSG,
       MSG2   TYPE BAPI_MSG.
  RANGES:D_WERKSS FOR EKPO-WERKS.
  APPEND 'IEQ3060' TO D_WERKSS.
  APPEND 'IEQ3062' TO D_WERKSS.
  CLEAR :NUMT,TSFLGS.
  CASE P_ZTMM201-ZDHZT.
    WHEN 'E'.
    WHEN 'D'.
      CASE P_ZTMM201-ZDHLX.
        WHEN 'CGHC' OR 'WWCL'.
          NUMT = NUMT + 1.
      ENDCASE.
    WHEN OTHERS .
  ENDCASE.
  SELECT SINGLE COUNT(*)
    FROM ZTMM202
    WHERE ZDHDH = P_ZTMM201-ZDHDH
    AND   WERKS IN D_WERKSS.
  IF SY-SUBRC EQ 0.
    NUMT = NUMT + 1.
  ENDIF.
  IF NUMT = 2.
    PERFORM SENWMS USING P_ZTMM201-ZDHDH
          CHANGING MSG1 MSG2.
    CONCATENATE MSG1 MSG2 INTO P_OUTMSG.
    UPDATE ZTMM201
    SET ZWMSJG = P_OUTMSG
    WHERE ZDHDH = P_ZTMM201-ZDHDH.
    COMMIT WORK.
  ENDIF.
ENDFORM.
*分摊运费金额
FORM FTYSJE TABLES T_ITEM STRUCTURE ZTMM202
             USING P_IN_ZTMM201 TYPE ZTMM201.
  DATA:T_ITEM1 TYPE TABLE OF ZTMM202 WITH HEADER LINE.
  DATA:ZYSJESUM TYPE ZTMM202-ZYSJEI.
  CLEAR:T_ITEM1[],ZYSJESUM.
  CHECK T_ITEM[] IS NOT INITIAL
  AND P_IN_ZTMM201-ZYSJE IS NOT INITIAL
  AND P_IN_ZTMM201-ZZL IS NOT INITIAL.
*只分摊非组件的原行
  T_ITEM1[] = T_ITEM[].
  DELETE T_ITEM1 WHERE UEPOS IS NOT INITIAL
                    OR ZJBS = 'X'
                    OR DEL = 'X'.
*  CASE P_IN_ZTMM201-ZJSFS.
*    WHEN 'DJ'.
*      LOOP AT T_ITEM1.
*        T_ITEM1-ZYSJEI = P_IN_ZTMM201-ZWLDJ * T_ITEM1-ZDHL.
*        MODIFY T_ITEM1 TRANSPORTING ZYSJEI.
*      ENDLOOP.
*    WHEN 'ZC'.
  LOOP AT T_ITEM1.
    T_ITEM1-ZYSJEI = P_IN_ZTMM201-ZYSJE * T_ITEM1-ZDHL / P_IN_ZTMM201-ZZL.
    MODIFY T_ITEM1 TRANSPORTING ZYSJEI.
    ZYSJESUM = ZYSJESUM + T_ITEM1-ZYSJEI.
  ENDLOOP.
  ZYSJESUM = P_IN_ZTMM201-ZYSJE - ZYSJESUM.
  SORT T_ITEM1 BY ZDHHH DESCENDING.
  LOOP AT T_ITEM1.
    T_ITEM1-ZYSJEI = T_ITEM1-ZYSJEI + ZYSJESUM.
    MODIFY T_ITEM1 TRANSPORTING ZYSJEI.
    EXIT.
  ENDLOOP.
*  ENDCASE.
  SORT T_ITEM1 BY ZDHHH.
  LOOP AT T_ITEM.
    READ TABLE T_ITEM1 WITH KEY ZDHHH = T_ITEM-ZDHHH BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      T_ITEM-ZYSJEI = T_ITEM1-ZYSJEI.
    ENDIF.
    MODIFY T_ITEM TRANSPORTING ZYSJEI.
  ENDLOOP.
ENDFORM.
*推送钉钉
FORM PUSHDD USING P_ZDHDH P_OKCODE1.
  DATA:BEGIN OF IT_TAB1 OCCURS 0,
         FIELD  TYPE CHAR30,
         TEXT   TYPE CHAR20,
         TELNUM TYPE KNA1-TELF1,
       END OF IT_TAB1,
       IT_ZSMM_209 TYPE TABLE OF ZSMM_209 WITH HEADER LINE.
  DATA:URL    TYPE STRING,
       P_NAME TYPE STRING,
       STR    TYPE STRING,
       TLNMBR TYPE AD_TLNMBR.
  CLEAR:*ZTMM201,ZVDHTZ,IT_TAB1[],IT_ZSMM_209[],
  IT_EBELN[].
  CHECK P_ZDHDH IS NOT INITIAL.

  SELECT *
    INTO TABLE @DATA(IT_ZVDHTZ)
    FROM ZVDHTZ
    WHERE ZDHDH = @P_ZDHDH
    AND   DEL NE 'X'
    AND   DELI NE 'X'.
  CHECK SY-SUBRC = 0.
  SELECT *
    INTO TABLE IT_ZVMMPO
    FROM ZVMMPO
    FOR ALL ENTRIES IN IT_ZVDHTZ
    WHERE EBELN = IT_ZVDHTZ-EBELN
    AND   EBELP = IT_ZVDHTZ-EBELP.
  SORT IT_ZVMMPO BY EBELN EBELP.
  READ TABLE IT_ZVDHTZ INTO ZVDHTZ INDEX 1.
  MOVE-CORRESPONDING ZVDHTZ TO *ZTMM201.
  LOOP AT IT_ZVDHTZ INTO ZVDHTZ.
    CLEAR IT_EBELN.
    IT_EBELN-EBELN = ZVDHTZ-EBELN.
    COLLECT IT_EBELN.
  ENDLOOP.
*获取采购未清
  CALL FUNCTION 'ZFMS_07_GETCGWQ'
    TABLES
      I_EBELN = IT_EBELN
      O_CGWQ  = IT_CGWQ.
  LOOP AT IT_ZVDHTZ INTO ZVDHTZ.
    CLEAR:EKKO,IT_ZSMM_209,IT_ZVMMPO.

    READ TABLE IT_ZVMMPO WITH KEY EBELN = ZVDHTZ-EBELN
                                  EBELP = ZVDHTZ-EBELP
                                  BINARY SEARCH.
    CLEAR:IT_TAB1.
    IT_TAB1-TEXT = '已被驳回'.
    SELECT SINGLE TEL_NUMBER
                  EKNAM
      INTO ( IT_TAB1-TELNUM,P_NAME )
      FROM T024
      WHERE EKGRP = IT_ZVMMPO-EKGRP.
    IF *ZTMM201-ZDHZT = 'A'
      AND P_OKCODE1 NE 'BUT04'."保存引起的状态更改不推送钉钉
      APPEND IT_TAB1.
    ENDIF.
    SELECT SINGLE *
      FROM EKKN
      WHERE EBELN = ZVDHTZ-EBELN
      AND   EBELP = ZVDHTZ-EBELP.
    SELECT SINGLE *
      FROM PRPS
      WHERE PSPNR = EKKN-PS_PSP_PNR.
    SELECT SINGLE *
      FROM EBAN
      WHERE BANFN = IT_ZVMMPO-BANFN
      AND   BNFPO = IT_ZVMMPO-BNFPO.
    MOVE-CORRESPONDING ZVDHTZ TO IT_ZSMM_209.
    PERFORM DELQFW(ZPUBFORM) CHANGING IT_ZSMM_209-ZCML.
    IT_ZSMM_209-MEINS = IT_ZVMMPO-MEINS.
    IT_ZSMM_209-MENGE = EBAN-MENGE.
    IT_ZSMM_209-MEINS_JS = IT_ZVMMPO-MEINS.
    IT_ZSMM_209-BSTME = IT_ZVMMPO-MEINS.
    IT_ZSMM_209-POST1 = PRPS-POST1.
    IT_ZSMM_209-ZRJL = ZVDHTZ-ZRKL.
    IT_ZSMM_209-ZZDRQ = ZVDHTZ-ERDAT.
    IT_ZSMM_209-ZZDR = ZVDHTZ-ERNAM.
    IT_ZSMM_209-ZDHH = ZVDHTZ-ZDHHH.
    IF ZVDHTZ-ZTHFS IS NOT INITIAL.
      PERFORM ADDZERO(ZPUBFORM) CHANGING ZVDHTZ-ZYSR.
      SELECT SINGLE NAME_ORG1
        INTO IT_ZSMM_209-ZXMJL
        FROM BUT000
        WHERE PARTNER = ZVDHTZ-ZYSR.
    ENDIF.
    SELECT SINGLE MAKTX
      INTO IT_ZSMM_209-MAKTX
      FROM MAKT
      WHERE MATNR = ZVDHTZ-MATNR
      AND   SPRAS = SY-LANGU.
    READ TABLE IT_ZDHLX WITH KEY DOMVALUE_L = ZVDHTZ-ZDHLX BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_209-ZDHLX = IT_ZDHLX-DDTEXT.
    ENDIF.
    READ TABLE IT_ZTHFS WITH KEY DOMVALUE_L = ZVDHTZ-ZTHFS BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_209-ZTHFS = IT_ZTHFS-DDTEXT.
    ENDIF.
    READ TABLE IT_T001W WITH KEY WERKS = ZVDHTZ-WERKS BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_209-NAMEW = IT_T001W-NAME1.
    ENDIF.
    SELECT SINGLE NAME1
      INTO IT_ZSMM_209-NAME1
      FROM LFA1
      WHERE LIFNR = IT_ZVMMPO-LIFNR.
    READ TABLE IT_CGWQ WITH KEY EBELN = ZVDHTZ-EBELN
                                EBELP = ZVDHTZ-EBELP
                                BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_209-SHMNG = IT_CGWQ-SHMNG.
    ENDIF.
    READ TABLE IT_T001L WITH KEY WERKS = ZVDHTZ-WERKS
                                 LGORT = ZVDHTZ-LGORT
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      IT_ZSMM_209-LGOBE = IT_T001L-LGOBE.
    ENDIF.
    APPEND IT_ZSMM_209.
  ENDLOOP.




  CASE *ZTMM201-ZDHZT.
    WHEN 'A'.
    WHEN 'B'.
      CLEAR:IT_TAB1.
      IT_TAB1-FIELD = 'ZSHR'.
      IT_TAB1-TEXT = '需要审批'.
      COLLECT IT_TAB1.
    WHEN 'C'.
      CLEAR:IT_TAB1.
      IT_TAB1-FIELD = 'ZWLY'.
      IT_TAB1-TEXT = '需要找车'.
      COLLECT IT_TAB1.
    WHEN 'D'.
      CLEAR:IT_TAB1.
      IT_TAB1-FIELD = 'ZYSR'.
      IT_TAB1-TEXT = '需要入库'.
      COLLECT IT_TAB1.
      CLEAR:IT_TAB1.
      IT_TAB1-FIELD = 'ZBG'.
      IT_TAB1-TEXT = '需要入库'.
      COLLECT IT_TAB1.
    WHEN 'E'.
*推送OA
      CALL FUNCTION 'ZFM_GP_MM_OA_CGDH_POST'
        EXPORTING
          P_NAME = P_NAME
        TABLES
          IN_TAB = IT_ZSMM_209.
  ENDCASE.



*推送钉钉消息
  LOOP AT IT_TAB1.
    IF IT_TAB1-FIELD IS NOT INITIAL.
      ASSIGN COMPONENT IT_TAB1-FIELD OF STRUCTURE *ZTMM201 TO <FS>.
      IF SY-SUBRC EQ 0.
        IF <FS> IS NOT INITIAL.
          PERFORM ADDZERO(ZPUBFORM) CHANGING <FS>.
          SELECT SINGLE TELF1
            INTO IT_TAB1-TELNUM
            FROM KNA1
            WHERE KUNNR = <FS>.
          MODIFY IT_TAB1.
        ENDIF.
      ENDIF.
    ELSE.
    ENDIF.
    IF IT_TAB1-TELNUM IS NOT INITIAL.
      CONCATENATE   `您的到货通知单` *ZTMM201-ZDHDH IT_TAB1-TEXT
      `，请及时处理。`
      INTO STR.
      TLNMBR = IT_TAB1-TELNUM .
      CALL FUNCTION 'ZFM_GP_SD_DD_FHTZTX_POST'
        EXPORTING
          DDSTR  = STR
          TLNMBR = TLNMBR.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  ZCKBMF4  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ZCKBMF4 INPUT.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST' "调用函数
    EXPORTING
      RETFIELD         = 'ZCKBM'  "搜索帮助内表要输出的的帮助字段名，注：要大写
      DYNPPROG         = SY-REPID
      DYNPNR           = SY-DYNNR
      DYNPROFIELD      = 'WA_HEAD-ZCKBM' "屏幕字段
      VALUE_ORG        = 'S'
      CALLBACK_PROGRAM = SY-REPID
      CALLBACK_FORM    = 'CB_FORM2'
    TABLES
      VALUE_TAB        = IT_ZVTMM215 "存储搜索帮助内容的内表
    EXCEPTIONS
      PARAMETER_ERROR  = 1
      NO_VALUES_FOUND  = 2
      OTHERS           = 3.
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
    WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDMODULE.
FORM CB_FORM2 TABLES RECORD_TAB STRUCTURE SEAHLPRES
           CHANGING SHLP TYPE SHLP_DESCR_T
                    CALLCONTROL LIKE DDSHF4CTRL.
  DATA: INTERFACE LIKE LINE OF SHLP-INTERFACE.
  CLEAR:INTERFACE.
  READ TABLE SHLP-INTERFACE INTO INTERFACE INDEX 1.
*选中后自动带出(SHLPFIELD字段结构F0001)
*  INTERFACE-SHLPFIELD+4(1) = '3'."F0001
*  INTERFACE-VALFIELD = 'ITAB-ZJUANH'.
*  APPEND INTERFACE TO SHLP-INTERFACE.
  INTERFACE-SHLPFIELD+4(1) = '3'.
  INTERFACE-VALFIELD = 'WA_HEAD-ZCKMC'.
  APPEND INTERFACE TO SHLP-INTERFACE.
  INTERFACE-SHLPFIELD+4(1) = '4'.
  INTERFACE-VALFIELD = 'WA_HEAD-ZCKDZ'.
  APPEND INTERFACE TO SHLP-INTERFACE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALZTMM202
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> WA_MOD_DATA_FIELDNAME
*&---------------------------------------------------------------------*
FORM CALZTMM202 TABLES IN_ITEM USING    P_FIELDNAME.
  DATA:WA_ZTMM202 TYPE ZTMM202.
  FIELD-SYMBOLS:<INWA> TYPE ANY,
                <INFS> TYPE ANY.
  LOOP AT IN_ITEM ASSIGNING <INWA>.
    CLEAR:WA_ZTMM202.
    MOVE-CORRESPONDING <INWA> TO WA_ZTMM202.
    CASE P_FIELDNAME.
      WHEN 'ZBZRQ' OR 'ZSCRQ'.
        IF WA_ZTMM202-ZSCRQ IS NOT INITIAL
          AND WA_ZTMM202-ZBZRQ IS NOT INITIAL.
          ASSIGN COMPONENT 'ZYXQ' OF STRUCTURE <INWA> TO <INFS>.
          IF SY-SUBRC EQ 0.
            <INFS> = WA_ZTMM202-ZSCRQ + WA_ZTMM202-ZBZRQ.
          ENDIF.
        ENDIF.
      WHEN 'ZRKL' OR 'ZJSL'.
        IF WA_ZTMM202-ZJSL IS NOT INITIAL.
          ASSIGN COMPONENT 'ZCML' OF STRUCTURE <INWA> TO <INFS>.
          IF SY-SUBRC EQ 0.
            <INFS> = WA_ZTMM202-ZRKL / WA_ZTMM202-ZJSL.
          ENDIF.
        ENDIF.
        SELECT SINGLE *
          INTO @DATA(WA_EKPO)
          FROM EKPO
          WHERE EBELN = @WA_ZTMM202-EBELN
          AND   EBELP = @WA_ZTMM202-EBELP.
        IF WA_EKPO-MEINS = WA_ZTMM202-RKDW.
          ASSIGN COMPONENT 'ZRKL' OF STRUCTURE <INWA> TO <INFS>.
          IF SY-SUBRC EQ 0.
            <INFS> = WA_ZTMM202-ZJSL.
          ENDIF.
        ENDIF.
    ENDCASE.
    ASSIGN COMPONENT 'ZRKRQ' OF STRUCTURE <INWA> TO <INFS>.
    IF SY-SUBRC EQ 0.
      <INFS> = SY-DATUM.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form DELQFW
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- WA_MOD_DATA_VALUE
*&---------------------------------------------------------------------*
FORM DELQFW  CHANGING P_WA_MOD_DATA_VALUE.
  PERFORM DELQFW(ZPUBFORM) CHANGING P_WA_MOD_DATA_VALUE.
ENDFORM.
FORM F4HELP  TABLES   P_RETURN_TAB STRUCTURE DDSHRETVAL
             USING    P_E_FIELDNAME
                      P_INTERTAB
                      P_INWA.
  DATA:RETFIELD    TYPE DFIES-FIELDNAME,
       DYNPROFIELD TYPE DYNFNAM.
  FIELD-SYMBOLS:<F4_TAB1> TYPE STANDARD TABLE .
  CLEAR:RETFIELD,DYNPROFIELD,P_RETURN_TAB[].
  CONCATENATE P_INTERTAB '-' P_E_FIELDNAME INTO DYNPROFIELD.
  RETFIELD = P_E_FIELDNAME.
  CASE P_E_FIELDNAME.
    WHEN 'ZXHPC'.
      SELECT SINGLE *
        FROM ZVMMPO
        WHERE EBELN = WA_ITEM-EBELN
        AND   EBELP = WA_ITEM-EBELP.
      SELECT SINGLE *
        FROM EKKN
        WHERE EBELN = ZVMMPO-EBELN
        AND   EBELP = ZVMMPO-EBELP.
      IF ZVMMPO-KNTTP = 'Q'.
        SELECT CHARG AS ZXHPC,
               RDLAB
          INTO TABLE @DATA(IT_MSRD)
          FROM MSRD
          WHERE WERKS = @WA_ITEM-WERKS
          AND   MATNR = @WA_ITEM-MATNR
          AND   LIFNR = @WA_HEAD-LIFNR
          AND   PSPNR = @EKKN-PS_PSP_PNR
          AND   RDLAB GT 0.
        CHECK SY-SUBRC = 0.
        ASSIGN IT_MSRD TO <F4_TAB1>.
      ELSE.
        SELECT CHARG AS ZXHPC,
               LBLAB
          INTO TABLE @DATA(IT_MSLB)
          FROM MSLB
          WHERE WERKS = @WA_ITEM-WERKS
          AND   MATNR = @WA_ITEM-MATNR
          AND   LIFNR = @WA_HEAD-LIFNR
          AND   LBLAB GT 0.
        CHECK SY-SUBRC = 0.
        ASSIGN IT_MSLB TO <F4_TAB1>.
      ENDIF.

    WHEN 'RKDW' OR 'ZJDW'.
      SELECT MATNR,
             MEINH AS RKDW
        INTO TABLE @DATA(IT_MARM)
        FROM MARM
        WHERE MATNR = @WA_ITEM-MATNR.
      CHECK SY-SUBRC = 0.
      ASSIGN IT_MARM TO <F4_TAB1>.
    WHEN 'LGORT'.
      SELECT LGORT,
             LGOBE
      INTO TABLE @DATA(IT_T001LA)
      FROM T001L
      WHERE WERKS = @WA_ITEM-WERKS.
      CHECK SY-SUBRC = 0.
      ASSIGN IT_T001LA TO <F4_TAB1>.
  ENDCASE.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST' "调用函数
    EXPORTING
      RETFIELD        = RETFIELD  "搜索帮助内表要输出的的帮助字段名，注：要大写
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = DYNPROFIELD "屏幕字段
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = <F4_TAB1> "存储搜索帮助内容的内表
      RETURN_TAB      = P_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
ENDFORM.
FORM BUT13.
  DATA:DJLX  TYPE ZTFILE_MANAGE_01-DJLX,
       NUM13 TYPE I.
  FIELD-SYMBOLS:<WA13> TYPE ANY.
  CLEAR:NUM13, SAPNO.
  LOOP AT <ITAB> ASSIGNING <WA13> .
    ASSIGN COMPONENT 'SEL' OF STRUCTURE <WA13> TO <FS>.
    IF SY-SUBRC EQ 0.
      IF <FS> = 'X'.
        NUM13 = NUM13 + 1.
        CASE SY-TCODE.
          WHEN TCODE4.
            ASSIGN COMPONENT 'EBELN' OF STRUCTURE <WA13> TO <FS>.
            IF SY-SUBRC EQ 0.
              SAPNO = <FS>.
            ENDIF.
            DJLX = 'MMPO'.
          WHEN OTHERS.
            ASSIGN COMPONENT 'ZDHDH' OF STRUCTURE <WA13> TO <FS>.
            IF SY-SUBRC EQ 0.
              SAPNO = <FS>.
            ENDIF.
            DJLX = 'DHTZ'.
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF NUM13 NE 1.
    MESSAGE E004.
  ENDIF.
  CALL FUNCTION 'ZFM_FTP_CALLZFTP'
    EXPORTING
      SAPNO = SAPNO
      SAPMK = 'MM'
      DJLX  = DJLX.

ENDFORM.
FORM BUT11 USING P_R_UCOMM.
  DATA:GOODSMVT_HEADER  TYPE BAPI2017_GM_HEAD_01,
       GOODSMVT_CODE    TYPE BAPI2017_GM_CODE,
       MATERIALDOCUMENT TYPE BAPI2017_GM_HEAD_RET-MAT_DOC,
       MATDOCUMENTYEAR  TYPE BAPI2017_GM_HEAD_RET-DOC_YEAR,
       GOODSMVT_ITEM    TYPE TABLE OF BAPI2017_GM_ITEM_CREATE WITH HEADER LINE.
  DATA:BEGIN OF IT_BWART OCCURS 0,
         SORTF  TYPE CHAR1,
         FIELD  TYPE CHAR30, "存放对应凭证的字段
         BWART1 TYPE BWART,
         CODE   TYPE GM_CODE,
         MBLNR  TYPE MBLNR,
         MJAHR  TYPE MJAHR,
         RTYPE  TYPE BAPI_MTYPE,
         RTMSG  TYPE BAPI_MSG,
       END OF IT_BWART,
       IT_MIGO TYPE TABLE OF ZSFMS_MIGOPOST WITH HEADER LINE.
  DATA:BKTXT   TYPE BKTXT,
       XBLNR   TYPE XBLNR,
       MBLNR   TYPE MBLNR,
       MJAHR   TYPE MJAHR,
       LINENUM TYPE MB_LINE_ID,
       PARTNUM TYPE MB_PARENT_ID.
  FIELD-SYMBOLS:<FS1> TYPE ANY.
  LOOP AT ITAB2 WHERE SEL = 'X'
                  AND GZ NE 'X'.
    CLEAR:ZTMM201,IT_MIGO[],BKTXT,XBLNR,IT_BWART[],
    WA_MBLNR,LINENUM,PARTNUM.
    SELECT SINGLE *
      FROM ZTMM201
      WHERE ZDHDH = ITAB2-ZDHDH
    AND   ZDHZT = 'D'.
    IF SY-SUBRC NE 0.
      MESSAGE E015.
    ENDIF.
    SELECT *
      INTO TABLE IT_ZTMM202
      FROM ZTMM202
    WHERE ZDHDH = ZTMM201-ZDHDH.
*根据到货类型等信息判断凭证-MBLNR存放101凭证，MBLNR1存放511、542凭证
    LOOP AT IT_ZTMM202.
      CLEAR:IT_BWART,IT_MIGO.
      CASE ZTMM201-ZDHLX+0(2).
        WHEN 'WW'.
          CASE ZTMM201-ZDHLX.
            WHEN 'WWHC' OR 'WWGD'.
              IT_BWART-BWART1 = '543'.
              IT_BWART-FIELD = 'MBLNR'.
              IT_BWART-SORTF = 'A'.
              COLLECT IT_BWART.
              IF IT_ZTMM202-ZJBS = 'X'
                AND IT_ZTMM202-ZJSL IS NOT INITIAL.
                IT_BWART-BWART1 = '542'.
                IT_BWART-FIELD = 'MBLNR1'.
                IT_BWART-SORTF = 'B'.
                IT_BWART-CODE = '04'.
                COLLECT IT_BWART.
              ENDIF.
            WHEN 'WWCL'.
              IT_BWART-BWART1 = '542'.
              IT_BWART-FIELD = 'MBLNR'.
              IT_BWART-SORTF = 'A'.
              IT_BWART-CODE = '04'.
              COLLECT IT_BWART.
          ENDCASE.
        WHEN OTHERS.
          IF IT_ZTMM202-ZMF = 'X'.
            IT_BWART-BWART1 = '511'.
            IT_BWART-FIELD = 'MBLNR1'.
            IT_BWART-SORTF = 'B'.
            IT_BWART-CODE = '06'.
            COLLECT IT_BWART.
          ELSE.
            IT_BWART-BWART1 = '101'.
            IT_BWART-FIELD = 'MBLNR'.
            IT_BWART-SORTF = 'A'.
            IT_BWART-CODE = '01'.
            COLLECT IT_BWART.
          ENDIF.
      ENDCASE.
    ENDLOOP.
*根据上边识别进行凭证生成
    SORT IT_BWART BY SORTF.
    LOOP AT IT_BWART.
      CLEAR:IT_MIGO[],BKTXT,XBLNR,GOODSMVT_HEADER,
      GOODSMVT_CODE,GOODSMVT_ITEM[],RETURN[].
      CASE IT_BWART-BWART1.
        WHEN '101' OR '542' OR '511'."直接用封装方法实现
          LOOP AT IT_ZTMM202 WHERE ZJSL IS NOT INITIAL.
            CLEAR IT_MIGO.
            IT_MIGO-MATNR = IT_ZTMM202-MATNR.
            IT_MIGO-WERKS = IT_ZTMM202-WERKS.
            IT_MIGO-MENGE = IT_ZTMM202-ZJSL.
            IT_MIGO-EBELN = IT_ZTMM202-EBELN.
            IT_MIGO-LIFNR = ZTMM201-LIFNR.
            IT_MIGO-EBELP = IT_ZTMM202-EBELP.
            IT_MIGO-LGORT = IT_ZTMM202-LGORT.
            CASE ZTMM201-ZDHLX+0(2).
              WHEN 'WW'.
                IF IT_ZTMM202-ZJBS = 'X'.
                  APPEND IT_MIGO.
                ENDIF.
              WHEN OTHERS.
                APPEND IT_MIGO.
            ENDCASE.
          ENDLOOP.
*防止重复执行
          ASSIGN COMPONENT IT_BWART-FIELD OF STRUCTURE ZTMM201 TO <FS>.
          IF SY-SUBRC EQ 0.
            IF <FS> IS NOT INITIAL.
              IT_BWART-MBLNR = <FS>.
              MODIFY IT_BWART.
              CONTINUE.
            ENDIF.
          ENDIF.
          IF IT_MIGO[] IS INITIAL.
            CONTINUE.
          ENDIF.
          CALL FUNCTION 'ZFMS_01_MIGOPOST'
            EXPORTING
              BUDAT  = ITAB2-BUDAT
              BKTXT  = BKTXT
              XBLNR  = XBLNR
              CODE   = IT_BWART-CODE
              BWART  = IT_BWART-BWART1
            IMPORTING
              RTYPE  = IT_BWART-RTYPE
              RTMSG  = IT_BWART-RTMSG
              MBLNR  = IT_BWART-MBLNR
              MJAHR  = IT_BWART-MJAHR
            TABLES
              ITEM   = IT_MIGO
            EXCEPTIONS
              OTHERS = 1.
        WHEN '543'.
          GOODSMVT_HEADER-PSTNG_DATE = ITAB2-BUDAT.
          GOODSMVT_HEADER-DOC_DATE = SY-DATUM.
          GOODSMVT_HEADER-HEADER_TXT = BKTXT.
          GOODSMVT_HEADER-PR_UNAME = SY-UNAME.
          GOODSMVT_CODE-GM_CODE = '01'.
          LOOP AT IT_ZTMM202 WHERE ZJBS NE 'X'.
            CLEAR:GOODSMVT_ITEM.
            ADD 1 TO LINENUM.
            GOODSMVT_ITEM-MOVE_TYPE = '101'.
            GOODSMVT_ITEM-MATERIAL = IT_ZTMM202-MATNR.
            GOODSMVT_ITEM-PLANT = IT_ZTMM202-WERKS.
            GOODSMVT_ITEM-STGE_LOC = IT_ZTMM202-LGORT.
            GOODSMVT_ITEM-ENTRY_QNT = IT_ZTMM202-ZJSL.
            GOODSMVT_ITEM-PO_PR_QNT = IT_ZTMM202-ZJSL.
*            GOODSMVT_ITEM-ENTRY_UOM = IT_EKPO-MEINS.
*            GOODSMVT_ITEM-ORDERPR_UN = IT_EKPO-MEINS.
            GOODSMVT_ITEM-VENDOR = ZTMM201-LIFNR.
            GOODSMVT_ITEM-MVT_IND = 'B'.
            GOODSMVT_ITEM-PO_NUMBER = IT_ZTMM202-EBELN.
            GOODSMVT_ITEM-PO_ITEM = IT_ZTMM202-EBELP.
            GOODSMVT_ITEM-LINE_ID = LINENUM.
            APPEND GOODSMVT_ITEM.
            PARTNUM = LINENUM.
            LOOP AT IT_ZTMM202 INTO DATA(WA202) WHERE EBELN = IT_ZTMM202-EBELN
                                                  AND EBELP = IT_ZTMM202-EBELP
                                                  AND ZJBS = 'X'.
              CLEAR:GOODSMVT_ITEM.
              GOODSMVT_ITEM-MOVE_TYPE = '543'.
              GOODSMVT_ITEM-SPEC_STOCK = 'O'.
              GOODSMVT_ITEM-VENDOR = ZTMM201-LIFNR.
              GOODSMVT_ITEM-MATERIAL = WA202-MATNR.
              GOODSMVT_ITEM-BATCH = WA202-CHARG.
              GOODSMVT_ITEM-PLANT = WA202-WERKS.
*              GOODSMVT_ITEM-ENTRY_UOM = IT_EKPO-MEINS.
              ADD 1 TO LINENUM.
              GOODSMVT_ITEM-LINE_ID = LINENUM.
              GOODSMVT_ITEM-PARENT_ID = PARTNUM.
              GOODSMVT_ITEM-LINE_DEPTH = '01'.
              APPEND GOODSMVT_ITEM.
            ENDLOOP.
          ENDLOOP.
          CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
            EXPORTING
              GOODSMVT_HEADER  = GOODSMVT_HEADER
              GOODSMVT_CODE    = GOODSMVT_CODE
              TESTRUN          = ''
            IMPORTING
              MATERIALDOCUMENT = IT_BWART-MBLNR
              MATDOCUMENTYEAR  = IT_BWART-MJAHR
            TABLES
              GOODSMVT_ITEM    = GOODSMVT_ITEM
              RETURN           = RETURN.
          LOOP AT RETURN WHERE TYPE CA 'AEX'.
            CONCATENATE IT_BWART-RTMSG RETURN-MESSAGE INTO IT_BWART-RTMSG
            SEPARATED BY '/'.
          ENDLOOP.
          IF SY-SUBRC EQ 0
            OR IT_BWART-MBLNR IS INITIAL.
            IT_BWART-RTYPE = 'E'.
          ELSE.
            IT_BWART-RTYPE = 'S'.
            IT_BWART-RTMSG = '成功'.
          ENDIF.
      ENDCASE.
      MODIFY IT_BWART.
    ENDLOOP.
*判断到货通知是全部凭证成功还是部分成功
    LOOP AT IT_BWART WHERE MBLNR IS INITIAL.
      EXIT.
    ENDLOOP.
    IF SY-SUBRC NE 0."全部成功
      CLEAR:IT_BWART.
      READ TABLE IT_BWART WITH KEY SORTF = 'A'.
      ITAB2-MBLNR = IT_BWART-MBLNR.
      ITAB2-MJAHR = IT_BWART-MJAHR.
      READ TABLE IT_BWART WITH KEY SORTF = 'B'.
      ITAB2-MBLNR1 = IT_BWART-MBLNR.
      ITAB2-ICON = GREEN.
      ITAB2-MSG = '成功'.
      ITAB2-GZ = 'X'.
      IF ITAB2-BUDAT IS INITIAL.
        ITAB2-BUDAT = SY-DATUM.
      ENDIF.
      CLEAR:ITAB2-CXMBLNR,ITAB2-CXMJAHR,ITAB2-CXMBLNR1.
      UPDATE ZTMM201
      SET CXMBLNR = ITAB2-CXMBLNR
          CXMJAHR = ITAB2-CXMJAHR
          GZ = ITAB2-GZ
          MBLNR = ITAB2-MBLNR
          MJAHR = ITAB2-MJAHR
          MBLNR1 = ITAB2-MBLNR1
          BUDAT = ITAB2-BUDAT
       WHERE ZDHDH = ITAB2-ZDHDH.
      COMMIT WORK.
      PERFORM CHGSTATUS USING ITAB2-ZDHDH P_R_UCOMM
      CHANGING MSG.
    ELSE.
      CLEAR IT_BWART.
      ITAB2-ICON = RED.
      LOOP AT IT_BWART WHERE RTYPE = 'E'.
        CONCATENATE ITAB2-MSG IT_BWART-RTMSG INTO ITAB2-MSG
        SEPARATED BY '/'.
      ENDLOOP.
      CLEAR IT_BWART.
      READ TABLE IT_BWART WITH KEY SORTF = 'A' RTYPE = 'S'.
      IF SY-SUBRC EQ 0.
        IF ITAB2-BUDAT IS INITIAL.
          ITAB2-BUDAT = SY-DATUM.
        ENDIF.
        ITAB2-MBLNR = IT_BWART-MBLNR.
        ITAB2-MJAHR = IT_BWART-MJAHR.
        CLEAR:ITAB2-CXMBLNR,ITAB2-CXMJAHR,ITAB2-CXMBLNR1,
        ITAB2-GZ.
        UPDATE ZTMM201
        SET CXMBLNR = ITAB2-CXMBLNR
            CXMJAHR = ITAB2-CXMJAHR
            CXMBLNR1 = ITAB2-CXMBLNR1
            GZ = ITAB2-GZ
            MBLNR = ITAB2-MBLNR
            MJAHR = ITAB2-MJAHR
            BUDAT = ITAB2-BUDAT
         WHERE ZDHDH = ITAB2-ZDHDH.
        COMMIT WORK.
      ENDIF.
    ENDIF.
    MODIFY ITAB2.
  ENDLOOP.
ENDFORM.
FORM BUT12 USING P_R_UCOMM.
  DATA:INITEM TYPE TABLE OF BAPI2017_GM_ITEM_04 WITH HEADER LINE.

  LOOP AT ITAB2 WHERE SEL = 'X'
                  AND GZ = 'X'.
    CLEAR:ZTMM201,WA_MBLNR.
    SELECT SINGLE *
      FROM ZTMM201
      WHERE ZDHDH = ITAB2-ZDHDH
    AND   ZDHZT = 'E'.
    IF SY-SUBRC NE 0.
      MESSAGE E016.
    ENDIF.
    WA_MBLNR-MBLNR = ZTMM201-MBLNR.
    WA_MBLNR-MJAHR = ZTMM201-MJAHR.
    WA_MBLNR-MBLNR1 = ZTMM201-MBLNR1.
    WA_MBLNR-BUDAT = ITAB2-BUDAT.
    IF ZTMM201-MBLNR IS NOT INITIAL."冲销第一张凭证
      PERFORM MBST(ZPUBFORM) TABLES INITEM
       USING WA_MBLNR-MBLNR WA_MBLNR-MJAHR WA_MBLNR-BUDAT
        CHANGING ITAB2-MSG.
      IF ITAB2-MSG+0(1) = 'S'.
        ITAB2-CXMBLNR = ITAB2-MSG+2(10).
        ITAB2-CXMJAHR = ITAB2-MSG+12(4).
        ITAB2-ICON = GREEN.
        CLEAR:ITAB2-MBLNR.
        IF ZTMM201-MBLNR1 IS INITIAL.
          CLEAR:ITAB2-GZ,ITAB2-MJAHR,ITAB2-BUDAT.
          PERFORM CHGSTATUS USING ITAB2-ZDHDH P_R_UCOMM
          CHANGING MSG.
        ENDIF.
        UPDATE ZTMM201
        SET CXMBLNR = ITAB2-CXMBLNR
            CXMJAHR = ITAB2-CXMJAHR
            GZ = ITAB2-GZ
            MBLNR = ITAB2-MBLNR
            MJAHR = ITAB2-MJAHR
            BUDAT = ITAB2-BUDAT
         WHERE ZDHDH = ITAB2-ZDHDH.
        COMMIT WORK.
      ELSE.
        ITAB2-ICON = RED.
        MODIFY ITAB2.
        CONTINUE.
      ENDIF.
    ENDIF.
    CLEAR ZTMM201.
    SELECT SINGLE *
      FROM ZTMM201
    WHERE ZDHDH = ITAB2-ZDHDH.
    IF ZTMM201-MBLNR1 IS NOT INITIAL.
      PERFORM MBST(ZPUBFORM) TABLES INITEM
        USING WA_MBLNR-MBLNR1 WA_MBLNR-MJAHR WA_MBLNR-BUDAT
        CHANGING ITAB2-MSG.
      IF ITAB2-MSG+0(1) = 'S'.
        ITAB2-CXMBLNR1 = ITAB2-MSG+2(10).
        ITAB2-ICON = GREEN.
        CLEAR:ITAB2-MBLNR, ITAB2-MJAHR,ITAB2-MBLNR1,
        ITAB2-GZ,ITAB2-BUDAT.
        UPDATE ZTMM201
        SET CXMBLNR1 = ITAB2-CXMBLNR1
            GZ = ITAB2-GZ
            MBLNR = ITAB2-MBLNR
            MBLNR1 = ITAB2-MBLNR1
            MJAHR = ITAB2-MJAHR
            BUDAT = ITAB2-BUDAT
         WHERE ZDHDH = ITAB2-ZDHDH.
        COMMIT WORK.
        PERFORM CHGSTATUS USING ITAB2-ZDHDH P_R_UCOMM
        CHANGING MSG.
      ELSE.
        ITAB2-ICON = RED.
      ENDIF.
    ENDIF.
    MODIFY ITAB2.
  ENDLOOP.
ENDFORM.
FORM BUT03.
  DATA:ZDHDH1    TYPE ZTMM201-ZDHDH,
       NUM1      TYPE I,
       WA_POINFO TYPE TY_OUT4.
  FIELD-SYMBOLS:<WA1> TYPE ANY,
                <FS1> TYPE ANY,
                <FS2> TYPE ANY.
  CLEAR :ZDHDH1,NUM1,WA_HEAD,IT_TEXT[],
  TDID,TEXTTABLE[],IT_KUNNR[],IT_EBELN[],IT_KNUMV[],
  IT_BANFN[],IT_MATNR[].
  LOOP AT <ITAB> ASSIGNING <WA1>.
    ASSIGN COMPONENT 'SEL' OF STRUCTURE <WA1> TO <FS1>.
    IF SY-SUBRC EQ 0.
      IF <FS1> = 'X'.
        NUM1 = NUM1 + 1.
        ASSIGN COMPONENT 'ZDHDH' OF STRUCTURE <WA1> TO <FS2>.
        IF SY-SUBRC EQ 0.
          ZDHDH1 = <FS2>.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.
  IF NUM1 NE 1.
    MESSAGE E004.
  ENDIF.
*取数据
  SELECT SINGLE *
    INTO WA_HEAD
    FROM ZTMM201
  WHERE ZDHDH = ZDHDH1.
  CHECK SY-SUBRC = 0.
  IF SY-SUBRC EQ 0.
    SELECT ZTMM202~*
      INTO TABLE @IT_ITEM
      FROM ZTMM202
    WHERE ZDHDH = @WA_HEAD-ZDHDH.
    CASE 'X'.
      WHEN P2_X OR P4_X OR P5_X.
        DELETE IT_ITEM WHERE DEL = 'X'.
      WHEN P3_X.
        CASE SY-TCODE.
          WHEN TCODE2 OR TCODE3.
            DELETE IT_ITEM WHERE DEL = 'X'.
        ENDCASE.
    ENDCASE.
    IF IT_ITEM[] IS NOT INITIAL.
      SORT IT_ITEM BY EBELN EBELP.
      SELECT *
        INTO TABLE IT_ZVMMPO
        FROM ZVMMPO
        FOR ALL ENTRIES IN IT_ITEM
        WHERE EBELN = IT_ITEM-EBELN
          AND EBELP = IT_ITEM-EBELP.
      SORT IT_ZVMMPO BY EBELN EBELP.
      LOOP AT IT_ITEM.
        CLEAR:IT_KNUMV,IT_EBELN,IT_BANFN,
        IT_MATNR,WA_POINFO.
        READ TABLE IT_ZVMMPO WITH KEY EBELN = IT_ITEM-EBELN
                                      EBELP = IT_ITEM-EBELP
                                      BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          MOVE-CORRESPONDING IT_ZVMMPO TO WA_POINFO.
          MOVE-CORRESPONDING WA_POINFO TO IT_ITEM.
          MODIFY IT_ITEM.
        ENDIF.

        IT_EBELN-EBELN = IT_ITEM-EBELN.
        IT_KNUMV-KNUMV = IT_ITEM-KNUMV.
        IT_KNUMV-POSNR = IT_ITEM-EBELP.
        IT_KNUMV-EBELP = IT_ITEM-EBELP.
        IT_BANFN-BANFN = IT_ITEM-BANFN.
        IT_MATNR-MATNR = IT_ITEM-MATNR.
        IT_KUNNR-KUNNR = IT_ITEM-ZBG.
        PERFORM ADDZERO(ZPUBFORM) CHANGING IT_KUNNR-KUNNR.
        COLLECT:IT_BANFN, IT_KNUMV,IT_MATNR,IT_EBELN,
        IT_KUNNR.
      ENDLOOP.

      PERFORM GETPUBDATA.
      LOOP AT IT_ITEM.
        PERFORM ADDZERO(ZPUBFORM) CHANGING IT_ITEM-ZBG.
        PERFORM FILLDATA CHANGING IT_ITEM.
*物料长描述
        PERFORM GETLONGTEXT(ZPUBFORM)
        USING 'GRUN' IT_ITEM-MATNR 'MATERIAL'
              CHANGING IT_ITEM-ZWLCMS.
        MODIFY IT_ITEM.
      ENDLOOP.
    ENDIF.
    SELECT SINGLE NAME1
      INTO WA_HEAD-NAMEL
      FROM LFA1
    WHERE LIFNR = WA_HEAD-LIFNR.
    SORT IT_ITEM BY ZDHHH.
  ENDIF.
  CASE 'X'.
    WHEN P2_X OR P4_X OR P5_X.
      LOCK '' ZDHDH1.
  ENDCASE.
  LOOP AT IT_LIST2.
    WA_HEAD-TDID = IT_LIST2-ID.
    EXIT.
  ENDLOOP.
  IF WA_HEAD-BUDAT = ''
    AND SY-TCODE = TCODE5.
    WA_HEAD-BUDAT = SY-DATUM.
  ENDIF.
  SELECT SINGLE NAME1
    INTO WA_HEAD-ZYSGST
    FROM LFA1
  WHERE LIFNR = WA_HEAD-ZYSGS.
  SELECT SINGLE NAME1
    INTO WA_HEAD-ZWLYT
    FROM KNA1
  WHERE KUNNR = WA_HEAD-ZWLY.
  READ TABLE IT_ZVTMM215 WITH KEY ZCKBM = WA_HEAD-ZCKBM BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_HEAD-ZCKMC = IT_ZVTMM215-ZCKMC.
  ENDIF.
*取长文本
  LOOP AT IT_LIST2.
    CALL FUNCTION 'ZFM_DEALLONGTEXT'
      EXPORTING
        INTYPE = 'O'
        TDID   = IT_LIST2-ID
        SAPNO  = WA_HEAD-ZDHDH
        SAPMK  = 'DHTZ'
      TABLES
        T_TEXT = T_TEXT.
    LOOP AT T_TEXT.
      CLEAR IT_TEXT.
      IT_TEXT-TDID = IT_LIST2-ID.
      IT_TEXT-TEXT = T_TEXT-TEXT.
      APPEND IT_TEXT.
    ENDLOOP.
  ENDLOOP.
  CALL SCREEN 9000.
ENDFORM.
FORM BUT01.
  DATA:BEGIN OF IT_CHECK1 OCCURS 0,
         EKORG TYPE EKORG,
         LIFNR TYPE LIFNR,
         WERKS TYPE WERKS_D,
         BSART TYPE EKKO-BSART,
       END OF IT_CHECK1,
       WA_TAB1 LIKE LINE OF ITAB1.
  DATA:ZCKBM TYPE ZTMM215-ZCKBM.
  CLEAR:IT_TEXT[],TEXTTABLE[],WA_HEAD,IT_ITEM[],IT_CHECK1[],WA_TAB1,
  TDID,IT_EBELP[],IT_RSNUM[],IT_RESB[],ZDHHH,IT_KUNNR[],IT_EBELN[],IT_KNUMV[],
  IT_BANFN[],IT_MATNR[],ZCKBM.
  LOOP AT ITAB1 WHERE SEL = 'X'.
    CLEAR:IT_CHECK1,IT_ITEM,IT_RSNUM.
    MOVE-CORRESPONDING ITAB1 TO IT_CHECK1.
    MOVE-CORRESPONDING ITAB1 TO IT_ITEM.
    IT_ITEM-ZCD = ITAB1-ZCHANDI.
    IF IT_ITEM-LGORT IS INITIAL.
      IT_ITEM-LGORT = ITAB1-LGORT1.
      IT_ITEM-LGOBE = ITAB1-LGOBE1.
    ENDIF.
    IT_ITEM-ZBG = ITAB1-ZBAOGUAN.
    COLLECT IT_CHECK1.
    CLEAR:IT_ITEM-CHBOX.
    IT_ITEM-ZSFHG = 'X'.
    ADD 100 TO ZDHHH.
    IT_ITEM-ZDHHH = ZDHHH.
    APPEND IT_ITEM.
    CASE ITAB1-PSTYP.
      WHEN '3'.
        IT_RSNUM-RSNUM = ITAB1-RSNUM.
        COLLECT IT_RSNUM.
    ENDCASE.
    IF ITAB1-ZCKBM IS NOT INITIAL.
      ZCKBM = ITAB1-ZCKBM.
    ENDIF.
  ENDLOOP.
  CASE P_ZDHLX.
    WHEN 'WWCL'.
      CLEAR:IT_ITEM[],ZDHHH.
  ENDCASE.
*添加组件
  PERFORM ADDZJ TABLES ITAB1.

  IF LINES( IT_CHECK1 ) NE 1.
    MESSAGE E000(OO) WITH '同一供应商、工厂、采购组织的采购订单才能创建'.
  ENDIF.
  IF IT_ITEM[] IS INITIAL.
    MESSAGE E000(OO) WITH '无明细数据'.
  ENDIF.
  LOOP AT IT_ITEM.
    CLEAR:IT_BANFN, IT_KNUMV,IT_MATNR,IT_EBELN,
    IT_KUNNR.
    IF IT_ITEM-ZJBS NE 'X'.
      IT_ITEM-RKDW = IT_ITEM-MEINS.
    ENDIF.
    IT_EBELN-EBELN = IT_ITEM-EBELN.
    IT_KNUMV-KNUMV = IT_ITEM-KNUMV.
    IT_KNUMV-POSNR = IT_ITEM-EBELP.
    IT_KNUMV-EBELP = IT_ITEM-EBELP.
    IT_BANFN-BANFN = IT_ITEM-BANFN.
    IT_MATNR-MATNR = IT_ITEM-MATNR.
    IT_KUNNR-KUNNR = IT_ITEM-ZBG.
    PERFORM ADDZERO(ZPUBFORM) CHANGING IT_KUNNR-KUNNR.
    COLLECT:IT_BANFN, IT_KNUMV,IT_MATNR,IT_EBELN,
    IT_KUNNR.
  ENDLOOP.

  PERFORM GETPUBDATA.

  READ TABLE ITAB1 INTO WA_TAB1 WITH KEY SEL = 'X'.
  MOVE-CORRESPONDING WA_TAB1 TO WA_HEAD.
  WA_HEAD-ERDAT = SY-DATUM.
  WA_HEAD-ERNAM = SY-UNAME.
  WA_HEAD-ZDHLX = P_ZDHLX.
  LOOP AT IT_LIST2.
    WA_HEAD-TDID = IT_LIST2-ID.
    EXIT.
  ENDLOOP.
*默认仓库编码
  WA_HEAD-ZCKBM = ZCKBM.
  READ TABLE IT_ZVTMM215 WITH KEY ZCKBM = WA_HEAD-ZCKBM BINARY SEARCH.
  IF SY-SUBRC EQ 0.
    WA_HEAD-ZCKDZ = IT_ZVTMM215-ZCKDZ.
    WA_HEAD-ZCKMC = IT_ZVTMM215-ZCKMC.
  ENDIF.
  LOOP AT IT_ITEM.
    PERFORM ADDZERO(ZPUBFORM) CHANGING IT_ITEM-ZBG.
    PERFORM FILLDATA CHANGING IT_ITEM.
    IF IT_ITEM-ZZFDZ IS NOT INITIAL
      AND WA_HEAD-ZXHDZ IS INITIAL.
      WA_HEAD-ZXHDZ = IT_ITEM-ZZFDZ.
    ENDIF.
    IF WA_HEAD-ZTHFS IS INITIAL.
      CASE IT_ITEM-ZYSFSGP.
        WHEN 'A'.
          WA_HEAD-ZTHFS = 'ZT'.
        WHEN 'B'.
          WA_HEAD-ZTHFS = 'SD'.
      ENDCASE.
    ENDIF.
    MODIFY IT_ITEM.
  ENDLOOP.
  CALL SCREEN 9000.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form BUT16
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM BUT16 .
  DATA:FIELDCATN   TYPE SLIS_T_FIELDCAT_ALV,
       IS_LAYOUTN  TYPE SLIS_LAYOUT_ALV,
       IS_VARIANTN TYPE DISVARIANT.
  CLEAR:IT_EBELP[],ITAB1A[],FIELDCATN,IT_SHOW2[],
  IS_LAYOUTN,IS_VARIANTN.
  LOOP AT ITAB1 WHERE SEL = 'X'.
    CLEAR:IT_EBELP.
    IT_EBELP-EBELN = ITAB1-EBELN.
    IT_EBELP-EBELP = ITAB1-EBELP.
    COLLECT IT_EBELP.
  ENDLOOP.
  IF IT_EBELP[] IS INITIAL.
    MESSAGE E003.
  ENDIF.
  ITAB1A[] = ITAB1[].
  SORT IT_EBELP BY EBELN EBELP.
  SORT ITAB1A BY EBELN EBELP.
  LOOP AT IT_EBELP.
    READ TABLE IT_SHOW1 WITH KEY EBELN = IT_EBELP-EBELN
                                 EBELP = IT_EBELP-EBELP
                                 BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      TABIX = SY-TABIX.
      LOOP AT IT_SHOW1 FROM TABIX.
        CLEAR:IT_SHOW2.
        IF IT_SHOW1-EBELN NE IT_EBELP-EBELN
          OR IT_SHOW1-EBELP NE IT_EBELP-EBELP.
          EXIT.
        ENDIF.
        IT_SHOW2 = IT_SHOW1.
        READ TABLE ITAB1A WITH KEY EBELN = IT_SHOW1-EBELN
                                   EBELP = IT_SHOW1-EBELP
                                   BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          IT_SHOW2-MWSKZ = ITAB1A-MWSKZ.
          IT_SHOW2-BUKRS = ITAB1A-BUKRS.
          IT_SHOW2-ZZL1 = ITAB1A-ZZL1.
          IT_SHOW2-NETPR = ITAB1A-NETPR.
          READ TABLE IT_T001 WITH KEY BUKRS = IT_SHOW2-BUKRS BINARY SEARCH.
          IF SY-SUBRC EQ 0.
            IT_SHOW2-BUTXT = IT_T001-BUTXT.
          ENDIF.
        ENDIF.
        APPEND IT_SHOW2.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  IF IT_SHOW2[] IS INITIAL.
    MESSAGE E005.
  ENDIF.

*构建ALV
  PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCATN USING :
   'BUKRS' '公司代码' '' '' '' '',
*   'BUTXT' '公司描述' '' '' '' '',
   'EBELN' '采购订单' '' '' '' '',
   'EBELP' '采购订单行号' '' '' '' '',
*   'LFGJA' '物料凭证年度' '' '' '' '',
   'LFBNR' '物料凭证' '' '' '' '',
   'LFPOS' '物料凭证行号' '' '' '' '',
   'MENGE' '待校验数量' '' '' '' '',
   'WRBTR' '金额' '' '' '' '',
   'MWSKZ' '税码' '' '' '' '',
   'ZZL1' '物料品名' '' '' '' '',
   'NETPR' '不含税单价' '' '' '' ''.
  IS_VARIANTN-REPORT = SY-REPID.
  IS_VARIANTN-HANDLE = '206W'.
  IS_LAYOUTN-COLWIDTH_OPTIMIZE = 'X'.
  IS_LAYOUTN-ZEBRA = 'X'.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      I_CALLBACK_PROGRAM    = SY-REPID
      IT_FIELDCAT           = FIELDCATN[]
      I_SAVE                = 'A' "控制缺省/特定用户
      IS_LAYOUT             = IS_LAYOUTN
      IS_VARIANT            = IS_VARIANTN
      I_SCREEN_START_COLUMN = 45
      I_SCREEN_END_COLUMN   = 155
      I_SCREEN_START_LINE   = 10
      I_SCREEN_END_LINE     = 30
    TABLES
      T_OUTTAB              = IT_SHOW2
    EXCEPTIONS
      PROGRAM_ERROR         = 1
      OTHERS                = 2.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form INITFIELDCATITEM
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INITFIELDCATITEM .
  PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCAT USING :
'ZDHDH' '到货通知单' '' '' '' '' ,
'ZDHLX' '到货类型' '' '' '' '' ,
'ZDHZT' '到货状态' '' '' '' '' ,
'ZTHFS' '提货方式' '' '' '' '' ,
'DEL' '整单删除标识' '' '' '' '' ,
'ZSHR' '审核人' '' '' '' '' ,
'LIFNR' '供应商编码' 'X' '' '' '' ,
'ZCKBM' '仓库编码' '' '' '' '' ,
'ZWCRQ' '完成日期' '' '' '' '' ,
'ZYSGS' '运输公司' 'X' '' '' '' ,
'ZYSGST' '运输公司描述' '' '' '' '' ,
'ZYSZRR' '运输责任人' '' '' '' '' ,
'ZSJ' '司机' '' '' '' '' ,
'ZSFZ' '身份证' '' '' '' '' ,
'ZCH' '车号' '' '' '' '' ,
'ZSJDH' '司机电话' '' '' '' '' ,
'ZJSFS' '结算方式' '' '' '' '' ,
'ZWLDJ' '物流单价' '' '' '' '' ,
'ZYSJE' '运输金额' '' '' '' '' ,
'ZZL' '总量' '' '' '' '' ,
'ZZZ' '总重' '' '' '' '' ,
'ZYSR' '项目现场验收人' '' '' '' '' ,
'ZDHRQ' '预计到货日期' '' '' '' '' ,
'ZYSRQ' '运输日期' '' '' '' '' ,
'ZWLY' '物流员' '' '' '' '' ,
'ZCKG' '长宽高' '' '' '' '' ,
'ZCX' '车型' '' '' '' '' ,
'ZYSFS' '运输方式' '' '' '' '' ,
'ZZFFS' '支付方式' '' '' '' '' ,
*'ZCCF' '仓储费' '' '' '' '' ,
'GZ' '过账标识' '' '' '' '' ,
'MBLNR' '物料凭证' '' '' 'X' '' ,
'MJAHR' '凭证年度' '' '' '' '' ,
*'ZSFCC' '' '' '' '' '' ,
'ZWMSJG' '推送WMS结果' '' '' '' '' ,
'ZXHDZ' '卸货地址' '' '' '' '' ,
'ZCKDZ' '仓库地址' '' '' '' '' ,
'ERDAT' '制单日期' '' '' '' '' ,
'ERNAM' '制单人' '' '' '' '' ,
'ZDHHH' '到货行号' '' '' '' '' ,
'DELI' '行项目删除标识' '' '' '' '' ,
'EBELN' '采购订单' 'X' '' 'X' '' ,
'EBELP' '订单行号' '' '' '' '' ,
'EKGRP' '采购组' '' '' '' '' ,
'T024' '采购组描述' '' '' '' '' ,
'PSPNR' 'WBS元素' '' '' '' '' ,
'POSID' '项目定义' '' '' '' '' ,
'POST1' '项目名称' '' '' '' '' ,
'MATNR' '物料号' '' '' '' '' ,
'ZZL1' '品名' '' '' '' '' ,
'ZJYBZ' '检验标准' '' '' '' '' ,
'ZXHL' '消耗量' '' '' '' '' ,
'ZDHL' '到货量' '' '' '' '' ,
'ZJSL' '结算量' '' '' '' '' ,
'ZRKL' '入库量' '' '' '' '' ,
'ZCML' '出米率' '' '' '' '' ,
'WERKS' '工厂' '' '' '' '' ,
'LGORT' '库存地' '' '' '' '' ,
'CHARG' '批次' '' '' '' '' ,
'ZMF' '免费' '' '' '' '' ,
'ZJH' '卷号' '' '' '' '' ,
'ZZBH' '自编号' '' '' '' '' ,
'ZZYH' '资源号' '' '' '' '' ,
'ZCD' '产地' '' '' '' '' ,
'ZKW' '库位' '' '' '' '' ,
'ZRKRQ' '入库日期' '' '' '' '' ,
'ZSCRQ' '生产日期' '' '' '' '' ,
'ZBZRQ' '保质日期' '' '' '' '' ,
'ZYXQ' '有效期' '' '' '' '' ,
'ZSFHG' '是否合格' '' '' '' '' ,
'ZBHGL' '不合格量' '' '' '' '' ,
'ZJYR' '检验人' '' '' '' '' ,
'ZBG' '保管' '' '' '' '' ,
'ZBZH' '备注' '' '' '' '' ,
'ZBHGSM' '不合格说明' '' '' '' '' ,
'ZDHLXT' '到货类型' '' '' '' '' ,
'ZDHZTT' '到货状态' '' '' '' '' ,
'ZTHFST' '提货方式' '' '' '' '' ,
'ZJSFST' '结算方式' '' '' '' '' ,
'ZYSFST' '运输方式' '' '' '' '' ,
'ZZFFST' '支付方式' '' '' '' '' ,
'ZSFHGT' '是否合格' '' '' '' '' ,
'MAKTX' '物料描述' '' '' '' '' ,
'ZWLCMS' '物料长描述' '' '' '' '' ,
'NAMEL' '供应商描述' '' '' '' '' ,
'LGOBE' '库存地描述' '' '' '' '' ,
'T024' '采购员' '' '' '' '' ,
'BUTXT' '公司名称' '' '' '' '' ,
'T023T' '物料组描述' '' '' '' '' ,
'BANFN' '采购申请号' 'X' '' 'X' '' ,
'BNFPO' '申请行号' '' '' '' '' ,
'AFNAM' '申请人' '' '' '' '' ,
'ZZFDZ' '卸货地址' '' '' '' '' ,
'KUNNR' '客户' 'X' '' '' '' ,
'NAMEK' '客户名称' '' '' '' '' ,
'ZBAOGUAN' '保管' '' '' '' '' ,
'ZCHANDI' '产地' '' '' '' '' ,
'BEDNR' '销售合同' '' '' '' '' ,
 'HANDLE' HANDLE '' 'X' '' '' .
ENDFORM.
*&---------------------------------------------------------------------*
*& Form INITFIELDCATHEAD
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM INITFIELDCATHEAD .
  PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCAT USING :
'ZDHDH' '到货通知单' '' '' '' '' ,
'ZDHLX' '到货类型' '' '' '' '' ,
'ZDHZT' '到货状态' '' '' '' '' ,
'ZTHFS' '提货方式' '' '' '' '' ,
'DEL' '整单删除标识' '' '' '' '' ,
'ZSHR' '审核人' '' '' '' '' ,
'LIFNR' '供应商编码' 'X' '' '' '' ,
'ZCKBM' '仓库编码' '' '' '' '' ,
'ZWCRQ' '完成日期' '' '' '' '' ,
'ZYSGS' '运输公司' 'X' '' '' '' ,
'ZYSGST' '运输公司描述' '' '' '' '' ,
'ZYSZRR' '运输责任人' '' '' '' '' ,
'ZSJ' '司机' '' '' '' '' ,
'ZSFZ' '身份证' '' '' '' '' ,
'ZCH' '车号' '' '' '' '' ,
'ZSJDH' '司机电话' '' '' '' '' ,
'ZJSFS' '结算方式' '' '' '' '' ,
'ZWLDJ' '物流单价' '' '' '' '' ,
'ZYSJE' '运输金额' '' '' '' '' ,
'ZZL' '总量' '' '' '' '' ,
'ZZZ' '总重' '' '' '' '' ,
'ZYSR' '项目现场验收人' '' '' '' '' ,
'ZDHRQ' '预计到货日期' '' '' '' '' ,
'ZYSRQ' '运输日期' '' '' '' '' ,
'ZWLY' '物流员' '' '' '' '' ,
'ZCKG' '长宽高' '' '' '' '' ,
'ZCX' '车型' '' '' '' '' ,
'ZYSFS' '运输方式' '' '' '' '' ,
'ZZFFS' '支付方式' '' '' '' '' ,
*'ZCCF' '仓储费' '' '' '' '' ,
'GZ' '过账标识' '' '' '' '' ,
'MBLNR' '物料凭证' '' '' 'X' '' ,
'MJAHR' '凭证年度' '' '' '' '' ,
'BUDAT' '过账日期' '' '' '' '' ,
*'ZSFCC' '' '' '' '' '' ,
'ZWMSJG' '推送WMS结果' '' '' '' '' ,
'ZXHDZ' '卸货地址' '' '' '' '' ,
'ZCKDZ' '仓库地址' '' '' '' '' ,
'ERDAT' '制单日期' '' '' '' '' ,
'ERNAM' '制单人' '' '' '' '' ,
'ZDHLXT' '到货类型' '' '' '' '' ,
'ZDHZTT' '到货状态' '' '' '' '' ,
'ZTHFST' '提货方式' '' '' '' '' ,
'ZJSFST' '结算方式' '' '' '' '' ,
'ZYSFST' '运输方式' '' '' '' '' ,
'ZZFFST' '支付方式' '' '' '' '' ,
'HANDLE' HANDLE '' 'X' '' '' .
*'ZSFCCT' '' '' '' '' '' ,
*'ZSFHGT' '是否合格' '' '' '' '' .
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CALZZZ
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
*总重的计算规则-明细变化，则总重刷新
FORM CALZZZ .
  CASE 'X'.
    WHEN P3_X OR P5_X.
    WHEN OTHERS.
      CLEAR:WA_HEAD-ZZZ.
      LOOP AT IT_ITEM INTO WA_ITEM WHERE DEL NE 'X'
                                     AND UEPOS IS INITIAL.
        WA_HEAD-ZZZ = WA_HEAD-ZZZ + WA_ITEM-ZDHL.
      ENDLOOP.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form CHECKMENGE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- WA_MOD_DATA_VALUE
*&      <-- FLAG
*&---------------------------------------------------------------------*
FORM CHECKMENGE  CHANGING P_WA_MOD_DATA_VALUE
                          P_FLAG.
  PERFORM CHECKMENGE(ZPUBFORM) CHANGING P_WA_MOD_DATA_VALUE P_FLAG.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form BUT99
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM BUT99.
  TYPES:BEGIN OF T_LIST,
*          ZXH    TYPE CHAR10,       "序号
          ZWCRQ TYPE ZTMM202-ZDHHH, "到货行号
          EBELN TYPE ZTMM202-EBELN, "采购订单号
          EBELP TYPE ZTMM202-EBELP, "行号
          ZWLCM TYPE CHAR100,      "物料长描述
          ZRKL  TYPE ZTMM202-ZRKL, "入库量
          LMEIN TYPE ZTMM202-RKDW, "入库单位
          ZRKRQ TYPE ZTMM202-ZDATE, "入库日期
          ZZL   TYPE ZTMM202-RKDW, "总量
*          ZDHL   TYPE ZTMM202-ZDHL, "到货量
          ZJH   TYPE ZTMM202-ZJH, "卷号
          ZZBH  TYPE ZTMM202-ZZBH, "自编号
          LGOBE TYPE T001L-LGOBE, "库存低
          ZJSL  TYPE ZTMM202-ZJSL, "结算量
        END OF T_LIST.
*  TYPES:BEGIN OF T_ZHU,
*          ZDHDH TYPE ZTMM201-ZDHDH,
*          NAMEL TYPE CHAR10,
*          ZSJ   TYPE ZTMM201-ZSJ,
*          ZCH   TYPE ZTMM201-ZCH,
*          ZSJDH TYPE ZTMM201-ZSJDH,
*        END OF T_ZHU.
  DATA: LIST TYPE TABLE OF T_LIST WITH HEADER LINE.
  DATA:BEGIN OF ERPDATA OCCURS 0,
         PDFID   TYPE STRING,
         PDFNAME TYPE STRING,
         ZDHDH   TYPE ZTMM201-ZDHDH,
         NAME1   TYPE CHAR10,
         BNAME   TYPE CHAR10,
         ZSJ     TYPE ZTMM201-ZSJ,
         ZCH     TYPE ZTMM201-ZCH,
         ZSJDD   TYPE ZTMM201-ZSJDH,
         ZNOW    TYPE ZTMM201-ZDATE,
         WERKS   TYPE CHAR20, "工厂
         ZBG     TYPE CHAR10, "保管
         LIST    TYPE TABLE OF T_LIST,
       END OF ERPDATA.
  DATA:URL(1024) TYPE  C.
  DATA:ZERPBH  TYPE ZTSD219-ZERPBH.
  DATA:ERPJSON TYPE STRING.
  DATA:ERPURL  TYPE STRING.
  DATA:LV_GUID TYPE GUID_16.
  DATA:RTYPE   TYPE BAPI_MTYPE,
       RTMSG   TYPE BAPI_MSG,
       PDFID   TYPE STRING,
       PDFNAME TYPE CHAR100,
*       ZHU     TYPE ZSSD265,
       TMPLID  TYPE STRING,
       ZHANGID TYPE STRING,
       OSSKEY  TYPE STRING.
  DATA: PDFHZ TYPE CHAR10 VALUE '.PDF'.
  CLEAR NUM.
  LOOP AT IT_ITEM INTO WA_ITEM WHERE CHBOX = 'X'.
    IF WA_ITEM-UEPOS IS INITIAL.
      NUM = NUM + 1.
    ENDIF.
  ENDLOOP.
  IF NUM < 1.
    MESSAGE S000(OO) WITH '请选择选择要打印的明细！' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  LOOP AT IT_ITEM.
    LIST-ZWCRQ  = IT_ITEM-ZDHHH.
    LIST-EBELN  = IT_ITEM-EBELN .
    LIST-EBELP  = IT_ITEM-EBELP .
    LIST-ZWLCM = IT_ITEM-ZWLCMS.
    LIST-ZRKL   = IT_ITEM-ZRKL  .
    LIST-LMEIN  = IT_ITEM-RKDW.
    LIST-ZRKRQ  = IT_ITEM-ZRKRQ.
*  LIST-ZZL    = IT_ITEM-ZDHHH.
    LIST-ZJH    = IT_ITEM-ZJH  .
    LIST-ZZBH   = IT_ITEM-ZZBH .
    LIST-LGOBE  = IT_ITEM-LGOBE.
    APPEND LIST.
  ENDLOOP.

  SELECT
 SINGLE ZTSD219~ZERPBH
  INTO  ZERPBH
  FROM ZTSD219
  WHERE ZTSD219~ZMOKUAI  = 'MM'
   AND  ZTSD219~ZLEIXING = '采购入库单'.
  IF SY-SUBRC <> 0.
    MESSAGE '未在SAP中配置到货通知单模板' TYPE 'E'.
    RETURN.
  ENDIF.

  READ TABLE IT_ITEM INDEX 1.
  ERPDATA-PDFID  =  ZERPBH    .
  ERPDATA-PDFNAME = WA_HEAD-ZDHDH && PDFHZ   .
  ERPDATA-ZDHDH  =  WA_HEAD-ZDHDH  .
  ERPDATA-NAME1  =  WA_HEAD-NAMEL  .
  ERPDATA-BNAME  =  IT_ITEM-T024.
  ERPDATA-ZSJ    =  WA_HEAD-ZSJ.
  ERPDATA-ZCH    =  WA_HEAD-ZCH.
  ERPDATA-ZSJDD  =  WA_HEAD-ZSJDH.
  ERPDATA-ZNOW   =  SY-DATUM.
  ERPDATA-WERKS  =  IT_ITEM-NAMEW.
  ERPDATA-ZBG    =  IT_ITEM-ZBG.
  ERPDATA-LIST    =  LIST[]     .

  ERPJSON         = /UI2/CL_JSON=>SERIALIZE( DATA = ERPDATA  COMPRESS = ABAP_FALSE PRETTY_NAME = /UI2/CL_JSON=>PRETTY_MODE-USER   ) .

*  CALL FUNCTION 'ZFMS_14_JSON'
*    CHANGING
*      JSONSTR = ERPJSON
*      DATA    = ERPDATA
*    EXCEPTIONS
*      OTHERS  = 1.

  TMPLID   = ZERPBH .
  ZHANGID  = 'NULL'.
  ZHANGID  = ''.
*& 获取GUID，根据GUID生成文件
  CALL FUNCTION 'GUID_CREATE'
    IMPORTING
      EV_GUID_16 = LV_GUID.

  OSSKEY   = 'CGORDER/' && LV_GUID && '.PDF' .
  CALL FUNCTION 'ZFM_GP_SD_ERP_PRINT'
    EXPORTING
      TMPLID   = TMPLID
      ZHANGID  = ZHANGID
      OSSKEY   = OSSKEY
      DATAJSON = ERPJSON
    IMPORTING
      URL      = ERPURL
      RTYPE    = RTYPE
      RTMSG    = RTMSG.
  IF RTYPE = 'S' AND ERPURL IS NOT INITIAL.
    URL = ERPURL.
    PERFORM REPLACE(ZPUBFORM) USING 'HTTPS' 'HTTP' CHANGING URL.
    PERFORM REPLACE(ZPUBFORM) USING 'HTTPS' 'HTTP' CHANGING URL.
    CALL FUNCTION 'CALL_BROWSER'
      EXPORTING
        URL                    = URL
        NEW_WINDOW             = 'X'
*       BROWSER_TYPE           =
*       CONTEXTSTRING          =
      EXCEPTIONS
        FRONTEND_NOT_SUPPORTED = 1
        FRONTEND_ERROR         = 2
        PROG_NOT_FOUND         = 3
        NO_BATCH               = 4
        UNSPECIFIED_ERROR      = 5
        OTHERS                 = 6.
  ELSE.
    MESSAGE S000(OO) WITH RTMSG DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.
ENDFORM.
