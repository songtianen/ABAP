*&---------------------------------------------------------------------*
*& Include ZROOALV_FRM
*&---------------------------------------------------------------------*
DATA: BEGIN OF TEXTTABLE OCCURS 0,
        TEXT TYPE CHAR255,
      END OF TEXTTABLE,
      BEGIN OF IT_TEXT OCCURS 0,
        TDID TYPE STXL-TDID,
        TEXT TYPE CHAR255,
      END OF IT_TEXT.
DATA: GO_EDITOR           TYPE REF TO CL_GUI_TEXTEDIT,
      GO_EDITOR_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
DATA:CONTAIN       TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
     ALVGRID       TYPE REF TO CL_GUI_ALV_GRID,
     IT_FIELDCAT   TYPE LVC_T_FCAT,
     WA_FIELDCAT   TYPE LVC_S_FCAT,
     IS_STABLE     TYPE LVC_S_STBL,
     CONTAIN1      TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
     ALVGRID1      TYPE REF TO CL_GUI_ALV_GRID,
     IT_FIELDCAT1  TYPE LVC_T_FCAT,
     IS_STABLE1    TYPE LVC_S_STBL,
     CONTAIN2      TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
     ALVGRID2      TYPE REF TO CL_GUI_ALV_GRID,
     IT_FIELDCAT2  TYPE LVC_T_FCAT,
     IS_STABLE2    TYPE LVC_S_STBL,
     IT_F4         TYPE  LVC_T_F4,
     WA_F4         TYPE  LVC_S_F4,
     WA_MODI       TYPE LVC_S_MODI,
     IT_CELL       TYPE LVC_T_STYL,
     WA_CELL       TYPE LVC_S_STYL,
     RETURN_TAB    TYPE  TABLE OF DDSHRETVAL,
     WA_RETURN_TAB TYPE DDSHRETVAL.
DATA:TDID TYPE TDID.
CONSTANTS: GREEN TYPE ICON-ID VALUE '@08@',
           RED   TYPE ICON-ID VALUE '@0A@'.
FIELD-SYMBOLS:<IT_MODI> TYPE LVC_T_MODI.
************************************************************************
*CALSS
*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER DEFINITION DEFERRED .
CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS HANDLE_DOUBLE_CLICK1"双击
      FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW E_COLUMN ES_ROW_NO.

    METHODS HANDLE_DATA_CHANGED1"数据更改
      FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
      IMPORTING ER_DATA_CHANGED.
    METHODS DATA_CHANGED_FINISHED1
    FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
    IMPORTING E_MODIFIED ET_GOOD_CELLS.
    METHODS HANDLE_TOOLBAR1"工具栏
      FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
      IMPORTING E_OBJECT E_INTERACTIVE.
    METHODS HANDLE_COMMAND1"响应事件
      FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
      IMPORTING E_UCOMM.
    METHODS HANDLE_HOTSPOT_CLICK1"单点点击
      FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW_ID E_COLUMN_ID.
*F4搜索帮助
    METHODS HANDLE_ON_F41 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING SENDER
                E_FIELDNAME
                ES_ROW_NO
                ER_EVENT_DATA.
  PRIVATE SECTION.
ENDCLASS.                    "LCL_EVENT_RECEIVER DEFINITION
*----------------------------------------------------------------------*
*       CLASS LCL_EVENT_RECEIVER IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
  METHOD HANDLE_DOUBLE_CLICK1.
  ENDMETHOD.                    "handle_double_click

  METHOD HANDLE_DATA_CHANGED1.
    DATA:MOD_DATA    TYPE LVC_T_MODI,
         WA_MOD_DATA TYPE LVC_S_MODI.
    CLEAR:MOD_DATA,WA_MOD_DATA.
    MOD_DATA = ER_DATA_CHANGED->MT_MOD_CELLS.
    LOOP AT MOD_DATA INTO WA_MOD_DATA.
*      READ TABLE GT_OUT INTO WA_OUT INDEX WA_MOD_DATA-ROW_ID.
      CASE WA_MOD_DATA-FIELDNAME.
        WHEN 'PSPID'.
      ENDCASE.
*      MODIFY GT_OUT FROM WA_OUT INDEX WA_MOD_DATA-ROW_ID.
    ENDLOOP.
    PERFORM REFRESH.
  ENDMETHOD.                    "handle_data_changed
  METHOD DATA_CHANGED_FINISHED1.
  ENDMETHOD.
  METHOD HANDLE_COMMAND1.
    PERFORM USER_COMMAND1 USING E_UCOMM.
  ENDMETHOD.
  METHOD HANDLE_TOOLBAR1.
    DATA: LS_TOOLBAR TYPE STB_BUTTON,
          DISABLED   TYPE CHAR1,
          DISABLED1  TYPE CHAR1.
    CLEAR: LS_TOOLBAR,DISABLED,DISABLED1.
    CLEAR LS_TOOLBAR.
    LS_TOOLBAR-BUTN_TYPE = 3. " 分隔符
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'ALL'.    " 功能码
    LS_TOOLBAR-ICON = '@4B@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '全选'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '全选'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'SAL'.    " 功能码
    LS_TOOLBAR-ICON = '@4D@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '取消全选'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '取消全选'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
  ENDMETHOD.                    "HANDLE_TOOLBAR
  METHOD HANDLE_HOTSPOT_CLICK1.
*    DATA:WA LIKE LINE OF ITAB1.
    CONDENSE E_ROW_ID     NO-GAPS.
    CONDENSE E_COLUMN_ID  NO-GAPS.
    CASE E_COLUMN_ID.
      WHEN 'CHBOX'.
*        READ TABLE ITAB1 INTO WA INDEX E_ROW_ID.
*        IF WA-CHBOX = 'X'.
*          WA-CHBOX = ''.
*        ELSE.
*          WA-CHBOX = 'X'.
*        ENDIF.
*        MODIFY ITAB1 FROM WA INDEX E_ROW_ID TRANSPORTING CHBOX.
    ENDCASE.
    PERFORM REFRESH.
  ENDMETHOD.
*F4搜索帮助
  METHOD HANDLE_ON_F41.
    CLEAR:RETURN_TAB,WA_RETURN_TAB.
    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
    ASSIGN ER_EVENT_DATA->M_DATA->* TO <IT_MODI>.
*    READ TABLE ITAB INTO WA INDEX ES_ROW_NO-ROW_ID.
    CHECK SY-SUBRC = 0.
    CASE E_FIELDNAME.
      WHEN 'EBELP'.
*        PERFORM F4HELP TABLES RETURN_TAB USING  E_FIELDNAME 'ITAB' WA.
    ENDCASE.
    IF RETURN_TAB[] IS NOT INITIAL.
      READ TABLE RETURN_TAB INTO WA_RETURN_TAB INDEX 1.
      IF SY-SUBRC EQ 0.
        WA_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
        WA_MODI-FIELDNAME = E_FIELDNAME.
        WA_MODI-VALUE = WA_RETURN_TAB-FIELDVAL.
        APPEND WA_MODI TO <IT_MODI>.
      ENDIF.
    ENDIF.
    PERFORM REFRESH.
  ENDMETHOD.
ENDCLASS.                    "LCL_EVENT_RECEIVER IMPLEMENTATION
DATA:LCL_EVENT_RECEIVER1 TYPE REF TO LCL_EVENT_RECEIVER.
******************************************************************
*PBO中ALV展示
FORM SHOWITEM .
  "创建容器
  IF ALVGRID IS INITIAL.
    CREATE OBJECT CONTAIN
      EXPORTING
        CONTAINER_NAME              = 'CONT1'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.
    IF SY-SUBRC NE 0.
      MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
    ENDIF.
    CREATE OBJECT ALVGRID
      EXPORTING
        I_PARENT = CONTAIN.

    CALL METHOD CL_GUI_CFW=>DISPATCH.

    CREATE OBJECT LCL_EVENT_RECEIVER1.
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_DOUBLE_CLICK1 FOR ALVGRID.
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_DATA_CHANGED1 FOR ALVGRID."数据发生更改时
    SET HANDLER LCL_EVENT_RECEIVER1->DATA_CHANGED_FINISHED1 FOR ALVGRID."单元格失去焦点时
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_HOTSPOT_CLICK1 FOR ALVGRID."热点点击
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_TOOLBAR1 FOR ALVGRID."增加按钮
    SET HANDLER LCL_EVENT_RECEIVER1->HANDLE_COMMAND1 FOR ALVGRID."按钮响应
    ALVGRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED )."mc_evt_enter,失去焦点时出发数据改变
*    ALVGRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER )."mc_evt_enter回车时出发数据改变
    ALVGRID->REGISTER_DELAYED_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_DELAYED_CHANGE_SELECT )."MC_EVT_DELAYED_CHANGE_SELECT

    PERFORM CALLALVN.
  ELSE.
    PERFORM CALLALVN.
  ENDIF.
*刷新ALV
  PERFORM REFRESHALV(ZPUBFORM) USING ALVGRID.
ENDFORM.
FORM CALLALVN.
  CLEAR:IT_FIELDCAT.
*FIELDCAT
*  PERFORM FILLFIELDCAT TABLES IT_FIELDCAT USING:
*注册搜索帮助
  CLEAR:IT_F4.
  LOOP AT IT_FIELDCAT INTO WA_FIELDCAT WHERE F4AVAILABL = 'X'
                                          AND EDIT = 'X'.
    CLEAR:WA_F4.
    WA_F4-FIELDNAME = WA_FIELDCAT-FIELDNAME.
    WA_F4-REGISTER = 'X'.
    WA_F4-GETBEFORE = SPACE.
    WA_F4-CHNGEAFTER = 'X'.
    INSERT WA_F4 INTO TABLE IT_F4.
  ENDLOOP.
  CALL METHOD ALVGRID->REGISTER_F4_FOR_FIELDS
    EXPORTING
      IT_F4 = IT_F4.
*  PERFORM CALLALV(ZPUBFORM)
* TABLES IT_ITEM USING ALVGRID IT_FIELDCAT.
ENDFORM.
FORM USER_COMMAND1  USING    P_E_UCOMM.
  CASE P_E_UCOMM.
    WHEN 'ALL'.
*      LOOP AT ITAB1.
*        ITAB1-CHBOX = 'X'.
*        MODIFY ITAB1 TRANSPORTING CHBOX.
*      ENDLOOP.
    WHEN 'SAL'.
*      LOOP AT ITAB1.
*        ITAB1-CHBOX = ''.
*        MODIFY ITAB1 TRANSPORTING CHBOX.
*      ENDLOOP.
  ENDCASE.
ENDFORM.
FORM REFRESH.
  PERFORM REFRESHALV(ZPUBFORM) USING ALVGRID.
ENDFORM.
*设置单元格不可编辑-字段名内表
*LAYOUT-STYLEFNAME = 'CELLSTYLE'.，对应内表增加CELLSTYLE TYPE LVC_T_STYL
FORM EDITCELL TABLES IN_FIELD OUT_CELL STRUCTURE LVC_S_STYL.
  FIELD-SYMBOLS:<FS_CELL>  TYPE ANY,
                <FS_CELL1> TYPE ANY.
  DATA:WA_CELL      TYPE LVC_S_STYL.
  CLEAR:OUT_CELL, WA_CELL.
  LOOP AT IN_FIELD ASSIGNING <FS_CELL>.
    CLEAR WA_CELL.
    ASSIGN COMPONENT SY-TABIX OF STRUCTURE <FS_CELL> TO <FS_CELL1>.
    IF SY-SUBRC EQ 0.
      WA_CELL-FIELDNAME = <FS_CELL1>.
      WA_CELL-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
      INSERT WA_CELL INTO TABLE OUT_CELL.
    ENDIF.
  ENDLOOP.
ENDFORM.
*编辑状态的设置
*    CALL METHOD GRID1->SET_READY_FOR_INPUT
*      EXPORTING
*        I_READY_FOR_INPUT = 1.
******************************************************************

************************************************************************
*长文本
*长文本PBO初始化
FORM EDITCONTAINER.
  IF GO_EDITOR_CONTAINER IS INITIAL.
    CREATE OBJECT GO_EDITOR_CONTAINER
      EXPORTING
        CONTAINER_NAME              = 'CONTTEXT1'
      EXCEPTIONS
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5.

    CREATE OBJECT GO_EDITOR
      EXPORTING
        PARENT                     = GO_EDITOR_CONTAINER
        WORDWRAP_MODE              = CL_GUI_TEXTEDIT=>WORDWRAP_AT_FIXED_POSITION
        WORDWRAP_POSITION          = '100'
        WORDWRAP_TO_LINEBREAK_MODE = CL_GUI_TEXTEDIT=>TRUE.
  ENDIF.
  CALL METHOD GO_EDITOR->SET_TOOLBAR_MODE
    EXPORTING
      TOOLBAR_MODE = 0.

  CALL METHOD GO_EDITOR->SET_READONLY_MODE
    EXPORTING
      READONLY_MODE = 1.

  CALL METHOD GO_EDITOR->SET_STATUSBAR_MODE
    EXPORTING
      STATUSBAR_MODE = 0.

  PERFORM CLEAR_TEXT.
  CL_GUI_CONTROL=>SET_FOCUS( GO_EDITOR ).
ENDFORM.
*PAI编辑文本
FORM EDITTEXT.
*若TDID发生变化
*  IF TDID NE WA_HEAD-TDID
*    AND TDID IS NOT INITIAL.
  PERFORM SCREEN2TAB USING ''."TDID
*  ENDIF.
  PERFORM TAB2SCREEN USING ''."WA_HEAD-TDID
*  TDID = WA_HEAD-TDID.
ENDFORM.
*清除文本
FORM CLEAR_TEXT.
*  REFRESH:TEXTTABLE.
  CALL METHOD GO_EDITOR->SET_TEXT_AS_STREAM
    EXPORTING
      TEXT            = TEXTTABLE[]
    EXCEPTIONS
      ERROR_DP        = 1
      ERROR_DP_CREATE = 2
      OTHERS          = 3.
  CALL METHOD CL_GUI_CFW=>FLUSH.
ENDFORM.
FORM TAB2SCREEN USING P_TDID.
*清空
  CLEAR TEXTTABLE[].
  CALL METHOD GO_EDITOR->DELETE_TEXT .
  CALL METHOD CL_GUI_CFW=>FLUSH.

*取出已有的
  LOOP AT IT_TEXT WHERE TDID = P_TDID.
    CLEAR:TEXTTABLE.
    TEXTTABLE-TEXT = IT_TEXT-TEXT.
    APPEND TEXTTABLE.
  ENDLOOP.
  CALL METHOD GO_EDITOR->SET_TEXT_AS_STREAM
    EXPORTING
      TEXT            = TEXTTABLE[]
    EXCEPTIONS
      ERROR_DP        = 1
      ERROR_DP_CREATE = 2
      OTHERS          = 3.
  CALL METHOD CL_GUI_CFW=>FLUSH.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form SCREEN2TAB
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> TDID
*&---------------------------------------------------------------------*
FORM SCREEN2TAB  USING    P_TDID.
  REFRESH:TEXTTABLE.
  "将容器中内容解析到内表
  GO_EDITOR->GET_TEXT_AS_R3TABLE( IMPORTING TABLE = TEXTTABLE[] ).
*将切换前的记录
  DELETE IT_TEXT WHERE TDID = P_TDID.
  LOOP AT TEXTTABLE.
    CLEAR:IT_TEXT.
    IT_TEXT-TDID = P_TDID.
    IT_TEXT-TEXT = TEXTTABLE-TEXT.
    APPEND IT_TEXT.
  ENDLOOP.
ENDFORM.
***********************************************************************
*&---------------------------------------------------------------------*
*& Form F4HELP
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> RETURN_TAB
*&      --> E_FIELDNAME
*&      --> P_
*&      --> WA
*&---------------------------------------------------------------------*
FORM F4HELP  TABLES   P_RETURN_TAB STRUCTURE DDSHRETVAL
             USING    P_E_FIELDNAME
                      P_INTERTAB
                      P_INWA.
  DATA:RETFIELD    TYPE DFIES-FIELDNAME,
       DYNPROFIELD TYPE DYNFNAM.
  FIELD-SYMBOLS:<F4_TAB1> TYPE STANDARD TABLE .
  CLEAR:RETFIELD,DYNPROFIELD,P_RETURN_TAB[].
  CONCATENATE P_INTERTAB '-' P_E_FIELDNAME INTO DYNPROFIELD.
  RETFIELD = P_E_FIELDNAME.
  CASE P_E_FIELDNAME.
    WHEN 'SEGMENT'.
*      ASSIGN IT_SEGMT TO <F4_TAB1>.
  ENDCASE.
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST' "调用函数
    EXPORTING
      RETFIELD        = RETFIELD  "搜索帮助内表要输出的的帮助字段名，注：要大写
      DYNPPROG        = SY-REPID
      DYNPNR          = SY-DYNNR
      DYNPROFIELD     = DYNPROFIELD "屏幕字段
      VALUE_ORG       = 'S'
    TABLES
      VALUE_TAB       = <F4_TAB1> "存储搜索帮助内容的内表
      RETURN_TAB      = P_RETURN_TAB
    EXCEPTIONS
      PARAMETER_ERROR = 1
      NO_VALUES_FOUND = 2
      OTHERS          = 3.
ENDFORM.
