*&---------------------------------------------------------------------*
*& Include ZFI025_3_CLS
*&---------------------------------------------------------------------*
*回车响应事件
*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.

    METHODS
      HANDLE_F4
        FOR EVENT ONF4 OF CL_GUI_ALV_GRID
        IMPORTING E_FIELDNAME
                  ES_ROW_NO
                  ER_EVENT_DATA
                  ET_BAD_CELLS.

    METHODS
      HANDLE_MODIFY
        FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED
                  ET_GOOD_CELLS.

    METHODS
      HANDLE_MODIFY1
        FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
        IMPORTING E_MODIFIED
                  ET_GOOD_CELLS.

ENDCLASS.                    "LCL_EVENT_RECEIVER DEFINITION
*----------------------------------------------------------------------*
*       CLASS LCL_EVENT_RECEIVER IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
  METHOD  HANDLE_F4.
    DATA STBL TYPE LVC_S_STBL.
    DATA:WA LIKE LINE OF GT_OUT .
    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
    ASSIGN ER_EVENT_DATA->M_DATA->* TO <IT_MODI>.
    CASE E_FIELDNAME.
      WHEN 'ZPYCAT'.
        PERFORM F4_HELP_ZPYCAT USING E_FIELDNAME
                                     ES_ROW_NO.
      WHEN 'SEGMENT'.
        READ TABLE GT_OUT INTO WA INDEX ES_ROW_NO-ROW_ID.
        CHECK SY-SUBRC = 0.
        PERFORM F4HELP TABLES RETURN_TAB USING  E_FIELDNAME 'GT_OUT' WA.
        IF RETURN_TAB[] IS NOT INITIAL.
          READ TABLE RETURN_TAB INTO WA_RETURN_TAB INDEX 1.
          IF SY-SUBRC EQ 0.
            WA_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
            WA_MODI-FIELDNAME = E_FIELDNAME.
            WA_MODI-VALUE = WA_RETURN_TAB-FIELDVAL.
            APPEND WA_MODI TO <IT_MODI>.
          ENDIF.
        ENDIF.
    ENDCASE.
    STBL-ROW = 'X'." 基于行的稳定刷新
    STBL-COL = 'X'." 基于列稳定刷新
    CALL METHOD GO_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = STBL.

  ENDMETHOD.                    "HANDLE_F4

  METHOD HANDLE_MODIFY.
    DATA STBL TYPE LVC_S_STBL.

    PERFORM FRM_MODIFY. "界面回车更新数据

    STBL-ROW = 'X'." 基于行的稳定刷新
    STBL-COL = 'X'." 基于列稳定刷新
    CALL METHOD GO_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = STBL.
  ENDMETHOD.                    "HANDLE_MODIFY

  METHOD HANDLE_MODIFY1.
    DATA STBL TYPE LVC_S_STBL.

    PERFORM FRM_MODIFY1. "界面回车更新数据

    STBL-ROW = 'X'." 基于行的稳定刷新
    STBL-COL = 'X'." 基于列稳定刷新
    CALL METHOD GO_ALV->REFRESH_TABLE_DISPLAY
      EXPORTING
        IS_STABLE = STBL.
  ENDMETHOD.                    "HANDLE_MODIFY

ENDCLASS.                    "LCL_EVENT_RECEIVER IMPLEMENTATION

DATA:GT_EVENT_RECEIVER TYPE REF TO LCL_EVENT_RECEIVER.

CLASS LCL_EVENT_RECEIVERN DEFINITION DEFERRED .
*DATA: EVENT_RECEIVER TYPE REF TO LCL_EVENT_RECEIVER.
CLASS LCL_EVENT_RECEIVERN DEFINITION.
  PUBLIC SECTION.
*    CLASS-METHODS:HANDLE_DELAYED_CHANGED_SEL_CB1
*  FOR EVENT DELAYED_CHANGED_SEL_CALLBACK OF CL_GUI_ALV_GRID.
    METHODS HANDLE_DOUBLE_CLICK"双击
      FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW E_COLUMN ES_ROW_NO.

    METHODS HANDLE_DATA_CHANGED1"数据更改
      FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
      IMPORTING ER_DATA_CHANGED.
    METHODS HANDLE_DATA_CHANGED2"数据更改
      FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
      IMPORTING ER_DATA_CHANGED.
    METHODS HANDLE_TOOLBAR1"工具栏
      FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
      IMPORTING E_OBJECT E_INTERACTIVE.
    METHODS HANDLE_TOOLBAR2"工具栏
      FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
      IMPORTING E_OBJECT E_INTERACTIVE.
    METHODS HANDLE_COMMAND1"响应事件
      FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
      IMPORTING E_UCOMM.
    METHODS HANDLE_COMMAND2"响应事件
      FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
      IMPORTING E_UCOMM.
    METHODS HANDLE_HOTSPOT_CLICK1"单点点击
      FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW_ID E_COLUMN_ID.
    METHODS HANDLE_HOTSPOT_CLICK2"单点点击
      FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
      IMPORTING E_ROW_ID E_COLUMN_ID.
*F4搜索帮助
    METHODS HANDLE_ON_F41 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING SENDER
                E_FIELDNAME
                ES_ROW_NO
                ER_EVENT_DATA.
*F4搜索帮助
    METHODS HANDLE_ON_F42 FOR EVENT ONF4 OF CL_GUI_ALV_GRID
      IMPORTING SENDER
                E_FIELDNAME
                ES_ROW_NO
                ER_EVENT_DATA.
  PRIVATE SECTION.
ENDCLASS.                    "lcl_event_receiver DEFINITION
CLASS LCL_EVENT_RECEIVERN IMPLEMENTATION.
*  METHOD HANDLE_DELAYED_CHANGED_SEL_CB1.
*    DATA: LT_ROWS TYPE LVC_T_ROW,
*          LS_ROW  TYPE LVC_S_ROW.
*
*    CALL METHOD ALVGRID->GET_SELECTED_ROWS
*      IMPORTING
*        ET_INDEX_ROWS = LT_ROWS.
*    CALL METHOD CL_GUI_CFW=>FLUSH.
*  ENDMETHOD.
  METHOD HANDLE_DOUBLE_CLICK.
*    PERFORM ATDOUBLECLICK USING E_ROW E_COLUMN ES_ROW_NO.
  ENDMETHOD.                    "handle_double_click

  METHOD HANDLE_DATA_CHANGED1.
    DATA:MOD_DATA    TYPE LVC_T_MODI,
         WA_MOD_DATA TYPE LVC_S_MODI.
    DATA:WA_OUT LIKE LINE OF GT_OUT,
         SEGM   TYPE FAGL_SEGMT-SEGMENT.
    CLEAR:MOD_DATA,WA_MOD_DATA,WA_OUT.
    MOD_DATA = ER_DATA_CHANGED->MT_MOD_CELLS.
    LOOP AT MOD_DATA INTO WA_MOD_DATA.
      CLEAR WA_OUT.
      READ TABLE GT_OUT INTO WA_OUT INDEX WA_MOD_DATA-ROW_ID.
      CASE WA_MOD_DATA-FIELDNAME.
        WHEN 'PSPNR'.
          CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
            EXPORTING
              INPUT     = WA_MOD_DATA-VALUE
            IMPORTING
              OUTPUT    = WA_MOD_DATA-VALUE
            EXCEPTIONS
              NOT_FOUND = 1
              OTHERS    = 2.
          SELECT SINGLE ZTPS010A~PSPID,
                        PRPS~POST1 AS POST1WBS,
                        ZTPS010A~KUNNR,
                        PRPS~PSPNR,
                        PRPS~PSPHI,
                        PROJ~POST1
            INTO @DATA(WA_ZTPS010A)
            FROM ZTPS010A INNER JOIN PROJ ON ZTPS010A~PSPID = PROJ~PSPID
                          INNER JOIN PRPS ON PROJ~PSPNR = PRPS~PSPHI
            WHERE PRPS~FAKKZ = 'X'
            AND   PRPS~PSPNR = @WA_MOD_DATA-VALUE.
          IF SY-SUBRC EQ 0.
            WA_OUT-PSPID = WA_ZTPS010A-PSPID.
            WA_OUT-POST1 = WA_ZTPS010A-POST1.
            WA_OUT-POST1WBS = WA_ZTPS010A-POST1WBS.
            WA_OUT-KUNWE = WA_ZTPS010A-KUNNR.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = WA_OUT-KUNWE
              IMPORTING
                OUTPUT = WA_OUT-KUNWE.
            SELECT SINGLE NAME1
              INTO WA_OUT-NAME1
              FROM KNA1
              WHERE KUNNR = WA_OUT-KUNWE.
          ENDIF.
        WHEN 'SEGMENT'.
          SEGM = WA_MOD_DATA-VALUE.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = SEGM
            IMPORTING
              OUTPUT = SEGM.
          SELECT SINGLE NAME
            INTO WA_OUT-SEGMT
            FROM FAGL_SEGMT
            WHERE SEGMENT = SEGM
            AND   LANGU = SY-LANGU.
        WHEN 'PSEGMENT'.
          SEGM = WA_MOD_DATA-VALUE.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = SEGM
            IMPORTING
              OUTPUT = SEGM.
          SELECT SINGLE NAME
            INTO WA_OUT-PSEGMT
            FROM FAGL_SEGMT
            WHERE SEGMENT = SEGM
            AND   LANGU = SY-LANGU.
        WHEN 'BSTKD'.
          SELECT SINGLE VBELN
            INTO WA_OUT-ZUONR
            FROM VBKD
            WHERE BSTKD = WA_MOD_DATA-VALUE
            AND   POSNR = '000000'.
        WHEN 'ZUONR'.
          DATA:L_VBELN TYPE VBELN.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_MOD_DATA-VALUE
            IMPORTING
              OUTPUT = L_VBELN.

          SELECT SINGLE *
            INTO VBKD
            FROM VBKD
            WHERE VBELN = L_VBELN
            AND   POSNR = '000000'.
          IF SY-SUBRC EQ 0.
            WA_OUT-BSTKD = VBKD-BSTKD.
          ENDIF.
        WHEN 'PARTNER'.
          DATA:KUNNRCHG TYPE KUNNR.
          CLEAR KUNNRCHG.
          KUNNRCHG = WA_MOD_DATA-VALUE.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = KUNNRCHG
            IMPORTING
              OUTPUT = KUNNRCHG.
          SELECT SINGLE NAME1
            INTO WA_OUT-NAME_ORG1
            FROM KNA1
            WHERE KUNNR = KUNNRCHG.
        WHEN 'ZPYCAT'.
          SELECT SINGLE BUSTXT
            INTO WA_OUT-BUSTXT
            FROM ZTFI_DEALTYPE
            WHERE ZPYCAT = WA_MOD_DATA-VALUE
            AND   RPTYP = 'R'.
      ENDCASE.
      MODIFY GT_OUT FROM WA_OUT INDEX WA_MOD_DATA-ROW_ID.
    ENDLOOP.
    PERFORM REFRESHALV.
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_DATA_CHANGED2.
    DATA:MOD_DATA    TYPE LVC_T_MODI,
         WA_MOD_DATA TYPE LVC_S_MODI.
    DATA:WA_ITAB LIKE LINE OF ITAB,
         SEGM    TYPE FAGL_SEGMT-SEGMENT,
         ITABN   LIKE TABLE OF ITAB,
         C_FLAG  TYPE CHAR1.
    CLEAR:MOD_DATA,WA_MOD_DATA,WA_ITAB.
    MOD_DATA = ER_DATA_CHANGED->MT_MOD_CELLS.
    LOOP AT MOD_DATA INTO WA_MOD_DATA.
      CLEAR WA_ITAB.
      CONDENSE WA_MOD_DATA-VALUE NO-GAPS.
      READ TABLE ITAB INTO WA_ITAB INDEX WA_MOD_DATA-ROW_ID.
      CASE WA_MOD_DATA-FIELDNAME.
        WHEN 'PSPNR'.
          CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
            EXPORTING
              INPUT     = WA_MOD_DATA-VALUE
            IMPORTING
              OUTPUT    = WA_MOD_DATA-VALUE
            EXCEPTIONS
              NOT_FOUND = 1
              OTHERS    = 2.
          SELECT SINGLE ZTPS010A~PSPID,
                        PRPS~POST1 AS POST1WBS,
                        ZTPS010A~KUNNR,
                        PRPS~PSPNR,
                        PRPS~PSPHI,
                        PROJ~POST1
            INTO @DATA(WA_ZTPS010A)
            FROM ZTPS010A INNER JOIN PROJ ON ZTPS010A~PSPID = PROJ~PSPID
                          INNER JOIN PRPS ON PROJ~PSPNR = PRPS~PSPHI
            WHERE PRPS~FAKKZ = 'X'
            AND   PRPS~PSPNR = @WA_MOD_DATA-VALUE.
          IF SY-SUBRC EQ 0.
            WA_ITAB-PSPID = WA_ZTPS010A-PSPID.
            WA_ITAB-POST1 = WA_ZTPS010A-POST1.
            WA_ITAB-POST1WBS = WA_ZTPS010A-POST1WBS.
            WA_ITAB-PARTNER = WA_ZTPS010A-KUNNR.
            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
              EXPORTING
                INPUT  = WA_ITAB-PARTNER
              IMPORTING
                OUTPUT = WA_ITAB-PARTNER.
            SELECT SINGLE NAME1
              INTO WA_ITAB-NAME_ORG1
              FROM KNA1
              WHERE KUNNR = WA_ITAB-PARTNER.
          ENDIF.

*派生段
          SELECT SINGLE CEPC~SEGMENT
            INTO @WA_ITAB-SEGMENT
            FROM CEPC INNER JOIN PRPS ON CEPC~PRCTR = PRPS~PRCTR
                                     AND CEPC~KOKRS = 'WISD'
            WHERE PRPS~PSPNR = @WA_MOD_DATA-VALUE.
          IF SY-SUBRC EQ 0.
            SELECT SINGLE NAME
              INTO WA_ITAB-SEGMT
              FROM FAGL_SEGMT
              WHERE SEGMENT = WA_ITAB-SEGMENT
              AND   LANGU = SY-LANGU.
          ENDIF.
        WHEN 'SEGMENT'.
          SEGM = WA_MOD_DATA-VALUE.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = SEGM
            IMPORTING
              OUTPUT = SEGM.
          SELECT SINGLE NAME
            INTO WA_ITAB-SEGMT
            FROM FAGL_SEGMT
            WHERE SEGMENT = SEGM
            AND   LANGU = SY-LANGU.
        WHEN 'BSTKD'.
          SELECT SINGLE VBELN
            INTO WA_ITAB-ZUONR
            FROM VBKD
            WHERE BSTKD = WA_MOD_DATA-VALUE
            AND   POSNR = '000000'.
        WHEN 'ZUONR'.
          DATA:L_VBELN TYPE VBELN.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              INPUT  = WA_MOD_DATA-VALUE
            IMPORTING
              OUTPUT = L_VBELN.

          SELECT SINGLE *
            INTO VBKD
            FROM VBKD
            WHERE VBELN = L_VBELN
            AND   POSNR = '000000'.
          IF SY-SUBRC EQ 0.
            WA_ITAB-BSTKD = VBKD-BSTKD.
          ENDIF.
        WHEN 'DMBTR'.
          PERFORM CHECKMENGE CHANGING WA_MOD_DATA-VALUE C_FLAG.
          IF C_FLAG NE 'E'.
*            WA_ITAB-DMBTR = WA_MOD_DATA-VALUE.
*            MODIFY ITAB FROM WA_ITAB INDEX WA_MOD_DATA-ROW_ID.
*            CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
*              EXPORTING
*                NEW_CODE = 'PAI'.
          ENDIF.

      ENDCASE.
      MODIFY ITAB FROM WA_ITAB INDEX WA_MOD_DATA-ROW_ID.
    ENDLOOP.
    PERFORM REFRESHALV.
  ENDMETHOD.                    "handle_data_changed
  METHOD HANDLE_COMMAND1.
    PERFORM USER_COMMAND1N USING E_UCOMM.
    PERFORM REFRESHALV.
  ENDMETHOD.
  METHOD HANDLE_COMMAND2.
    PERFORM USER_COMMAND2N USING E_UCOMM.
    PERFORM REFRESHALV.
  ENDMETHOD.
  METHOD HANDLE_TOOLBAR1.
    DATA: LS_TOOLBAR TYPE STB_BUTTON.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-BUTN_TYPE = 3. " 分隔符
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'ZCF'.    " 功能码
    LS_TOOLBAR-ICON = '@14@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '拆分'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '拆分'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
  ENDMETHOD.                    "HANDLE_TOOLBAR
  METHOD HANDLE_TOOLBAR2.
    DATA: LS_TOOLBAR TYPE STB_BUTTON.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-BUTN_TYPE = 3. " 分隔符
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'SAVE'.    " 功能码
    LS_TOOLBAR-ICON = '@2L@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '保存'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '保存'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'ZQZY'.    " 功能码
    LS_TOOLBAR-ICON = '@01@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '债权转移'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '债权转移'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-BUTN_TYPE = 3. " 分隔符
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
    CLEAR: LS_TOOLBAR.
    LS_TOOLBAR-FUNCTION = 'ADD'.    " 功能码
    LS_TOOLBAR-ICON = '@17@'.  " 图标名称
    LS_TOOLBAR-QUICKINFO = '增加行'.   " 图标的提示信息
    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
    LS_TOOLBAR-TEXT = '增加行'.       " 按钮上显示的文本
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR: LS_TOOLBAR.
*    LS_TOOLBAR-FUNCTION = 'DEL'.    " 功能码
*    LS_TOOLBAR-ICON = '@18@'.  " 图标名称
*    LS_TOOLBAR-QUICKINFO = '删除行'.   " 图标的提示信息
*    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
*    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
*    LS_TOOLBAR-TEXT = '删除行'.       " 按钮上显示的文本
*    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
*    CLEAR: LS_TOOLBAR.
*    LS_TOOLBAR-FUNCTION = 'UNDEL'.    " 功能码
*    LS_TOOLBAR-ICON = '@2W@'.  " 图标名称
*    LS_TOOLBAR-QUICKINFO = '撤销删除标记'.   " 图标的提示信息
*    LS_TOOLBAR-BUTN_TYPE = 0.        " 0表示正常按钮
*    LS_TOOLBAR-DISABLED = ''.        " X表示灰色，不可用
*    LS_TOOLBAR-TEXT = '撤销删除标记'.       " 按钮上显示的文本
*    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
  ENDMETHOD.                    "HANDLE_TOOLBAR
  METHOD HANDLE_HOTSPOT_CLICK1.
    CLEAR WA1.
    CONDENSE E_ROW_ID     NO-GAPS.
    CONDENSE E_COLUMN_ID  NO-GAPS.
    CASE E_COLUMN_ID.
      WHEN 'CHECK'.
        READ TABLE GT_OUT INTO WA1 INDEX E_ROW_ID.
        IF WA1-CHECK = 'X'.
          WA1-CHECK = ''.
        ELSE.
          WA1-CHECK = 'X'.
        ENDIF.
        MODIFY GT_OUT FROM WA1 INDEX E_ROW_ID TRANSPORTING CHECK.
    ENDCASE.
    PERFORM REFRESHALV.
  ENDMETHOD.
  METHOD HANDLE_HOTSPOT_CLICK2.
    CLEAR WA2.
    CONDENSE E_ROW_ID     NO-GAPS.
    CONDENSE E_COLUMN_ID  NO-GAPS.
    CASE E_COLUMN_ID.
      WHEN 'CHECK'.
        READ TABLE ITAB INTO WA2 INDEX E_ROW_ID.
        IF WA2-CHECK = 'X'.
          WA2-CHECK = ''.
        ELSE.
          WA2-CHECK = 'X'.
        ENDIF.
        MODIFY ITAB FROM WA2 INDEX E_ROW_ID TRANSPORTING CHECK.
      WHEN 'ZDEPOSIT'.
        READ TABLE ITAB INTO WA2 INDEX E_ROW_ID.
        IF WA2-ZDEPOSIT = 'X'.
          WA2-ZDEPOSIT = ''.
        ELSE.
          WA2-ZDEPOSIT = 'X'.
        ENDIF.
        MODIFY ITAB FROM WA2 INDEX E_ROW_ID TRANSPORTING ZDEPOSIT.
    ENDCASE.
    PERFORM REFRESHALV.
  ENDMETHOD.
  METHOD HANDLE_ON_F41.
    CLEAR:RETURN_TAB,WA_MODI,WA_RETURN_TAB.
    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
    ASSIGN ER_EVENT_DATA->M_DATA->* TO <IT_MODI>.
    READ TABLE GT_OUT INTO WA1 INDEX ES_ROW_NO-ROW_ID.
    CHECK SY-SUBRC = 0.
    CASE E_FIELDNAME.
      WHEN 'PSEGMENT' OR 'SEGMENT' OR 'PSPNR' OR 'BSTKD' OR 'ZPYCAT' OR  'ZUONR'.
        PERFORM F4HELP TABLES RETURN_TAB USING  E_FIELDNAME 'GT_OUT' WA1.
    ENDCASE.
    IF RETURN_TAB[] IS NOT INITIAL.
      READ TABLE RETURN_TAB INTO WA_RETURN_TAB INDEX 1.
      IF SY-SUBRC EQ 0.
        WA_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
        WA_MODI-FIELDNAME = E_FIELDNAME.
        WA_MODI-VALUE = WA_RETURN_TAB-FIELDVAL.
        APPEND WA_MODI TO <IT_MODI>.
      ENDIF.
    ENDIF.
    PERFORM REFRESHALV.
  ENDMETHOD.
  METHOD HANDLE_ON_F42.
    CLEAR:RETURN_TAB,WA_MODI,WA_RETURN_TAB.
    ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
    ASSIGN ER_EVENT_DATA->M_DATA->* TO <IT_MODI>.
    READ TABLE ITAB INTO WA2 INDEX ES_ROW_NO-ROW_ID.
    CHECK SY-SUBRC = 0.
*若已经保存，则不允许在选择
    SELECT SINGLE COUNT(*)
      FROM ZTFI_SPLITCONT
      WHERE CHGNO_D = WA2-CHGNO_D
      AND   POSNR = WA2-POSNR.
    CHECK SY-SUBRC NE 0.
    CASE E_FIELDNAME.
      WHEN 'PSEGMENT' OR 'SEGMENT' OR 'PSPNR' OR  'BSTKD' OR 'ZUONR'.
        PERFORM F4HELP TABLES RETURN_TAB USING  E_FIELDNAME 'ITAB' WA2.
    ENDCASE.
    IF RETURN_TAB[] IS NOT INITIAL.
      READ TABLE RETURN_TAB INTO WA_RETURN_TAB INDEX 1.
      IF SY-SUBRC EQ 0.
        WA_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
        WA_MODI-FIELDNAME = E_FIELDNAME.
        WA_MODI-VALUE = WA_RETURN_TAB-FIELDVAL.
        APPEND WA_MODI TO <IT_MODI>.
      ENDIF.
    ENDIF.
    PERFORM REFRESHALV.
  ENDMETHOD.
ENDCLASS.                    "lcl_event_receiver IMPLEMENTATION
DATA:LCL_EVENT_RECEIVER1 TYPE REF TO LCL_EVENT_RECEIVERN,
     LCL_EVENT_RECEIVER2 TYPE REF TO LCL_EVENT_RECEIVERN.
