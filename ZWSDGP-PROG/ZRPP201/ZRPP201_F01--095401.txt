*&---------------------------------------------------------------------*
*& 包含               ZRPP201_F01
*&---------------------------------------------------------------------*

CLASS lcl_event_receiver IMPLEMENTATION.
  METHOD on_close.
    CALL METHOD sender->free.
    FREE: gv_con_diabox, gv_alv_popup.
  ENDMETHOD.

  METHOD handle_data_changed_fini.
    PERFORM frm_data_changed_fini
      USING e_modified
            et_good_cells
            .
  ENDMETHOD.                    "handle_data_changed_

  METHOD handle_data_changed.
    PERFORM frm_data_changed
      USING er_data_changed
            e_onf4
            e_onf4_before
            e_onf4_after
            e_ucomm
            .
  ENDMETHOD.                    "handle_data_changed_
ENDCLASS.


*&---------------------------------------------------------------------*
*& Form FRM_GET_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_get_data .

*  SELECT
*    *
*    INTO CORRESPONDING FIELDS OF TABLE GT_LIST
*    FROM zfit027
*    WHERE gjahr = p_gjahr
*      AND monat = p_monat
*    .
*  IF sy-subrc NE 0.
*    MESSAGE '无数据' TYPE 'S' DISPLAY LIKE 'E'.
*    LEAVE LIST-PROCESSING.
*
*  ENDIF.

  gs_ctr-strname = 'GS_LIST'.
  gs_ctr-tabname = 'GT_LIST'.
  ASSIGN (gs_ctr-tabname) TO <fs_list>.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FRM_SHOW_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_show_data .

  PERFORM frm_set_layout.
  PERFORM frm_set_fieldcat.
  PERFORM frm_show_alv.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_set_layout
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_set_layout .
  gs_layout-zebra = 'X'."zebra design
*  gs_layout-no_toolbar = 'X'."
  gs_layout-sel_mode = 'D'.".selection mode per field
*  gs_layout-box_fname = 'CK'.".selection mode per field
  gs_layout-col_opt = 'X'.".selection mode per field
*  gs_layout-ctab_fname = 'CLFED'.".selection mode per field
*  gs_layout-cwidth_opt = 'X'.".always optimise columns

  gs_layout-stylefname = 'STYLE'. "指定保存编辑状态的字段名
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_set_fieldcat
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_set_fieldcat .
  CHECK <fs_list> IS ASSIGNED.

  CLEAR:gs_fieldcat, gt_fieldcat[],
         gs_fieldcat_alv, gt_fieldcat_alv[].

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = gs_ctr-strname
      i_inclname             = sy-repid
    CHANGING
      ct_fieldcat            = gt_fieldcat_alv
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here

    PERFORM frm_leave_process.
  ENDIF.

  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_alv
*     IT_SORT_ALV     =
*     IT_FILTER_ALV   =
*     IS_LAYOUT_ALV   =
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
*     ET_SORT_LVC     =
*     ET_FILTER_LVC   =
*     ES_LAYOUT_LVC   =
    TABLES
      it_data         = <fs_list>
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    PERFORM frm_leave_process.
  ENDIF.

*如果有必要就循环字段属性表来调整属性
  FIELD-SYMBOLS <fs_field> LIKE LINE OF gt_fieldcat.
*  gs_fieldcat-fieldname = 'ZYXJE'.

  LOOP AT gt_fieldcat
   ASSIGNING <fs_field>.
    <fs_field>-col_opt = 'A'.
    <fs_field>-key = ''.

*    IF <fs_field>-fieldname = 'PRCTR'
*      OR <fs_field>-fieldname = 'MVGR1'
*      OR <fs_field>-fieldname = 'WW001'
*      OR <fs_field>-fieldname = 'ZZDXL'
*      .
*      <fs_field>-edit = pr1.
*    ELSE.
*
*    ENDIF.
*    IF <fs_field>-fieldname = 'ZZDXL'.
*      IF pr2 = 'X'.
*        <fs_field>-edit = pr2.
*
*      ENDIF.
*    ENDIF.
*
*    IF <fs_field>-fieldname = 'MESSAGE'.
*      <fs_field>-tech = pr3.
*      CLEAR <fs_field>-edit.
*
*    ENDIF.
*    IF <fs_field>-fieldname = 'CK'.
*      <fs_field>-coltext = '选择'.
*      <fs_field>-checkbox = 'X'.
*      IF pr3 = 'X'
*        OR pr1 = 'X'.
*        <fs_field>-tech = 'X'.
*
*      ENDIF.
*
*    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_show_alv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_show_alv .


  DATA: lt_event_exit TYPE slis_t_event_exit,
        ls_event_exit LIKE LINE OF lt_event_exit.

  CHECK <fs_list> IS ASSIGNED.

  ls_event_exit-ucomm = '&ALL'.
*  ls_event_exit-before = 'X'.
  ls_event_exit-after = 'X'.
  APPEND ls_event_exit TO lt_event_exit.

  ls_event_exit-ucomm = '&SAL'.
*  ls_event_exit-before = 'X'.
  ls_event_exit-after = 'X'.
  APPEND ls_event_exit TO lt_event_exit.

*  ls_event_exit-ucomm = '&SAL'.
**  ls_event_exit-before = 'X'.
*  ls_event_exit-after = 'X'.
*  APPEND ls_event_exit TO lt_event_exit.

  PERFORM alv_add_events USING:
    'PF_STATUS_SET',
    'USER_COMMAND',
    'CALLER_EXIT'.

  CLEAR gv_exit_caused_by_user.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program     = sy-repid
      is_layout_lvc          = gs_layout
      it_fieldcat_lvc        = gt_fieldcat
      it_events              = gt_events
      it_sort_lvc            = gt_sort
*     is_variant             = ls_disvariant
*     it_excluding           = it_excluding
      it_event_exit          = lt_event_exit
    IMPORTING
      es_exit_caused_by_user = gv_exit_caused_by_user
    TABLES
      t_outtab               = <fs_list>
    EXCEPTIONS
      program_error          = 1
      OTHERS                 = 2.

*  BREAK ey_cuijh..

  IF gv_exit_caused_by_user IS NOT INITIAL.
    LOOP AT gt_list INTO gs_list.
      PERFORM frm_unlock.

    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_leave_process
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_leave_process .
  DATA mtext TYPE bapi_msg.

  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          INTO mtext
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

  MESSAGE mtext TYPE 'S' DISPLAY LIKE sy-msgty.

  LEAVE LIST-PROCESSING.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CALLER_EXIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM caller_exit USING e_grid TYPE slis_data_caller_exit.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid = alv_grid.

  CALL METHOD alv_grid->register_edit_event     "注册GRID事件
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_modified "事件：回车
    EXCEPTIONS
      error      = 1
      OTHERS     = 2.

  CREATE OBJECT gv_event_receiver.
  SET HANDLER gv_event_receiver->handle_data_changed_fini FOR alv_grid.
  SET HANDLER gv_event_receiver->handle_data_changed FOR alv_grid.
*

ENDFORM.                    "CALLER_EXIT

*&---------------------------------------------------------------------*
*&      Form  ALV_ADD_EVENTS
*&---------------------------------------------------------------------*
FORM alv_add_events  USING    p_event_name TYPE slis_alv_event-name.

  gs_events-name = p_event_name.
  gs_events-form = p_event_name.
  APPEND gs_events TO gt_events.
  CLEAR gs_events.

ENDFORM.                    " ALV_ADD_EVENTS

*&---------------------------------------------------------------------*
*&      Form  PF_STATUS_SET
*&---------------------------------------------------------------------*
FORM pf_status_set  USING rt_extab TYPE slis_t_extab.

  DATA: BEGIN OF ls_fcode ,
          fcode LIKE rsmpe-func,
        END OF ls_fcode,
        lt_fcode LIKE TABLE OF ls_fcode.


  CLEAR lt_fcode[].

*  LOOP AT gt_list
*    TRANSPORTING NO FIELDS
*    WHERE message NE ''.
*    EXIT.
*
*  ENDLOOP.
*  IF sy-subrc = 0.
*    ls_fcode-fcode = '&SAVE'.
*    APPEND ls_fcode TO lt_fcode.
*
*  ENDIF.

*  IF pr3 = 'X'
*    OR pr1 = 'X'.
*
*    ls_fcode-fcode = '&INS_ROW'.
*    APPEND ls_fcode TO lt_fcode.
*
*    ls_fcode-fcode = '&DEL_ROW'.
*    APPEND ls_fcode TO lt_fcode.
*  ENDIF.

  SET PF-STATUS 'ZSTATUS' EXCLUDING lt_fcode.

ENDFORM.                    " PF_STATUS_SET
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND
*&---------------------------------------------------------------------*
FORM user_command  USING r_ucomm TYPE sy-ucomm
                         ls_selfield TYPE slis_selfield.


  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      e_grid          = alv_grid
      et_fieldcat_lvc = gt_fieldcat.

  CALL METHOD alv_grid->check_changed_data.
  DATA: lt_filter TYPE lvc_t_fidx.

  CASE r_ucomm.

    WHEN '&ALL'.

*获取被过滤掉的数据行数
      CLEAR lt_filter[].
      CALL METHOD alv_grid->get_filtered_entries
        IMPORTING
          et_filtered_entries = lt_filter.

      IF lt_filter[] IS INITIAL.

        gs_list-ck = 'X'.

        MODIFY gt_list
        FROM gs_list
        TRANSPORTING ck
        WHERE ck = ''.

      ELSE.

        LOOP AT gt_list
          ASSIGNING <fs_line>
          WHERE ck = ''.

          DATA(lv_tabix) = sy-tabix.
          READ TABLE lt_filter
          TRANSPORTING NO FIELDS
          WITH KEY table_line = lv_tabix.
          IF sy-subrc = 0.

          ELSE.

            <fs_line>-ck = 'X'.

          ENDIF.
        ENDLOOP.

      ENDIF.

    WHEN '&SAL'.

*获取被过滤掉的数据行数
      CLEAR lt_filter[].
      CALL METHOD alv_grid->get_filtered_entries
        IMPORTING
          et_filtered_entries = lt_filter.

      IF lt_filter[] IS INITIAL.

        gs_list-ck = ''.

        MODIFY gt_list
        FROM gs_list
        TRANSPORTING ck
        WHERE ck NE ''.

      ELSE.

        LOOP AT gt_list
          ASSIGNING <fs_line>
          WHERE ck NE ''.

          lv_tabix = sy-tabix.
          READ TABLE lt_filter
          TRANSPORTING NO FIELDS
          WITH KEY table_line = lv_tabix.
          IF sy-subrc = 0.

          ELSE.

            <fs_line>-ck = ''.

          ENDIF.
        ENDLOOP.

      ENDIF.

    WHEN '&SAVE'.
      PERFORM frm_save.

    WHEN '&INS_ROW'.
      PERFORM frm_insert.

    WHEN '&DEL_ROW'.
      PERFORM frm_delete.

  ENDCASE.

  ls_selfield-row_stable = 'X'.
  ls_selfield-col_stable = 'X'.
  ls_selfield-refresh = 'X'.

ENDFORM.                    " USER_COMMAND
*&---------------------------------------------------------------------*
*& Form frm_check_auth
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_check_auth .


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  bdc_dynpro
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PROGRAM    text
*      -->DYNPRO     text
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    "bdc_dynpro
*&---------------------------------------------------------------------*
*&      Form  bdc_field
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->FNAM       text
*      -->FVAL       text
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  APPEND bdcdata.
ENDFORM.                    "bdc_field
*&---------------------------------------------------------------------*
*& Form frm_screen
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_screen .

*  LOOP AT SCREEN.
*    CASE 'X'.
*      WHEN pr1.
*
*        IF screen-group1 = 'PR2'
*          .
*          screen-active = '0'.
*
*        ELSE.
*          screen-active = '1'.
*          screen-required = '2'.
*
*        ENDIF.
*
*        MODIFY SCREEN.
*
*      WHEN pr2
*        OR pr3.
*        IF screen-group1 = 'PR1'
*          .
*          screen-active = '0'.
*
*        ELSE.
*          screen-active = '1'.
*
*          IF screen-name = 'S_WERKS-LOW'
*            .
*            screen-required = '2'.
*
*
*          ENDIF.
*        ENDIF.
*
*        MODIFY SCREEN.
*
*    ENDCASE.
*
*  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_save
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_save .

*  DATA: ls_save TYPE zfit027,
*        lt_save LIKE TABLE OF ls_save.
*
*  LOOP AT gt_list
*    TRANSPORTING NO FIELDS
*    WHERE message NE ''.
*    EXIT.
*
*  ENDLOOP.
*  IF sy-subrc = 0.
*    EXIT.
*
*  ENDIF.
**  ENDIF.
**
*  MOVE-CORRESPONDING gt_list TO lt_save.
*
*  IF lt_save[] IS NOT INITIAL.
*
**    ls_save-zdate = sy-datum.
**    ls_save-ztime = sy-uzeit.
**    ls_save-zuser = sy-uname.
*
**    MODIFY lt_save FROM ls_save
**    TRANSPORTING zdate ztime zuser
**    WHERE zuser = ''.
*
*    MODIFY zfit027 FROM TABLE lt_save.
*    MESSAGE '保存成功' TYPE 'S'.
*
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_set_disabled
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&---------------------------------------------------------------------*
FORM frm_set_disabled
  USING
    VALUE(p_field).


  gs_style-fieldname = p_field.
  gs_style-style = cl_gui_alv_grid=>mc_style_disabled."设置为不可输入
  INSERT gs_style INTO TABLE gt_style.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_init
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_init .

  button1 = TEXT-002.
  button2 = TEXT-003.
*  button3 = TEXT-004.
  button4 = TEXT-005.
  button5 = TEXT-006.
  button6 = TEXT-007.
  button7 = TEXT-008.
  button8 = TEXT-009.
  button9 = TEXT-010.
  button10 = TEXT-011.
  button11 = TEXT-012.
  button12 = TEXT-013.
  button13 = TEXT-014.
  button14 = TEXT-015.
  button15 = TEXT-016.
  button16 = TEXT-017.
  button17 = TEXT-019.
  button18 = TEXT-020.
  button19 = TEXT-021.
  button20 = TEXT-022.
  button21 = TEXT-023.
  button22 = TEXT-024.
  button23 = TEXT-025.
  button24 = TEXT-026.
  button25 = TEXT-027.
  button26 = TEXT-028.
  button27 = TEXT-029.
  button28 = TEXT-030.
  button29 = TEXT-031.
  button30 = TEXT-005.
  button31 = TEXT-021.
  button32 = TEXT-032.
  button33 = TEXT-033.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_process_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_process_data
           .
*  DATA oref TYPE REF TO cx_root.
*  DATA text TYPE string.
*  DATA ls_excel_tab TYPE zzalsmex_tabline.
*
*  FIELD-SYMBOLS: <fs_field> TYPE any.
*
*  DATA lv_col TYPE i.
*
*  LOOP AT gt_excel_tab INTO ls_excel_tab.
*    lv_col = ls_excel_tab-col + 4.
*
*    ASSIGN COMPONENT lv_col OF STRUCTURE gs_list
*      TO <fs_field>.
*    IF <fs_field> IS ASSIGNED.
*      IF ls_excel_tab-col = 11.
*        REPLACE ALL OCCURRENCES OF ','
*        IN ls_excel_tab-value
*        WITH space.
*
*        CONDENSE ls_excel_tab-value.
*
*      ENDIF.
*
*      TRY .
*          <fs_field> = ls_excel_tab-value.
*        CATCH  cx_root INTO oref.
*          text = oref->get_text( ).
*
**          gs_list-message = text.
*          CONCATENATE gs_list-message
*                      text
*                 INTO gs_list-message
*         SEPARATED BY '|'.
*
*          CONTINUE.
*      ENDTRY.
*
**      IF lv_col = 4.
**        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
**          EXPORTING
**            input  = <fs_field>
**          IMPORTING
**            output = <fs_field>.
**
**      ENDIF.
*
*      UNASSIGN <fs_field>.
*    ENDIF.
*
*    AT END OF row.
*      gs_list-gjahr = p_gjahr.
*      gs_list-monat = p_monat.
*      APPEND gs_list TO gt_list.
*      CLEAR gs_list.
*    ENDAT.
*  ENDLOOP.
*
*  IF gt_list[] IS NOT INITIAL.
*
*  ELSE.
*    MESSAGE '无数据' TYPE 'S'
*    DISPLAY LIKE 'E'.
*    LEAVE LIST-PROCESSING .
*
*  ENDIF.
*
*  gs_ctr-strname = 'gs_list'.
*  gs_ctr-tabname = 'GT_LIST'.
*  ASSIGN (gs_ctr-tabname) TO <fs_list>.
*
**  PERFORM frm_check.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_unlock
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_unlock .
*  CALL FUNCTION 'ENQUEUE_Ezmmt057'
*    EXPORTING
**     MODE_zmmt057   = 'E'
*      mandt          = sy-mandt
*      rsnum          = gs_list-rsnum
*      rspos          = gs_list-rspos
*    EXCEPTIONS
*      foreign_lock   = 1
*      system_failure = 2
*      OTHERS         = 3.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_lock
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_lock .


*  CALL FUNCTION 'ENQUEUE_Ezmmt057'
*    EXPORTING
*      mandt          = sy-mandt
*      rsnum          = gs_list-rsnum
*      rspos          = gs_list-rspos
*    EXCEPTIONS
*      foreign_lock   = 1
*      system_failure = 2
*      OTHERS         = 3.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*      INTO gs_list-message
*      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    gs_list-style[] = gt_style[].
*  ELSE.
*
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_get_global
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_get_global .

*  SELECT
*    prctr,
*    ktext
*    INTO TABLE @gt_cepct
*    FROM cepct
*    WHERE spras = @sy-langu
*      AND datbi >= @sy-datum
*      AND kokrs = '1000'
*    .
*
*  SORT gt_cepct BY prctr.
*
*  SELECT
*    mvgr1,
*    bezei
*    INTO TABLE @gt_tvm1t
*    FROM tvm1t
*    WHERE spras = @sy-langu
*    .
*
*  SORT gt_tvm1t BY mvgr1.
*
*  SELECT
*    ww001,
*    bezek
*    INTO TABLE @gt_t25a0
*    FROM t25a0
*    WHERE spras = @sy-langu
*    .
*
*  SORT gt_t25a0 BY ww001.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_check
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_check .

*  LOOP AT GT_LIST ASSIGNING <fs_line>.
*
*    IF pr1 = 'X'.
*      <fs_line>-zzjdhh = sy-tabix.
*
*
*    ENDIF.
*
*    READ TABLE gt_ekko
*    INTO gs_ekko
*    WITH KEY ebeln = <fs_line>-ebeln
*    BINARY SEARCH.
*    IF sy-subrc = 0.
*      IF <fs_line>-lifnr NE gs_ekko-lifnr.
*
*        CONCATENATE <fs_line>-message
*                    '输入的供应商编码不等于订单供应商'
*               INTO <fs_line>-message
*       SEPARATED BY '|'.
*
*      ELSE.
*
*        READ TABLE gt_lfa1
*        INTO gs_lfa1
*        WITH KEY lifnr = <fs_line>-lifnr
*        BINARY SEARCH.
*        IF sy-subrc = 0.
*          IF <fs_line>-name1_lifnr NE gs_lfa1-name1.
*
*            CONCATENATE <fs_line>-message '供应商名称错误'
*                   INTO <fs_line>-message
*           SEPARATED BY '|'.
*
*          ENDIF.
*        ELSE.
*        ENDIF.
*
*      ENDIF.
*    ELSE.
**      CONCATENATE <fs_line>-message '订单号不存在'
**             INTO <fs_line>-message
**     SEPARATED BY space.
*    ENDIF.
*
*
*    READ TABLE gt_ekpo
*    INTO gs_ekpo
*    WITH KEY ebeln = <fs_line>-ebeln
*             ebelp = <fs_line>-ebelp
*    BINARY SEARCH.
*    IF sy-subrc = 0.
*      <fs_line>-werks = gs_ekpo-werks.
*
*      READ TABLE gt_t001w
*      INTO gs_t001w
*      WITH KEY werks = <fs_line>-werks
*      BINARY SEARCH.
*      IF sy-subrc = 0.
*        <fs_line>-name1_werks = gs_t001w-name1.
*
*      ENDIF.
*
*      IF <fs_line>-meins NE gs_ekpo-meins.
*
*        CONCATENATE <fs_line>-message
*                    '输入的单位不正确'
*               INTO <fs_line>-message
*       SEPARATED BY '|'.
*
*      ELSE.
*
*      ENDIF.
*      IF <fs_line>-matnr NE gs_ekpo-matnr.
*
*        CONCATENATE <fs_line>-message
*                    '输入的物料号和订单行物料号不匹配'
*               INTO <fs_line>-message
*       SEPARATED BY '|'.
*
*      ELSE.
*
*        READ TABLE gt_makt
*        INTO gs_makt
*        WITH KEY matnr = <fs_line>-matnr
*        BINARY SEARCH.
*        IF sy-subrc = 0.
*          IF <fs_line>-maktx NE gs_makt-maktx.
*
*            CONCATENATE <fs_line>-message '物料描述错误'
*                   INTO <fs_line>-message
*           SEPARATED BY '|'.
*
*          ENDIF.
*        ELSE.
*
*          CONCATENATE <fs_line>-message '物料描述错误'
*                 INTO <fs_line>-message
*         SEPARATED BY '|'.
*
*        ENDIF.
*
*
*      ENDIF.
*    ELSE.
*      CONCATENATE <fs_line>-message
*                  '输入的订单和订单号不存在'
*             INTO <fs_line>-message
*     SEPARATED BY '|'.
*    ENDIF.
*
*
*
*
*  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_delete
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_delete .

*  DATA: lv_pop  TYPE c.
*
*  DATA(lt_check) = gt_list[].
*  DELETE lt_check
*  WHERE ck = ''.
*  IF lt_check[] IS INITIAL.
*    MESSAGE '请选择行' TYPE 'S' DISPLAY LIKE 'E'.
*    EXIT.
*
*  ENDIF.
*
*  PERFORM frm_get_popup CHANGING lv_pop.
*
*  CHECK lv_pop = 'J'.
*
*  DATA: BEGIN OF ls_delete,
*          mandt TYPE zfit027-mandt,
*          gjahr TYPE zfit027-gjahr,
*          monat TYPE zfit027-monat,
*          prctr TYPE zfit027-prctr,
*          mvgr1 TYPE zfit027-mvgr1,
*          ww001 TYPE zfit027-ww001,
*
*        END OF ls_delete,
*        lt_delete LIKE TABLE OF ls_delete.
*
*  MOVE-CORRESPONDING lt_check TO lt_delete.
*
*  ls_delete-mandt = sy-mandt.
*  MODIFY lt_delete
*  FROM ls_delete
*  TRANSPORTING mandt
*  WHERE mandt IS INITIAL.
*
*  DELETE zfit027 FROM TABLE lt_delete.
*  IF sy-subrc = 0.
*
*    MESSAGE '删除成功' TYPE 'S'.
*    COMMIT WORK.
*
*    DELETE gt_list
*    WHERE ck = 'X'.
*
*  ELSE.
*    MESSAGE '删除失败' TYPE 'S'.
*    ROLLBACK WORK.
*
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_insert
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_insert .
  CLEAR gt_style[].

  PERFORM frm_set_enabled
  USING : 'ZQZLJM', 'MATNR', 'ZJGQJ'.

  BREAK ey_cuijh.

  CLEAR gs_list.

  gs_list-style = gt_style[].
  INSERT gs_list INTO gt_list INDEX 1.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_set_enabled
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&---------------------------------------------------------------------*
FORM frm_set_enabled
   USING
    VALUE(p_field).

  gs_style-fieldname = p_field.
  gs_style-style = cl_gui_alv_grid=>mc_style_enabled."设置为不可输入
  INSERT gs_style INTO TABLE gt_style.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_get_popup
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LV_POP
*&---------------------------------------------------------------------*
FORM frm_get_popup   CHANGING pv_flag.
  CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
    EXPORTING
      defaultoption  = 'Y'
      textline1      = '是否确定删除？'
      textline2      = ' '
      titel          = 'SAP'
      start_column   = 25
      start_row      = 6
      cancel_display = 'X'
    IMPORTING
      answer         = pv_flag.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_data_changed_fini
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_MODIFIED
*&      --> ET_GOOD_CELLS
*&---------------------------------------------------------------------*
FORM frm_data_changed_fini
  USING e_modified
        et_good_cells TYPE lvc_t_modi.

  DATA: ls_modi LIKE LINE OF et_good_cells,
        lt_modi LIKE TABLE OF ls_modi.

  CHECK e_modified = 'X'.
*
*  BREAK ey_cuijh.
*
*  APPEND LINES OF et_good_cells TO lt_modi.
*
*  SORT lt_modi BY row_id.
*  DELETE ADJACENT DUPLICATES FROM lt_modi
*  COMPARING row_id.
*
*  CLEAR gs_list.
*
*  MODIFY GT_LIST FROM gs_list
*  TRANSPORTING message
*  WHERE message NE ''.
*
*  DATA(lt_list01) = GT_LIST[].
*
*  LOOP AT lt_modi INTO ls_modi.
*
*    READ TABLE GT_LIST
*    ASSIGNING <fs_line>
*    INDEX ls_modi-row_id.
*    CHECK sy-subrc = 0.
*
*    DELETE lt_list01 INDEX ls_modi-row_id.
*
**    MODIFY lt_list01 FROM gs_list
**    TRANSPORTING message
**    WHERE zqzljm = gs_list-zqzljm
**      AND matnr = gs_list-matnr
**      AND zjgqj = gs_list-zjgqj
**      .
*    READ TABLE lt_list01
*    TRANSPORTING NO FIELDS
*    WITH KEY gjahr = <fs_line>-gjahr
*             monat = <fs_line>-monat
*             prctr = <fs_line>-prctr
*             mvgr1 = <fs_line>-mvgr1
*             ww001 = <fs_line>-ww001
*             .
*
*    IF sy-subrc = 0.
*
*      <fs_line>-message = '主键不得相同'.
*    ELSE.
*
*    ENDIF.
*
*  ENDLOOP.
*
  PERFORM frm_refresh.
*
*  CLEAR lt_list01[].
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_refresh
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_refresh .

  DATA: ls_stale TYPE lvc_s_stbl.
  ls_stale-row = 'X'.
  ls_stale-col = 'X'.
  CALL METHOD alv_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stale.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_make_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_make_data .

*  LOOP AT gt_list
*    ASSIGNING <fs_line>.
*
*    READ TABLE gt_cepct
*    INTO gs_cepct
*    WITH KEY prctr = <fs_line>-prctr
*    BINARY SEARCH.
*    IF sy-subrc = 0.
*      <fs_line>-ktext = gs_cepct-ktext.
*
*    ENDIF.
*
*    READ TABLE gt_tvm1t
*    INTO gs_tvm1t
*    WITH KEY mvgr1 = <fs_line>-mvgr1
*    BINARY SEARCH.
*    IF sy-subrc = 0.
*      <fs_line>-bezei = gs_tvm1t-bezei.
*
*    ENDIF.
*
*    READ TABLE gt_t25a0
*    INTO gs_t25a0
*    WITH KEY ww001 = <fs_line>-ww001
*    BINARY SEARCH.
*    IF sy-subrc = 0.
*      <fs_line>-bezek = gs_t25a0-bezek.
*
*    ENDIF.
*  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_data_changed
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ER_DATA_CHANGED
*&      --> E_ONF4
*&      --> E_ONF4_BEFORE
*&      --> E_ONF4_AFTER
*&      --> E_UCOMM
*&---------------------------------------------------------------------*
FORM frm_data_changed
  USING
    er_data_changed TYPE REF TO	cl_alv_changed_data_protocol
    e_onf4  TYPE  char01
    e_onf4_before  TYPE  char01
    e_onf4_after  TYPE  char01
    e_ucomm  TYPE  sy-ucomm
  .

  DATA lv_error TYPE c.

  FIELD-SYMBOLS: <fs_s1> TYPE lvc_s_modi.

*  BREAK ey_cuijh.
*  DATA(lt_modi) = er_data_changed->mt_good_cells[].
*
*****变更单元格内容一起变更描述
*  LOOP AT lt_modi
*    ASSIGNING <fs_s1>.
*
*    READ TABLE gt_list
*    ASSIGNING <fs_line>
*    INDEX <fs_s1>-row_id.
*
*    IF sy-subrc = 0.
*      CLEAR lv_error.
*
*      IF <fs_s1>-fieldname = 'PRCTR'."省份
*
*        CALL METHOD er_data_changed->get_cell_value
*          EXPORTING
*            i_row_id    = <fs_s1>-row_id    "单元格的ID
*            i_fieldname = <fs_s1>-fieldname "单元格的字段
*          IMPORTING
*            e_value     = <fs_s1>-value. "单元格的字段值
*
*        <fs_line>-prctr = <fs_s1>-value.
*
**更新描述字段
*        READ TABLE gt_cepct
*        INTO gs_cepct
*        WITH KEY prctr = <fs_line>-prctr
*        BINARY SEARCH.
*        IF sy-subrc = 0.
*          <fs_line>-ktext = gs_cepct-ktext.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'KTEXT' "单元格的字段
*              i_value     = <fs_line>-ktext. "单元格的字段值
*
*        ELSE.
*          CLEAR <fs_line>-ktext.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'KTEXT' "单元格的字段
*              i_value     = <fs_line>-ktext. "单元格的字段值
*
*          lv_error = 'X'.
*          <fs_line>-message = '选择省份错误'.
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'MESSAGE' "单元格的字段
*              i_value     = <fs_line>-message. "单元格的字段值
*
*        ENDIF.
*      ENDIF.
*
*      IF <fs_s1>-fieldname = 'WW001'."商标
*
*        CALL METHOD er_data_changed->get_cell_value
*          EXPORTING
*            i_row_id    = <fs_s1>-row_id    "单元格的ID
*            i_fieldname = <fs_s1>-fieldname "单元格的字段
*          IMPORTING
*            e_value     = <fs_s1>-value. "单元格的字段值
*
*        <fs_line>-ww001 = <fs_s1>-value.
*
**更新描述字段
*        READ TABLE gt_t25a0
*        INTO gs_t25a0
*        WITH KEY ww001 = <fs_line>-ww001
*        BINARY SEARCH.
*        IF sy-subrc = 0.
*          <fs_line>-bezek = gs_t25a0-bezek.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'BEZEK' "单元格的字段
*              i_value     = <fs_line>-bezek. "单元格的字段值
*
*        ELSE.
*          CLEAR <fs_line>-bezek.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'BEZEK' "单元格的字段
*              i_value     = <fs_line>-bezek. "单元格的字段值
*
*          lv_error = 'X'.
*          <fs_line>-message = '选择作物错误'.
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'MESSAGE' "单元格的字段
*              i_value     = <fs_line>-message. "单元格的字段值
*
*        ENDIF.
*      ENDIF.
*
*      IF <fs_s1>-fieldname = 'MVGR1'."商标
*
*        CALL METHOD er_data_changed->get_cell_value
*          EXPORTING
*            i_row_id    = <fs_s1>-row_id    "单元格的ID
*            i_fieldname = <fs_s1>-fieldname "单元格的字段
*          IMPORTING
*            e_value     = <fs_s1>-value. "单元格的字段值
*
*        <fs_line>-mvgr1 = <fs_s1>-value.
*
**更新描述字段
*        READ TABLE gt_tvm1t
*        INTO gs_tvm1t
*        WITH KEY mvgr1 = <fs_line>-mvgr1
*        BINARY SEARCH.
*        IF sy-subrc = 0.
*          <fs_line>-bezei = gs_tvm1t-bezei.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'BEZEI' "单元格的字段
*              i_value     = <fs_line>-bezei. "单元格的字段值
*
*        ELSE.
*          CLEAR <fs_line>-bezei.
*
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'BEZEI' "单元格的字段
*              i_value     = <fs_line>-bezei. "单元格的字段值
*
*          lv_error = 'X'.
*          <fs_line>-message = '选择商标错误'.
*          CALL METHOD er_data_changed->modify_cell
*            EXPORTING
*              i_row_id    = <fs_s1>-row_id    "单元格的ID
*              i_fieldname = 'MESSAGE' "单元格的字段
*              i_value     = <fs_line>-message. "单元格的字段值
*
*        ENDIF.
*      ENDIF.
*
*      IF <fs_s1>-fieldname = 'ZZDXL'."商标
*
*        CALL METHOD er_data_changed->get_cell_value
*          EXPORTING
*            i_row_id    = <fs_s1>-row_id    "单元格的ID
*            i_fieldname = <fs_s1>-fieldname "单元格的字段
*          IMPORTING
*            e_value     = <fs_s1>-value. "单元格的字段值
*
*        <fs_line>-zzdxl = <fs_s1>-value.
*
*      ENDIF.
*
*      IF lv_error = 'X'.
*
*      ELSE.
*        CLEAR <fs_line>-message.
*        CALL METHOD er_data_changed->modify_cell
*          EXPORTING
*            i_row_id    = <fs_s1>-row_id    "单元格的ID
*            i_fieldname = 'MESSAGE' "单元格的字段
*            i_value     = <fs_line>-message. "单元格的字段值
*
*      ENDIF.
*    ENDIF.
*
*
*
*  ENDLOOP.




ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_check_input
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_check_input .

  CASE sy-dynnr.
    WHEN '1001'.
    WHEN '1002'.
    WHEN '1003'.
    WHEN OTHERS.
      LEAVE LIST-PROCESSING.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_call_se16n
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&---------------------------------------------------------------------*
FORM frm_call_se16n
  USING
    pu_tabname TYPE se16n_tab.

  DATA oref TYPE REF TO cx_root.

  CHECK pu_tabname IS NOT INITIAL.

  DATA: lt_seltab          TYPE TABLE OF se16n_seltab,
        ls_seltab          LIKE LINE OF lt_seltab,
*.输出字段控制
        lt_outfields       TYPE TABLE OF se16n_output,
        ls_outfields       LIKE LINE OF lt_outfields,

*.事件增强控制
        lt_callback_events TYPE se16n_events,
        ls_callback_events TYPE se16n_events_type.

  IF p_werks NE ''.

*工厂权限检查
    AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
     ID 'ACTVT' FIELD '02'
     ID 'WERKS' FIELD p_werks.
    IF sy-subrc <> 0.
*     Implement a suitable exception handling here
      MESSAGE '对此工厂无权限操作！'
      TYPE 'S'
      DISPLAY LIKE 'E'.
      LEAVE LIST-PROCESSING.

    ENDIF.


    ls_seltab-field = 'WERKS'.
    ls_seltab-sign = 'I'.
    ls_seltab-option = 'EQ'.
    ls_seltab-low = p_werks.

    APPEND ls_seltab TO lt_seltab.
    CLEAR ls_seltab.


*.event to determine content of own fields and for authority check
    ls_callback_events-callback_program = sy-repid.
    ls_callback_events-callback_form    = 'FRM_SAVE_EXIT'.
    ls_callback_events-callback_event   = 'SAVE'.
    APPEND ls_callback_events TO lt_callback_events.

*隐藏 工厂 字段
    DATA: lv_tabname TYPE tabname,
          lt_fields  TYPE wheretab.

    lv_tabname = pu_tabname.

    CALL FUNCTION 'BKK_DB_GET_TABLE_FIELDS'
      EXPORTING
        i_tabname  = lv_tabname
*       I_ALIAS    =
      CHANGING
        c_t_fields = lt_fields.

    DELETE lt_fields WHERE text = 'WERKS'.

    lt_outfields[] = CORRESPONDING #( lt_fields[] MAPPING field = text ).

  ENDIF.

  TRY.

*要先锁表
*      DATA lv_tabname TYPE tabname.

      lv_tabname = pu_tabname.

      CALL FUNCTION 'ENQUEUE_E_TABLE'
        EXPORTING
          mode_rstable   = 'E'
          tabname        = lv_tabname
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
        MESSAGE ID sy-msgid TYPE 'S'
                NUMBER sy-msgno
*                INTO DATA(mtext)
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                DISPLAY LIKE 'E'
                .

        RETURN.

      ENDIF.

      CALL FUNCTION 'SE16N_INTERFACE'
        EXPORTING
          i_tab              = pu_tabname
          i_edit             = 'X'
          i_sapedit          = 'X'
          i_max_lines        = 9999
          i_clnt_dep         = 'X'
          i_uname            = sy-uname
        TABLES
          it_selfields       = lt_seltab
          it_output_fields   = lt_outfields
          it_callback_events = lt_callback_events
        EXCEPTIONS
          no_values          = 1
          OTHERS             = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO DATA(mtext)
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        LEAVE LIST-PROCESSING.

      ENDIF.


    CATCH cx_root INTO oref.
      mtext = oref->get_text( ).
      IF mtext = ''.
        mtext = '内部异常'.

      ENDIF.
      MESSAGE mtext
      TYPE 'S'
      DISPLAY LIKE 'E'.

      LEAVE LIST-PROCESSING.

  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_tcode_trans
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM frm_tcode_trans .


*  BREAK cuijunhu.
  CASE sy-ucomm.
    WHEN tcode1.

      SELECT SINGLE
        zlogic
        INTO @DATA(lv_zlogic)
        FROM ztpp_260a4
        WHERE werks = @p_werks.
      IF sy-subrc NE 0.
        MESSAGE '请配置工厂逻辑区分表[ZTPP_260A4]'
        TYPE 'S'
        DISPLAY LIKE 'E'.

        RETURN.

      ENDIF.

      CASE lv_zlogic.
        WHEN 'A'.
          CALL SELECTION-SCREEN '1001'.

        WHEN 'B'.
          CALL SELECTION-SCREEN '1002'.

      ENDCASE.

    WHEN tcode2."待创建BOM清单程序
*      SET PARAMETER ID 'WRK' FIELD p_werks.
*
*      CALL TRANSACTION 'ZPP216A'.
      SUBMIT zrpp201a
      VIA SELECTION-SCREEN
      WITH p_werks = p_werks
      AND RETURN.

    WHEN tcode3."创建BOM程序

      CALL TRANSACTION 'ZPP216B'.

    WHEN tcode4. "判断物料组是否存在半成品

      PERFORM frm_call_se16n
      USING 'ZTPP_260A'.

    WHEN tcode5."内板属性
      PERFORM frm_call_se16n
      USING 'ZTPP_260B'.

    WHEN tcode6."内外板展宽加量
      PERFORM frm_call_se16n
      USING 'ZTPP_260C'.

    WHEN tcode7."芯材
      PERFORM frm_call_se16n
      USING 'ZTPP_260D'.

    WHEN tcode8."PE保护膜
      PERFORM frm_call_se16n
      USING 'ZTPP_260E'.

    WHEN tcode9."海绵条
      PERFORM frm_call_se16n
      USING 'ZTPP_260M'.

    WHEN tcode10."胶带
      PERFORM frm_call_se16n
      USING 'ZTPP_260G'.

    WHEN tcode11."白料
      PERFORM frm_call_se16n
      USING 'ZTPP_260H'.

    WHEN tcode12."封边黑料
      PERFORM frm_call_se16n
      USING 'ZTPP_260I'.

    WHEN tcode13."粘合剂黑料
      PERFORM frm_call_se16n
      USING 'ZTPP_260J'.

    WHEN tcode14. "胶水
      PERFORM frm_call_se16n
      USING 'ZTPP_260N'.

    WHEN tcode15. "外板属性
      PERFORM frm_call_se16n
      USING 'ZTPP_260L'.

    WHEN tcode16. "组框
      PERFORM frm_call_se16n
      USING 'ZTPP_260O'.

    WHEN tcode17. "
      PERFORM frm_call_se16n_v2
      USING 'ZTPP_260P'.

    WHEN tcode18. "
      PERFORM frm_call_se16n_v2
      USING 'ZTPP_260Q'.

    WHEN tcode19  "线体BOM配置表

      .
      PERFORM frm_call_se16n
      USING 'ZTPP_260R'.

    WHEN tcode20. "瓦楞白料
      PERFORM frm_call_se16n
      USING 'ZTPP_260S'.

    WHEN tcode21. "预制金属板压瓦
      PERFORM frm_call_se16n
      USING 'ZTPP_260T'.

    WHEN tcode22. "特殊无纺布
      PERFORM frm_call_se16n
      USING 'ZTPP_260U'.

    WHEN tcode23. "岩棉宽度及用量
      PERFORM frm_call_se16n
      USING 'ZTPP_260V'.

    WHEN tcode24. "岩棉条厚度
      PERFORM frm_call_se16n
      USING 'ZTPP_260W'.

    WHEN tcode25. "洁净PE保护膜
      PERFORM frm_call_se16n
      USING 'ZTPP_260X'.

    WHEN tcode26. "石膏板宽度
      PERFORM frm_call_se16n
      USING 'ZTPP_260Y'.

    WHEN tcode27. "玻镁宽度
      PERFORM frm_call_se16n
      USING 'ZTPP_260Z'.

    WHEN tcode28. "纸蜂窝厚度
      PERFORM frm_call_se16n
      USING 'ZTPP_260A1'.

    WHEN tcode29. "铝蜂窝厚度
      PERFORM frm_call_se16n
      USING 'ZTPP_260A2'.


    WHEN tcode32. "芯材填充剂
      PERFORM frm_call_se16n
      USING 'ZTPP_260A5'.

    WHEN tcode33. "黑料、聚氨酯主剂
      PERFORM frm_call_se16n_v2
      USING 'ZTPP_260A6'.

  ENDCASE.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  FRM_SAVE_EXIT
*&---------------------------------------------------------------------*
*.
FORM frm_save_exit
  USING
    pu_exit_point  TYPE se16n_event
    VALUE(pu_action)
    VALUE(pu_tab)
  CHANGING pc_dref TYPE REF TO data.

*  BREAK cuijunhu.
*.
  ASSIGN pc_dref->* TO FIELD-SYMBOL(<fs_wa>).

  IF <fs_wa> IS ASSIGNED.
    ASSIGN COMPONENT 'WERKS'
    OF STRUCTURE <fs_wa>
    TO FIELD-SYMBOL(<fs_werks>)
    .
    IF <fs_werks> IS ASSIGNED.
      <fs_werks> = p_werks.

    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_call_se16n_v2
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_
*&---------------------------------------------------------------------*
FORM frm_call_se16n_v2
  USING
    pu_tabname TYPE se16n_tab.

  DATA oref TYPE REF TO cx_root.

  CHECK pu_tabname IS NOT INITIAL.

  DATA: lt_seltab          TYPE TABLE OF se16n_seltab,
        ls_seltab          LIKE LINE OF lt_seltab,
*.输出字段控制
        lt_outfields       TYPE TABLE OF se16n_output,
        ls_outfields       LIKE LINE OF lt_outfields,

*.事件增强控制
        lt_callback_events TYPE se16n_events,
        ls_callback_events TYPE se16n_events_type.

  TRY.

*要先锁表
      DATA lv_tabname TYPE tabname.

      lv_tabname = pu_tabname.

      CALL FUNCTION 'ENQUEUE_E_TABLE'
        EXPORTING
          mode_rstable   = 'E'
          tabname        = lv_tabname
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
        MESSAGE ID sy-msgid TYPE 'S'
                NUMBER sy-msgno
*                INTO DATA(mtext)
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
                DISPLAY LIKE 'E'
                .

        RETURN.

      ENDIF.

      CALL FUNCTION 'SE16N_INTERFACE'
        EXPORTING
          i_tab              = pu_tabname
          i_edit             = 'X'
          i_sapedit          = 'X'
          i_max_lines        = 9999
          i_clnt_dep         = 'X'
          i_uname            = sy-uname
        TABLES
          it_selfields       = lt_seltab
          it_output_fields   = lt_outfields
          it_callback_events = lt_callback_events
        EXCEPTIONS
          no_values          = 1
          OTHERS             = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                INTO DATA(mtext)
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

        LEAVE LIST-PROCESSING.

      ENDIF.


    CATCH cx_root INTO oref.
      mtext = oref->get_text( ).
      IF mtext = ''.
        mtext = '内部异常'.

      ENDIF.
      MESSAGE mtext
      TYPE 'S'
      DISPLAY LIKE 'E'.

      LEAVE LIST-PROCESSING.

  ENDTRY.
ENDFORM.
