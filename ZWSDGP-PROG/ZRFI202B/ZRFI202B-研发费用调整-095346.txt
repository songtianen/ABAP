*&---------------------------------------------------------------------*
*& Report ZRFI202B
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZRFI202B MESSAGE-ID ZMSG_GP.
TABLES:ZTFIRD_MATPOST,
       ISELLIST,
       BSEG,
       UF05A,
       T001,
       BKPF.
TYPE-POOLS:SLIS.
DATA:FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.
DATA:BEGIN OF ITAB OCCURS 0.
       INCLUDE STRUCTURE ZTFIRD_MATPOST.
DATA:TOPPAGE,
       FLAG     TYPE CHAR1,
       ICON     TYPE ICON-ID,
       MSG      TYPE BAPI_MSG,
       HKONTT   TYPE SKAT-TXT20,
       HKONT_PT TYPE SKAT-TXT20,
       HKONT_XT TYPE SKAT-TXT20,
       KTEXT    TYPE AUFK-KTEXT,
       BUTXT    TYPE T001-BUTXT,
       CSKT     TYPE CSKT-KTEXT,
     END OF ITAB,
     IT_ZTFI205 TYPE TABLE OF ZTFI205 WITH HEADER LINE,
     IT_SAVE    TYPE TABLE OF ZTFIRD_MATPOST WITH HEADER LINE,
     IT_AUFNR   TYPE TABLE OF CKI_AUFNR WITH HEADER LINE,
     IT_AUFK    TYPE TABLE OF AUFK WITH HEADER LINE,
     IT_HKONT   TYPE TABLE OF VKREPCUST WITH HEADER LINE,
     IT_KOSTL   TYPE TABLE OF KOSTL_STR WITH HEADER LINE,
     IT_CSKT    TYPE TABLE OF CSKT WITH HEADER LINE,
     IT_SKAT    TYPE TABLE OF SKAT WITH HEADER LINE.
DATA:P_BUDAT TYPE SY-DATUM,
     LASTDAY TYPE SY-DATUM,
     BELNR   TYPE BELNR_D,
     MSG     TYPE BAPI_MSG,
     GJAHR   TYPE GJAHR.
CONSTANTS: GREEN TYPE ICON-ID VALUE '@08@',
           RED   TYPE ICON-ID VALUE '@0A@'.


SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE T1.
  PARAMETERS:P_BUKRS LIKE BKPF-BUKRS MEMORY ID BUK OBLIGATORY,
             P_MONTH LIKE ISELLIST-MONTH OBLIGATORY,
             P_STGRD LIKE UF05A-STGRD OBLIGATORY DEFAULT 'Z1'.
SELECTION-SCREEN END OF BLOCK B1.
SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE T2.
  PARAMETERS:P1 RADIOBUTTON GROUP GRD1 USER-COMMAND CLICK DEFAULT 'X',
             P2 RADIOBUTTON GROUP GRD1.
SELECTION-SCREEN END OF BLOCK B2.

LOAD-OF-PROGRAM.
  SELECT * INTO TABLE IT_ZTFI205 FROM ZTFI205.
  SORT IT_ZTFI205 BY HKONT.
  P_BUDAT = SY-DATUM+0(6) && '01'.
  P_BUDAT = P_BUDAT - 2.
  P_MONTH = P_BUDAT+0(6).

AT SELECTION-SCREEN OUTPUT.
  T1 = '期间'.
  T2 = '功能选择'.
  %_P1_%_APP_%-TEXT = '费用管理'.
  %_P2_%_APP_%-TEXT = '结果查询'.
  %_P_BUKRS_%_APP_%-TEXT = '公司代码'.
  %_P_MONTH_%_APP_%-TEXT = '年度期间'.
  %_P_STGRD_%_APP_%-TEXT = '冲销原因'.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_MONTH.
  PERFORM SELMONTH(ZPUBFORM) CHANGING P_MONTH.

START-OF-SELECTION.
  PERFORM SAVELOG(ZREPLOG) USING SY-REPID '' IF FOUND.
  PERFORM GETDATA.
  PERFORM UPDATELOG(ZREPLOG) IF FOUND.

  PERFORM ALVSHOW.


FORM GETDATA.
  CONCATENATE P_MONTH '01' INTO P_BUDAT.
  CALL FUNCTION 'FIMA_DATE_CREATE'
    EXPORTING
      I_DATE                  = P_BUDAT
      I_SET_LAST_DAY_OF_MONTH = 'X'
    IMPORTING
      E_DATE                  = LASTDAY.

  SELECT SINGLE * FROM T001 WHERE BUKRS = P_BUKRS.


  CASE 'X'.
    WHEN P1.
      SELECT SINGLE COUNT(*)
        FROM ZTFIRD_MATPOST
        WHERE BUKRS = P_BUKRS
        AND   YXQJ = P_MONTH.
      IF SY-SUBRC EQ 0.
        MESSAGE S000(OO) WITH '该期间已过账生成会计凭证!' DISPLAY LIKE 'E'.
        STOP.
      ENDIF.
      SELECT BS~BUKRS,
             BS~HKONT,
             BS~AUGDT,
             BS~AUGBL,
             BS~ZUONR,
             BS~GJAHR,
             BS~BELNR,
             BS~BUZEI,
             BS~XREF3,
             BS~DMBTR,
             BS~SHKZG,
             BS~WAERS,
             BS~AUFNR
        INTO TABLE @DATA(IT_BSIS)
        FROM BSIS AS BS INNER JOIN AUFK AS AU ON BS~AUFNR = AU~AUFNR
                        INNER JOIN BKPF AS BK ON BS~BELNR = BK~BELNR
                                             AND BS~BUKRS = BK~BUKRS
                                             AND BS~GJAHR = BK~GJAHR
        WHERE BS~BUKRS = @P_BUKRS
        AND   BS~HKONT LIKE '6600%'
        AND   BS~BUDAT BETWEEN @P_BUDAT AND @LASTDAY
        AND   AU~AUART = 'Z002'
        AND   AU~ABKRS = '02'
        AND   BK~STBLG = ''.
      SELECT BS~BUKRS,
             BS~HKONT,
             BS~AUGDT,
             BS~AUGBL,
             BS~ZUONR,
             BS~GJAHR,
             BS~BELNR,
             BS~BUZEI,
             BS~XREF3,
             BS~DMBTR,
             BS~SHKZG,
             BS~WAERS,
             BS~AUFNR
        APPENDING TABLE @IT_BSIS
        FROM BSAS AS BS INNER JOIN AUFK AS AU ON BS~AUFNR = AU~AUFNR
                        INNER JOIN BKPF AS BK ON BS~BELNR = BK~BELNR
                                             AND BS~BUKRS = BK~BUKRS
                                             AND BS~GJAHR = BK~GJAHR
        WHERE BS~BUKRS = @P_BUKRS
        AND   BS~HKONT LIKE '6600%'
        AND   BS~BUDAT BETWEEN @P_BUDAT AND @LASTDAY
        AND   AU~AUART = 'Z002'
        AND   AU~ABKRS = '02'
        AND   BK~STBLG = ''.
      IF IT_BSIS IS INITIAL.
        MESSAGE S005 DISPLAY LIKE 'E'.
        STOP.
      ENDIF.
      SORT IT_BSIS BY BUKRS GJAHR BELNR BUZEI.
      SELECT *
        INTO TABLE @DATA(IT_BSEG)
        FROM BSEG
        FOR ALL ENTRIES IN @IT_BSIS
        WHERE BUKRS = @IT_BSIS-BUKRS
        AND   GJAHR = @IT_BSIS-GJAHR
        AND   BELNR = @IT_BSIS-BELNR
        AND   BUZEI = @IT_BSIS-BUZEI.
      SORT IT_BSEG BY BUKRS GJAHR BELNR BUZEI.
      LOOP AT IT_BSIS INTO DATA(WA_BSIS).
        CLEAR:ITAB.
        MOVE-CORRESPONDING WA_BSIS TO ITAB.
        READ TABLE IT_BSEG INTO BSEG WITH KEY BUKRS = WA_BSIS-BUKRS
                                              GJAHR = WA_BSIS-GJAHR
                                              BELNR = WA_BSIS-BELNR
                                              BUZEI = WA_BSIS-BUZEI
                                              BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          ITAB-ZZFI03 = BSEG-ZZFI03.
        ENDIF.
        READ TABLE IT_ZTFI205 WITH KEY HKONT = WA_BSIS-HKONT BINARY SEARCH.
        IF SY-SUBRC EQ 0.
          ITAB-HKONT_P = IT_ZTFI205-HKONT_P.
          ITAB-HKONT_X = IT_ZTFI205-HKONT_X.
        ENDIF.
        IF ITAB-HKONT_P IS INITIAL
          OR ITAB-HKONT_X IS INITIAL.
          ITAB-ICON = RED.
          ITAB-MSG = '科目' && ITAB-HKONT && '未在配置表ZTFI205找到科目'.
          ITAB-FLAG = 'E'.
        ENDIF.
        ITAB-YXQJ = P_MONTH.
        SPLIT ITAB-XREF3 AT '/' INTO MSG ITAB-KOSTL.
        IF ITAB-KOSTL IS INITIAL.
          CONTINUE.
        ENDIF.
        CONCATENATE P_BUKRS ITAB-KOSTL INTO ITAB-KOSTL.
        PERFORM ADDZERO(ZPUBFORM) CHANGING ITAB-KOSTL.
        APPEND ITAB.
        CLEAR:IT_AUFNR,IT_HKONT,IT_KOSTL.
        IT_AUFNR-AUFNR = ITAB-AUFNR.
        IT_KOSTL-KOSTL = ITAB-KOSTL.
        IT_HKONT-HKONT = ITAB-HKONT.
        COLLECT:IT_KOSTL,IT_AUFNR,IT_HKONT.
        IT_HKONT-HKONT = ITAB-HKONT_P.
        COLLECT IT_HKONT.
        IT_HKONT-HKONT = ITAB-HKONT_X.
        COLLECT IT_HKONT.
      ENDLOOP.
    WHEN P2.
      SELECT *
        INTO TABLE ITAB
        FROM ZTFIRD_MATPOST
        WHERE BUKRS = P_BUKRS
        AND   YXQJ = P_MONTH.
      LOOP AT ITAB.
        CLEAR:IT_AUFNR,IT_HKONT,IT_KOSTL.
        IT_AUFNR-AUFNR = ITAB-AUFNR.
        IT_KOSTL-KOSTL = ITAB-KOSTL.
        IT_HKONT-HKONT = ITAB-HKONT.
        COLLECT:IT_KOSTL,IT_AUFNR,IT_HKONT.
        IT_HKONT-HKONT = ITAB-HKONT_P.
        COLLECT IT_HKONT.
        IT_HKONT-HKONT = ITAB-HKONT_X.
        COLLECT IT_HKONT.
      ENDLOOP.
  ENDCASE.
  IF ITAB[] IS INITIAL.
    MESSAGE S005 DISPLAY LIKE 'E'.
    STOP.
  ENDIF.
  DELETE IT_AUFNR WHERE AUFNR IS INITIAL.
  IF IT_AUFNR[] IS NOT INITIAL.
    SORT IT_AUFNR BY AUFNR.
    SELECT *
      INTO TABLE IT_AUFK
      FROM AUFK
      FOR ALL ENTRIES IN IT_AUFNR
      WHERE AUFNR = IT_AUFNR-AUFNR.
    SORT IT_AUFK BY AUFNR.
  ENDIF.
  DELETE IT_HKONT WHERE HKONT IS INITIAL.
  IF IT_HKONT[] IS NOT INITIAL.
    SELECT *
      INTO TABLE IT_SKAT
      FROM SKAT
      FOR ALL ENTRIES IN IT_HKONT
      WHERE SAKNR = IT_HKONT-HKONT
      AND   SPRAS = SY-LANGU
      AND   KTOPL = T001-KTOPL.
    SORT IT_SKAT BY SAKNR.
  ENDIF.
  DELETE IT_KOSTL WHERE KOSTL IS INITIAL.
  IF IT_KOSTL[] IS NOT INITIAL.
    SORT IT_KOSTL BY KOSTL.
    SELECT *
      INTO TABLE IT_CSKT
      FROM CSKT
      FOR ALL ENTRIES IN IT_KOSTL
      WHERE KOSTL = IT_KOSTL-KOSTL
      AND   SPRAS = SY-LANGU
      AND   KOKRS = T001-KTOPL.
    SORT IT_CSKT BY KOSTL.
  ENDIF.

  LOOP AT ITAB.
    ITAB-BUTXT = T001-BUTXT.
    READ TABLE IT_AUFK WITH KEY AUFNR = ITAB-AUFNR BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ITAB-KTEXT = IT_AUFK-KTEXT.
    ENDIF.
    READ TABLE IT_CSKT WITH KEY KOSTL = ITAB-KOSTL BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ITAB-CSKT = IT_CSKT-KTEXT.
    ELSE.
      DELETE ITAB.
      CONTINUE.
    ENDIF.
    READ TABLE IT_SKAT WITH KEY SAKNR = ITAB-HKONT BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ITAB-HKONTT = IT_SKAT-TXT20.
    ENDIF.
    READ TABLE IT_SKAT WITH KEY SAKNR = ITAB-HKONT_P BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ITAB-HKONT_PT = IT_SKAT-TXT20.
    ENDIF.
    READ TABLE IT_SKAT WITH KEY SAKNR = ITAB-HKONT_X BINARY SEARCH.
    IF SY-SUBRC EQ 0.
      ITAB-HKONT_XT = IT_SKAT-TXT20.
    ENDIF.
    MODIFY ITAB.
  ENDLOOP.
  IF ITAB[] IS INITIAL.
    MESSAGE S005 DISPLAY LIKE 'E'.
    STOP.
  ENDIF.
ENDFORM.
FORM ALVSHOW.
  PERFORM INIT_FIELDCAT(ZPUBFORM) TABLES FIELDCAT USING:
'ICON' '状态' '' '' '' '' ,
'MSG' '消息' '' '' '' '' ,
'BUKRS' '公司代码' '' '' '' '' ,
'BUTXT' '公司描述' '' '' '' '' ,
'BELNR' '会计凭证' '' '' 'X' '' ,
'GJAHR' '凭证年度' '' '' '' '' ,
'BUZEI' '行项目' '' '' '' '' ,
'WAERS' '货币' '' '' '' '' ,
'DMBTR' '金额' '' '' '' '' ,
'HKONT' '会计科目' 'X' '' '' '' ,
'HKONTT' '科目描述' '' '' '' '' ,
'HKONT_P' '目标科目' 'X' '' '' '' ,
'HKONT_PT' '目标科目描述' '' '' '' '' ,
'HKONT_X' '转出科目' 'X' '' '' '' ,
'HKONT_XT' '转出科目描述' '' '' '' '' ,
'BELNR_P' '调整凭证' '' '' 'X' '' ,
'GJAHR_P' '调整年度' '' '' '' '' ,
'XREF3' '参考代码3' '' '' '' '' ,
'KOSTL' '目标成本中心' 'X' '' '' '' ,
'CSKT' '目标成本中心描述' '' '' '' '' ,
'ZZFI03' '业务特征3' '' '' '' '' ,
'AUFNR' '订单' 'X' '' '' '' ,
'KTEXT' '订单描述' '' '' '' '' .
  PERFORM ALVFM(ZPUBFORM) TABLES ITAB FIELDCAT USING 'X' ''.
ENDFORM.
FORM SET_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB.
  DATA LT_EXFCODE TYPE TABLE OF SY-UCOMM.
  IF P2 = 'X'.
    APPEND 'BUT01' TO LT_EXFCODE.
  ENDIF.
  SET PF-STATUS 'STANDARD' EXCLUDING LT_EXFCODE.
ENDFORM. "set_status
FORM TOP_OF_PAGE.
  DATA:IT_LIST_COMMENTARY TYPE SLIS_T_LISTHEADER,
       WA_LIST_COMMENTARY TYPE SLIS_LISTHEADER,
       SJTMS              TYPE NUMC10.
  CLEAR:WA_LIST_COMMENTARY,SJTMS.
  REFRESH:IT_LIST_COMMENTARY.

  SJTMS = LINES( ITAB ).
  PERFORM DELZERO(ZPUBFORM) CHANGING SJTMS.

  WA_LIST_COMMENTARY-TYP = 'S'.
  WA_LIST_COMMENTARY-KEY = '条目数:'.
  WA_LIST_COMMENTARY-INFO = SJTMS.
  APPEND WA_LIST_COMMENTARY TO IT_LIST_COMMENTARY.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      IT_LIST_COMMENTARY = IT_LIST_COMMENTARY[]
    EXCEPTIONS
      OTHERS             = 1.
ENDFORM.
FORM USER_COMMAND USING R_UCOMM LIKE SY-UCOMM
                        RS_SELFIELD TYPE SLIS_SELFIELD.
  DATA WA LIKE LINE OF ITAB.
  CASE R_UCOMM.
    WHEN '&IC1'.
      CHECK RS_SELFIELD-TABINDEX <> 0 . "小计行总计行什么的忽略
      READ TABLE ITAB INTO WA INDEX RS_SELFIELD-TABINDEX.
      CASE RS_SELFIELD-FIELDNAME.
        WHEN 'BELNR'.
          PERFORM FB03(ZPUBFORM) USING WA-BELNR WA-GJAHR WA-BUKRS ''.
        WHEN 'BELNR_P'.
          PERFORM FB03(ZPUBFORM) USING WA-BELNR_P WA-GJAHR_P WA-BUKRS ''.
      ENDCASE.
    WHEN 'BUT01'."过账
      PERFORM BUT01.
    WHEN 'BUT02'."冲销
      PERFORM BUT02.
  ENDCASE.
  RS_SELFIELD-ROW_STABLE = 'X'.
  RS_SELFIELD-COL_STABLE = 'X'.
  RS_SELFIELD-REFRESH = 'X'.
ENDFORM.
FORM BUT01.
  DATA:IT_FIPOST TYPE TABLE OF ZSFMS_FIPOST WITH HEADER LINE,
       IT_CURR   TYPE TABLE OF BAPIACCR09 WITH HEADER LINE.
  DATA:BKTXT TYPE BKTXT,
       TABIX TYPE SY-TABIX,
       XBLNR TYPE XBLNR.
  CLEAR:IT_SAVE[],IT_FIPOST[],BELNR,GJAHR,BKTXT,XBLNR,
  MSG,IT_CURR[].
  READ TABLE ITAB WITH KEY FLAG = 'E'.
  IF SY-SUBRC EQ 0.
    MESSAGE E000(OO) WITH '存在错误不允许过账'.
  ENDIF.
  LOOP AT ITAB WHERE BELNR_P IS INITIAL.
    CLEAR:IT_FIPOST,IT_SAVE.
    CLEAR:IT_FIPOST.
    IT_FIPOST-BSCHL = '40'.
    IT_FIPOST-HKONT = ITAB-HKONT_P.
    IT_FIPOST-KOSTL = ITAB-KOSTL.
    IT_FIPOST-DMBTR = ITAB-DMBTR.
    IT_FIPOST-ZUONR = ITAB-BUKRS && ITAB-BELNR && ITAB-BUZEI.
    APPEND IT_FIPOST.
    CLEAR:IT_FIPOST.
    IT_FIPOST-BSCHL = '50'.
    IT_FIPOST-HKONT = ITAB-HKONT_X.
    IT_FIPOST-DMBTR = ITAB-DMBTR.
    IT_FIPOST-ZUONR = ITAB-BUKRS && ITAB-BELNR && ITAB-BUZEI.
    APPEND IT_FIPOST.
  ENDLOOP.
  LOOP AT IT_FIPOST.
    TABIX = SY-TABIX.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '11'.
    IT_CURR-AMT_DOCCUR  = ITAB-DMBTR.
    APPEND  IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '12'.
    IT_CURR-AMT_DOCCUR  = ITAB-DMBTR.
    APPEND IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '31'.
    IT_CURR-AMT_DOCCUR  = ITAB-DMBTR.
    APPEND IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '32'.
    IT_CURR-AMT_DOCCUR  = ITAB-DMBTR.
    APPEND IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '00'.
    IT_CURR-AMT_DOCCUR  = 0.
    APPEND IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '10'.
    IT_CURR-AMT_DOCCUR  = 0.
    APPEND IT_CURR.
    CLEAR:IT_CURR.
    IT_CURR-ITEMNO_ACC = TABIX.
    IT_CURR-CURR_TYPE = '30'.
    IT_CURR-AMT_DOCCUR  = 0.
    APPEND IT_CURR.
  ENDLOOP.
  EXPORT OUTCURR = IT_CURR
  TO MEMORY ID 'MEMO_ZRFI202B'.

  CALL FUNCTION 'ZFMS_13_FIPOST'
    EXPORTING
      BUKRS = P_BUKRS
      BKTXT = BKTXT
      BUDAT = LASTDAY
      BLART = 'ZG'
      WAERS = 'CNY'
      BLDAT = LASTDAY
      XBLNR = XBLNR
    IMPORTING
      BELNR = BELNR
      RTMSG = MSG
      GJAHR = GJAHR
    TABLES
      INTAB = IT_FIPOST.
  LOOP AT ITAB WHERE BELNR_P IS INITIAL.
    IF BELNR IS NOT INITIAL.
      ITAB-ICON = GREEN.
      ITAB-BELNR_P = BELNR.
      ITAB-GJAHR_P = GJAHR.
      MOVE-CORRESPONDING ITAB TO IT_SAVE.
      IT_SAVE-YXQJ = P_MONTH.
      APPEND IT_SAVE.
    ELSE.
      ITAB-ICON = RED.
    ENDIF.
    MODIFY ITAB.
  ENDLOOP.
  IF IT_SAVE[] IS NOT INITIAL.
    MODIFY ZTFIRD_MATPOST FROM TABLE IT_SAVE.
    COMMIT WORK.
  ENDIF.
ENDFORM.
FORM BUT02.
  DATA:IT_BELNR TYPE TABLE OF BKPF_KEY WITH HEADER LINE.
  CLEAR:IT_BELNR[],MSG.
  LOOP AT ITAB WHERE BELNR_P IS NOT INITIAL.
    CLEAR:IT_BELNR.
    IT_BELNR-BELNR = ITAB-BELNR_P.
    IT_BELNR-GJAHR = ITAB-GJAHR_P.
    IT_BELNR-BUKRS = ITAB-BUKRS.
    COLLECT IT_BELNR.
  ENDLOOP.
  IF IT_BELNR[] IS INITIAL.
    MESSAGE E005.
  ENDIF.
  LOOP AT IT_BELNR.
    CLEAR:MSG.
    PERFORM FB08(ZPUBFORM) USING IT_BELNR-BELNR
                                 IT_BELNR-GJAHR
                                 IT_BELNR-BUKRS
                                 P_STGRD
                                 LASTDAY
                           CHANGING MSG.
    LOOP AT ITAB WHERE BUKRS = IT_BELNR-BUKRS
                   AND BELNR_P = IT_BELNR-BELNR
                   AND GJAHR_P = IT_BELNR-GJAHR.
      IF MSG+0(1) = 'S'.
        CLEAR:ITAB-BELNR_P.
        ITAB-ICON = GREEN.
      ELSE.
        ITAB-ICON = RED.
      ENDIF.
      MODIFY ITAB.
    ENDLOOP.
    IF MSG+0(1) = 'S'.
      DELETE FROM  ZTFIRD_MATPOST WHERE BUKRS = IT_BELNR-BUKRS
                                    AND BELNR_P = IT_BELNR-BELNR
                                    AND GJAHR_P = IT_BELNR-GJAHR.
      COMMIT WORK.
    ENDIF.
  ENDLOOP.
ENDFORM.
